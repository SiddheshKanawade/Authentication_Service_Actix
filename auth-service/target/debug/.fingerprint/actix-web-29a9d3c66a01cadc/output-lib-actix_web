{"future_incompat_report":[{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6025,"byte_end":6027,"line_start":215,"line_end":215,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":28,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7157,"byte_end":7199,"line_start":255,"line_end":255,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest1, (0, A));","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[allow(proc_macro_back_compat)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:215:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub struct $fut_type<$($T: FromRequest),+> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest1, (0, A));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(proc_macro_back_compat)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6072,"byte_end":6074,"line_start":216,"line_end":216,"column_start":26,"column_end":28,"is_primary":true,"text":[{"text":"        items: ($(Option<$T>,)+),","highlight_start":26,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7157,"byte_end":7199,"line_start":255,"line_end":255,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest1, (0, A));","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:216:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        items: ($(Option<$T>,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest1, (0, A));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6098,"byte_end":6100,"line_start":217,"line_end":217,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"        futs: ($($T::Future,)+),","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7157,"byte_end":7199,"line_start":255,"line_end":255,"column_start":1,"column_end":43,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest1, (0, A));","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:217:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        futs: ($($T::Future,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest1, (0, A));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6025,"byte_end":6027,"line_start":215,"line_end":215,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":28,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7201,"byte_end":7251,"line_start":256,"line_end":256,"column_start":1,"column_end":51,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest2, (0, A), (1, B));","highlight_start":1,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:215:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub struct $fut_type<$($T: FromRequest),+> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest2, (0, A), (1, B));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6072,"byte_end":6074,"line_start":216,"line_end":216,"column_start":26,"column_end":28,"is_primary":true,"text":[{"text":"        items: ($(Option<$T>,)+),","highlight_start":26,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7201,"byte_end":7251,"line_start":256,"line_end":256,"column_start":1,"column_end":51,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest2, (0, A), (1, B));","highlight_start":1,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:216:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        items: ($(Option<$T>,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest2, (0, A), (1, B));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6098,"byte_end":6100,"line_start":217,"line_end":217,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"        futs: ($($T::Future,)+),","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7201,"byte_end":7251,"line_start":256,"line_end":256,"column_start":1,"column_end":51,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest2, (0, A), (1, B));","highlight_start":1,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:217:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        futs: ($($T::Future,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest2, (0, A), (1, B));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6025,"byte_end":6027,"line_start":215,"line_end":215,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":28,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7253,"byte_end":7311,"line_start":257,"line_end":257,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest3, (0, A), (1, B), (2, C));","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:215:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub struct $fut_type<$($T: FromRequest),+> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest3, (0, A), (1, B), (2, C));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6072,"byte_end":6074,"line_start":216,"line_end":216,"column_start":26,"column_end":28,"is_primary":true,"text":[{"text":"        items: ($(Option<$T>,)+),","highlight_start":26,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7253,"byte_end":7311,"line_start":257,"line_end":257,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest3, (0, A), (1, B), (2, C));","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:216:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        items: ($(Option<$T>,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest3, (0, A), (1, B), (2, C));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6098,"byte_end":6100,"line_start":217,"line_end":217,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"        futs: ($($T::Future,)+),","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7253,"byte_end":7311,"line_start":257,"line_end":257,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest3, (0, A), (1, B), (2, C));","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:217:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        futs: ($($T::Future,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest3, (0, A), (1, B), (2, C));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6025,"byte_end":6027,"line_start":215,"line_end":215,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":28,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7313,"byte_end":7379,"line_start":258,"line_end":258,"column_start":1,"column_end":67,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest4, (0, A), (1, B), (2, C), (3, D));","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:215:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub struct $fut_type<$($T: FromRequest),+> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest4, (0, A), (1, B), (2, C), (3, D));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6072,"byte_end":6074,"line_start":216,"line_end":216,"column_start":26,"column_end":28,"is_primary":true,"text":[{"text":"        items: ($(Option<$T>,)+),","highlight_start":26,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7313,"byte_end":7379,"line_start":258,"line_end":258,"column_start":1,"column_end":67,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest4, (0, A), (1, B), (2, C), (3, D));","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:216:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        items: ($(Option<$T>,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest4, (0, A), (1, B), (2, C), (3, D));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6098,"byte_end":6100,"line_start":217,"line_end":217,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"        futs: ($($T::Future,)+),","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7313,"byte_end":7379,"line_start":258,"line_end":258,"column_start":1,"column_end":67,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest4, (0, A), (1, B), (2, C), (3, D));","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:217:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        futs: ($($T::Future,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest4, (0, A), (1, B), (2, C), (3, D));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6025,"byte_end":6027,"line_start":215,"line_end":215,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":28,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7381,"byte_end":7455,"line_start":259,"line_end":259,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest5, (0, A), (1, B), (2, C), (3, D), (4, E));","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:215:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub struct $fut_type<$($T: FromRequest),+> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest5, (0, A), (1, B), (2, C), (3, D), (4, E));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6072,"byte_end":6074,"line_start":216,"line_end":216,"column_start":26,"column_end":28,"is_primary":true,"text":[{"text":"        items: ($(Option<$T>,)+),","highlight_start":26,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7381,"byte_end":7455,"line_start":259,"line_end":259,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest5, (0, A), (1, B), (2, C), (3, D), (4, E));","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:216:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        items: ($(Option<$T>,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest5, (0, A), (1, B), (2, C), (3, D), (4, E));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6098,"byte_end":6100,"line_start":217,"line_end":217,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"        futs: ($($T::Future,)+),","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7381,"byte_end":7455,"line_start":259,"line_end":259,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest5, (0, A), (1, B), (2, C), (3, D), (4, E));","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:217:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        futs: ($($T::Future,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest5, (0, A), (1, B), (2, C), (3, D), (4, E));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6025,"byte_end":6027,"line_start":215,"line_end":215,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":28,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7457,"byte_end":7539,"line_start":260,"line_end":260,"column_start":1,"column_end":83,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest6, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F));","highlight_start":1,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:215:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub struct $fut_type<$($T: FromRequest),+> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest6, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6072,"byte_end":6074,"line_start":216,"line_end":216,"column_start":26,"column_end":28,"is_primary":true,"text":[{"text":"        items: ($(Option<$T>,)+),","highlight_start":26,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7457,"byte_end":7539,"line_start":260,"line_end":260,"column_start":1,"column_end":83,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest6, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F));","highlight_start":1,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:216:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        items: ($(Option<$T>,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest6, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6098,"byte_end":6100,"line_start":217,"line_end":217,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"        futs: ($($T::Future,)+),","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7457,"byte_end":7539,"line_start":260,"line_end":260,"column_start":1,"column_end":83,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest6, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F));","highlight_start":1,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:217:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        futs: ($($T::Future,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest6, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6025,"byte_end":6027,"line_start":215,"line_end":215,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":28,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7541,"byte_end":7631,"line_start":261,"line_end":261,"column_start":1,"column_end":91,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest7, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G));","highlight_start":1,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:215:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub struct $fut_type<$($T: FromRequest),+> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest7, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6072,"byte_end":6074,"line_start":216,"line_end":216,"column_start":26,"column_end":28,"is_primary":true,"text":[{"text":"        items: ($(Option<$T>,)+),","highlight_start":26,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7541,"byte_end":7631,"line_start":261,"line_end":261,"column_start":1,"column_end":91,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest7, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G));","highlight_start":1,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:216:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        items: ($(Option<$T>,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest7, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6098,"byte_end":6100,"line_start":217,"line_end":217,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"        futs: ($($T::Future,)+),","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7541,"byte_end":7631,"line_start":261,"line_end":261,"column_start":1,"column_end":91,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest7, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G));","highlight_start":1,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:217:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        futs: ($($T::Future,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest7, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6025,"byte_end":6027,"line_start":215,"line_end":215,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":28,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7633,"byte_end":7731,"line_start":262,"line_end":262,"column_start":1,"column_end":99,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest8, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H));","highlight_start":1,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:215:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub struct $fut_type<$($T: FromRequest),+> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest8, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6072,"byte_end":6074,"line_start":216,"line_end":216,"column_start":26,"column_end":28,"is_primary":true,"text":[{"text":"        items: ($(Option<$T>,)+),","highlight_start":26,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7633,"byte_end":7731,"line_start":262,"line_end":262,"column_start":1,"column_end":99,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest8, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H));","highlight_start":1,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:216:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        items: ($(Option<$T>,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest8, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6098,"byte_end":6100,"line_start":217,"line_end":217,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"        futs: ($($T::Future,)+),","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7633,"byte_end":7731,"line_start":262,"line_end":262,"column_start":1,"column_end":99,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest8, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H));","highlight_start":1,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:217:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        futs: ($($T::Future,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest8, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6025,"byte_end":6027,"line_start":215,"line_end":215,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":28,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7733,"byte_end":7839,"line_start":263,"line_end":263,"column_start":1,"column_end":107,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest9, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H), (8, I));","highlight_start":1,"highlight_end":107}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:215:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub struct $fut_type<$($T: FromRequest),+> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest9, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H), (8, I));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6072,"byte_end":6074,"line_start":216,"line_end":216,"column_start":26,"column_end":28,"is_primary":true,"text":[{"text":"        items: ($(Option<$T>,)+),","highlight_start":26,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7733,"byte_end":7839,"line_start":263,"line_end":263,"column_start":1,"column_end":107,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest9, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H), (8, I));","highlight_start":1,"highlight_end":107}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:216:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        items: ($(Option<$T>,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest9, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H), (8, I));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6098,"byte_end":6100,"line_start":217,"line_end":217,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"        futs: ($($T::Future,)+),","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7733,"byte_end":7839,"line_start":263,"line_end":263,"column_start":1,"column_end":107,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest9, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H), (8, I));","highlight_start":1,"highlight_end":107}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:217:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        futs: ($($T::Future,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest9, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H), (8, I));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6025,"byte_end":6027,"line_start":215,"line_end":215,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":28,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7841,"byte_end":7956,"line_start":264,"line_end":264,"column_start":1,"column_end":116,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest10, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H), (8, I), (9, J));","highlight_start":1,"highlight_end":116}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:215:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub struct $fut_type<$($T: FromRequest),+> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest10, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H), (8, I), (9, J));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6072,"byte_end":6074,"line_start":216,"line_end":216,"column_start":26,"column_end":28,"is_primary":true,"text":[{"text":"        items: ($(Option<$T>,)+),","highlight_start":26,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7841,"byte_end":7956,"line_start":264,"line_end":264,"column_start":1,"column_end":116,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest10, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H), (8, I), (9, J));","highlight_start":1,"highlight_end":116}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:216:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        items: ($(Option<$T>,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest10, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H), (8, I), (9, J));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"using an old version of `actix-web`","code":{"code":"proc_macro_back_compat","explanation":null},"level":"warning","spans":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":6098,"byte_end":6100,"line_start":217,"line_end":217,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"        futs: ($($T::Future,)+),","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":7841,"byte_end":7956,"line_start":264,"line_end":264,"column_start":1,"column_end":116,"is_primary":false,"text":[{"text":"tuple_from_req!(TupleFromRequest10, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H), (8, I), (9, J));","highlight_start":1,"highlight_end":116}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"tuple_from_req!","def_site_span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs","byte_start":5338,"byte_end":7111,"line_start":194,"line_end":249,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"macro_rules! tuple_from_req ({$fut_type:ident, $(($n:tt, $T:ident)),+} => {","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// FromRequest implementation for tuple","highlight_start":1,"highlight_end":45},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[allow(unused_parens)]","highlight_start":1,"highlight_end":28},{"text":"    impl<$($T: FromRequest + 'static),+> FromRequest for ($($T,)+)","highlight_start":1,"highlight_end":67},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Error = Error;","highlight_start":1,"highlight_end":28},{"text":"        type Future = $fut_type<$($T),+>;","highlight_start":1,"highlight_end":42},{"text":"        type Config = ($($T::Config),+);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {","highlight_start":1,"highlight_end":84},{"text":"            $fut_type {","highlight_start":1,"highlight_end":24},{"text":"                items: <($(Option<$T>,)+)>::default(),","highlight_start":1,"highlight_end":55},{"text":"                futs: ($($T::from_request(req, payload),)+),","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    #[pin_project::pin_project]","highlight_start":1,"highlight_end":32},{"text":"    pub struct $fut_type<$($T: FromRequest),+> {","highlight_start":1,"highlight_end":49},{"text":"        items: ($(Option<$T>,)+),","highlight_start":1,"highlight_end":34},{"text":"        futs: ($($T::Future,)+),","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    impl<$($T: FromRequest),+> Future for $fut_type<$($T),+>","highlight_start":1,"highlight_end":61},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Output = Result<($($T,)+), Error>;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":84},{"text":"            let this = self.project();","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut ready = true;","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                if this.items.$n.is_none() {","highlight_start":1,"highlight_end":45},{"text":"                    match unsafe { Pin::new_unchecked(&mut this.futs.$n) }.poll(cx) {","highlight_start":1,"highlight_end":86},{"text":"                        Poll::Ready(Ok(item)) => {","highlight_start":1,"highlight_end":51},{"text":"                            this.items.$n = Some(item);","highlight_start":1,"highlight_end":56},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Poll::Pending => ready = false,","highlight_start":1,"highlight_end":56},{"text":"                        Poll::Ready(Err(e)) => return Poll::Ready(Err(e.into())),","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            )+","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if ready {","highlight_start":1,"highlight_end":27},{"text":"                    Poll::Ready(Ok(","highlight_start":1,"highlight_end":36},{"text":"                        ($(this.items.$n.take().unwrap(),)+)","highlight_start":1,"highlight_end":61},{"text":"                    ))","highlight_start":1,"highlight_end":23},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"});","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: using an old version of `actix-web`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/actix-web-2.0.0/src/extract.rs:217:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        futs: ($($T::Future,)+),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mtuple_from_req!(TupleFromRequest10, (0, A), (1, B), (2, C), (3, D), (4, E), (5, F), (6, G), (7, H), (8, I), (9, J));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}}]}
