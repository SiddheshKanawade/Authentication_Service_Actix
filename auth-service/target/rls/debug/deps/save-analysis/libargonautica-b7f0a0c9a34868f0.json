{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0","program":"/Users/macbookair/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","argonautica","/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"simd\"","-C","metadata=b7f0a0c9a34868f0","-C","extra-filename=-b7f0a0c9a34868f0","--out-dir","/Users/macbookair/Desktop/Siddhesh/Authentication Service using Actix/Authentication_Service_Actix/auth-service/target/rls/debug/deps","-L","dependency=/Users/macbookair/Desktop/Siddhesh/Authentication Service using Actix/Authentication_Service_Actix/auth-service/target/rls/debug/deps","--extern","base64=/Users/macbookair/Desktop/Siddhesh/Authentication Service using Actix/Authentication_Service_Actix/auth-service/target/rls/debug/deps/libbase64-0de151439dbb1070.rmeta","--extern","bitflags=/Users/macbookair/Desktop/Siddhesh/Authentication Service using Actix/Authentication_Service_Actix/auth-service/target/rls/debug/deps/libbitflags-0d92ac6ffc2d8ebf.rmeta","--extern","failure=/Users/macbookair/Desktop/Siddhesh/Authentication Service using Actix/Authentication_Service_Actix/auth-service/target/rls/debug/deps/libfailure-9edb1898c4ef78e7.rmeta","--extern","futures=/Users/macbookair/Desktop/Siddhesh/Authentication Service using Actix/Authentication_Service_Actix/auth-service/target/rls/debug/deps/libfutures-c6b00bba2326a555.rmeta","--extern","futures_cpupool=/Users/macbookair/Desktop/Siddhesh/Authentication Service using Actix/Authentication_Service_Actix/auth-service/target/rls/debug/deps/libfutures_cpupool-752f0147b8ed83e5.rmeta","--extern","libc=/Users/macbookair/Desktop/Siddhesh/Authentication Service using Actix/Authentication_Service_Actix/auth-service/target/rls/debug/deps/liblibc-976d040e822bb375.rmeta","--extern","log=/Users/macbookair/Desktop/Siddhesh/Authentication Service using Actix/Authentication_Service_Actix/auth-service/target/rls/debug/deps/liblog-3aff43ca2ff2f02a.rmeta","--extern","nom=/Users/macbookair/Desktop/Siddhesh/Authentication Service using Actix/Authentication_Service_Actix/auth-service/target/rls/debug/deps/libnom-8c13f4947c77c5ac.rmeta","--extern","num_cpus=/Users/macbookair/Desktop/Siddhesh/Authentication Service using Actix/Authentication_Service_Actix/auth-service/target/rls/debug/deps/libnum_cpus-863df464da83ec41.rmeta","--extern","rand=/Users/macbookair/Desktop/Siddhesh/Authentication Service using Actix/Authentication_Service_Actix/auth-service/target/rls/debug/deps/librand-dfae5f7a52bad105.rmeta","--extern","scopeguard=/Users/macbookair/Desktop/Siddhesh/Authentication Service using Actix/Authentication_Service_Actix/auth-service/target/rls/debug/deps/libscopeguard-258ee2f134945f08.rmeta","--cap-lints","allow","-L","native=/Users/macbookair/Desktop/Siddhesh/Authentication Service using Actix/Authentication_Service_Actix/auth-service/target/rls/debug/build/argonautica-3e9370fe5c17dead/out","-l","static=argon2","--error-format=json","--sysroot","/Users/macbookair/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/macbookair/Desktop/Siddhesh/Authentication Service using Actix/Authentication_Service_Actix/auth-service/target/rls/debug/deps/libargonautica-b7f0a0c9a34868f0.rmeta"},"prelude":{"crate_id":{"name":"argonautica","disambiguator":[8555459352078168699,0]},"crate_root":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src","external_crates":[{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[8160662364186215271,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[15508592535294299014,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17322933587189210298,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13179528220501159687,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14405461281750379523,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13415789777365414266,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14087240094303311622,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8480099122681864520,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7455356171819553965,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4032517352972638871,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[100442770310914164,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[10836884096018266442,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[8583823352757433821,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16157489773683242703,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[6201654522556613481,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[15759299131545182078,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[10203585439616027660,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":18,"id":{"name":"base64","disambiguator":[17548917513843336178,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":19,"id":{"name":"byteorder","disambiguator":[15971208981239451829,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":20,"id":{"name":"bitflags","disambiguator":[6543942889061780607,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":21,"id":{"name":"failure","disambiguator":[89382385086362504,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":22,"id":{"name":"failure_derive","disambiguator":[13729648877364280594,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":23,"id":{"name":"backtrace","disambiguator":[466218825814973987,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":24,"id":{"name":"rustc_demangle","disambiguator":[4611476343438807709,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":25,"id":{"name":"cfg_if","disambiguator":[10187493175436223894,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":26,"id":{"name":"addr2line","disambiguator":[16000933590507795301,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":27,"id":{"name":"gimli","disambiguator":[8703297781223131706,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":28,"id":{"name":"libc","disambiguator":[11107734918280921834,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":29,"id":{"name":"object","disambiguator":[8471985150800314099,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":30,"id":{"name":"memchr","disambiguator":[10247667760941155008,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":31,"id":{"name":"futures","disambiguator":[16982669053936693662,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":32,"id":{"name":"futures_cpupool","disambiguator":[7470965774659698283,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":33,"id":{"name":"num_cpus","disambiguator":[385447463597617321,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":34,"id":{"name":"log","disambiguator":[16445338430319068573,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":35,"id":{"name":"nom","disambiguator":[16638175350612196546,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":36,"id":{"name":"rand","disambiguator":[4861576263760502040,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":37,"id":{"name":"rand_jitter","disambiguator":[15014917439068187609,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":38,"id":{"name":"rand_core","disambiguator":[8636953074289402764,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":39,"id":{"name":"rand_os","disambiguator":[2782398287579139165,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":40,"id":{"name":"rand_isaac","disambiguator":[3939544591663106176,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":41,"id":{"name":"rand_core","disambiguator":[9686079777825169689,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":42,"id":{"name":"rand_chacha","disambiguator":[9534628788726323184,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":43,"id":{"name":"rand_hc","disambiguator":[3078333296403731562,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":44,"id":{"name":"rand_pcg","disambiguator":[11344863596950560811,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":45,"id":{"name":"rand_xorshift","disambiguator":[17307545597067424079,0]}},{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","num":46,"id":{"name":"scopeguard","disambiguator":[15316854796288969400,0]}}],"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":0,"byte_end":18444,"line_start":1,"line_end":328,"column_start":1,"column_end":28}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1375},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/mod.rs","byte_start":89232,"byte_end":89239,"line_start":11,"line_end":11,"column_start":24,"column_end":31},"alias_span":null,"name":"Backend","value":"","parent":{"krate":0,"index":292}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/mod.rs","byte_start":89265,"byte_end":89266,"line_start":12,"line_end":12,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"default_cpu_pool","parent":{"krate":0,"index":292}},{"kind":"Use","ref_id":{"krate":0,"index":1494},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/mod.rs","byte_start":89332,"byte_end":89344,"line_start":14,"line_end":14,"column_start":30,"column_end":42},"alias_span":null,"name":"HasherConfig","value":"","parent":{"krate":0,"index":292}},{"kind":"Use","ref_id":{"krate":0,"index":1511},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/mod.rs","byte_start":89369,"byte_end":89376,"line_start":15,"line_end":15,"column_start":24,"column_end":31},"alias_span":null,"name":"Variant","value":"","parent":{"krate":0,"index":292}},{"kind":"Use","ref_id":{"krate":0,"index":1539},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/mod.rs","byte_start":89409,"byte_end":89423,"line_start":16,"line_end":16,"column_start":32,"column_end":46},"alias_span":null,"name":"VerifierConfig","value":"","parent":{"krate":0,"index":292}},{"kind":"Use","ref_id":{"krate":0,"index":1549},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/mod.rs","byte_start":89448,"byte_end":89455,"line_start":17,"line_end":17,"column_start":24,"column_end":31},"alias_span":null,"name":"Version","value":"","parent":{"krate":0,"index":292}},{"kind":"Use","ref_id":{"krate":0,"index":1146},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":18309,"byte_end":18314,"line_start":322,"line_end":322,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1170},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":18336,"byte_end":18345,"line_start":323,"line_end":323,"column_start":21,"column_end":30},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1345},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":18363,"byte_end":18369,"line_start":324,"line_end":324,"column_start":17,"column_end":23},"alias_span":null,"name":"Hasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1574},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":113179,"byte_end":113193,"line_start":23,"line_end":23,"column_start":32,"column_end":46},"alias_span":null,"name":"AdditionalData","value":"","parent":{"krate":0,"index":492}},{"kind":"Use","ref_id":{"krate":0,"index":1624},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":113262,"byte_end":113270,"line_start":25,"line_end":25,"column_start":25,"column_end":33},"alias_span":null,"name":"Password","value":"","parent":{"krate":0,"index":492}},{"kind":"Use","ref_id":{"krate":0,"index":1642},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":113292,"byte_end":113296,"line_start":26,"line_end":26,"column_start":21,"column_end":25},"alias_span":null,"name":"Salt","value":"","parent":{"krate":0,"index":492}},{"kind":"Use","ref_id":{"krate":0,"index":1688},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":113324,"byte_end":113333,"line_start":27,"line_end":27,"column_start":27,"column_end":36},"alias_span":null,"name":"SecretKey","value":"","parent":{"krate":0,"index":492}},{"kind":"Use","ref_id":{"krate":0,"index":1706},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/mod.rs","byte_start":135584,"byte_end":135591,"line_start":4,"line_end":4,"column_start":25,"column_end":32},"alias_span":null,"name":"HashRaw","value":"","parent":{"krate":0,"index":731}},{"kind":"Use","ref_id":{"krate":0,"index":1368},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":18435,"byte_end":18443,"line_start":328,"line_end":328,"column_start":19,"column_end":27},"alias_span":null,"name":"Verifier","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":0,"byte_end":18444,"line_start":1,"line_end":328,"column_start":1,"column_end":28},"name":"","qualname":"::","value":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":87},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":215},{"krate":0,"index":292},{"krate":0,"index":483},{"krate":0,"index":486},{"krate":0,"index":489},{"krate":0,"index":492},{"krate":0,"index":731},{"krate":0,"index":764},{"krate":0,"index":787}],"decl_id":null,"docs":" [![Build Status](https://travis-ci.org/bcmyers/argonautica.svg?branch=master)](https://travis-ci.org/bcmyers/argonautica)\n [![Crates.io](https://img.shields.io/crates/v/argonautica.svg)](https://crates.io/crates/argonautica)\n [![Documentation](https://docs.rs/argonautica/badge.svg)](https://docs.rs/argonautica/)\n [![Github.com](https://img.shields.io/badge/github-bcmyers%2Fargonautica-blue.svg)](http://www.github.com/bcmyers/argonautica)\n ![License](https://img.shields.io/crates/l/argonautica.svg)","sig":null,"attributes":[{"value":"/ [![Build Status](https://travis-ci.org/bcmyers/argonautica.svg?branch=master)](https://travis-ci.org/bcmyers/argonautica)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":0,"byte_end":125,"line_start":1,"line_end":1,"column_start":1,"column_end":126}},{"value":"/ [![Crates.io](https://img.shields.io/crates/v/argonautica.svg)](https://crates.io/crates/argonautica)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":126,"byte_end":231,"line_start":2,"line_end":2,"column_start":1,"column_end":106}},{"value":"/ [![Documentation](https://docs.rs/argonautica/badge.svg)](https://docs.rs/argonautica/)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":232,"byte_end":323,"line_start":3,"line_end":3,"column_start":1,"column_end":92}},{"value":"/ [![Github.com](https://img.shields.io/badge/github-bcmyers%2Fargonautica-blue.svg)](http://www.github.com/bcmyers/argonautica)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":324,"byte_end":454,"line_start":4,"line_end":4,"column_start":1,"column_end":131}},{"value":"/ ![License](https://img.shields.io/crates/l/argonautica.svg)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":455,"byte_end":518,"line_start":5,"line_end":5,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":519,"byte_end":522,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # Overview","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":523,"byte_end":537,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":538,"byte_end":541,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ <b>argonautica</b> is a Rust crate for hashing passwords using the cryptographically-secure","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":542,"byte_end":637,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ [Argon2 hashing algorithm](https://en.wikipedia.org/wiki/Argon2).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":638,"byte_end":707,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":708,"byte_end":711,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [Argon2](https://en.wikipedia.org/wiki/Argon2) won the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":712,"byte_end":770,"line_start":12,"line_end":12,"column_start":1,"column_end":59}},{"value":"/ [Password Hashing Competition](https://password-hashing.net/) in 2015, a several","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":771,"byte_end":855,"line_start":13,"line_end":13,"column_start":1,"column_end":85}},{"value":"/ year project to identify a successor to [bcrypt](https://en.wikipedia.org/wiki/Bcrypt),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":856,"byte_end":947,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ [scrypt](https://en.wikipedia.org/wiki/Scrypt), and other common cryptographically-secure","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":948,"byte_end":1041,"line_start":15,"line_end":15,"column_start":1,"column_end":94}},{"value":"/ hashing algorithms.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1042,"byte_end":1065,"line_start":16,"line_end":16,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1066,"byte_end":1069,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The <b>argonautica</b> crate was designed:","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1070,"byte_end":1116,"line_start":18,"line_end":18,"column_start":1,"column_end":47}},{"value":"/ * to be easy to use,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1117,"byte_end":1141,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"/ * to have robust, beginner-friendly documentation, and","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1142,"byte_end":1200,"line_start":20,"line_end":20,"column_start":1,"column_end":59}},{"value":"/ * to (as much as possible) follow the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1201,"byte_end":1242,"line_start":21,"line_end":21,"column_start":1,"column_end":42}},{"value":"/   [Rust API guidelines](https://rust-lang-nursery.github.io/api-guidelines/)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1243,"byte_end":1323,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1324,"byte_end":1327,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ <b>argonautica</b> was built with a simple use-case in mind: hashing passwords for storage in a","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1328,"byte_end":1427,"line_start":24,"line_end":24,"column_start":1,"column_end":100}},{"value":"/ website's database. That said, it's also \"feature-complete\", meaning anything you can do with","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1428,"byte_end":1525,"line_start":25,"line_end":25,"column_start":1,"column_end":98}},{"value":"/ the cannonical [C implementation](https://github.com/P-H-C/phc-winner-argon2) of Argon2","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1526,"byte_end":1617,"line_start":26,"line_end":26,"column_start":1,"column_end":92}},{"value":"/ you can do with argonautica*.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1618,"byte_end":1651,"line_start":27,"line_end":27,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1652,"byte_end":1655,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ <i>\\* Indeed, argonautica has a feature that even the cannonical C implementation","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1656,"byte_end":1741,"line_start":29,"line_end":29,"column_start":1,"column_end":86}},{"value":"/ lacks, i.e. hashing passwords with secret keys (the C implementation implements this, but","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1742,"byte_end":1835,"line_start":30,"line_end":30,"column_start":1,"column_end":94}},{"value":"/ does not expose it publicly)</i>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1836,"byte_end":1872,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1873,"byte_end":1876,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Hashing","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1877,"byte_end":1890,"line_start":33,"line_end":33,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1891,"byte_end":1894,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Hashing passwords with <b>argonautica</b> is simple.  Just instantiate a default","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1895,"byte_end":1979,"line_start":35,"line_end":35,"column_start":1,"column_end":85}},{"value":"/ [`Hasher`](struct.Hasher.html), provide it with a password and a secret key, and then","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":1980,"byte_end":2069,"line_start":36,"line_end":36,"column_start":1,"column_end":90}},{"value":"/ call the [`hash`](struct.Hasher.html#method.hash) method.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2070,"byte_end":2131,"line_start":37,"line_end":37,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2132,"byte_end":2139,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ extern crate argonautica;","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2140,"byte_end":2169,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2170,"byte_end":2173,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ use argonautica::Hasher;","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2174,"byte_end":2202,"line_start":41,"line_end":41,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2203,"byte_end":2206,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2207,"byte_end":2222,"line_start":43,"line_end":43,"column_start":1,"column_end":16}},{"value":"/     let mut hasher = Hasher::default();","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2223,"byte_end":2266,"line_start":44,"line_end":44,"column_start":1,"column_end":44}},{"value":"/     let hash = hasher","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2267,"byte_end":2292,"line_start":45,"line_end":45,"column_start":1,"column_end":26}},{"value":"/         .with_password(\"P@ssw0rd\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2293,"byte_end":2331,"line_start":46,"line_end":46,"column_start":1,"column_end":39}},{"value":"/         .with_secret_key(\"\\","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2332,"byte_end":2363,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/             secret key that you should really store in a .env file \\","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2364,"byte_end":2436,"line_start":48,"line_end":48,"column_start":1,"column_end":73}},{"value":"/             instead of in code, but this is just an example\\","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2437,"byte_end":2501,"line_start":49,"line_end":49,"column_start":1,"column_end":65}},{"value":"/         \")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2502,"byte_end":2516,"line_start":50,"line_end":50,"column_start":1,"column_end":15}},{"value":"/         .hash()","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2517,"byte_end":2536,"line_start":51,"line_end":51,"column_start":1,"column_end":20}},{"value":"/         .unwrap();","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2537,"byte_end":2559,"line_start":52,"line_end":52,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2560,"byte_end":2563,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/     println!(\"{}\", &hash);","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2564,"byte_end":2594,"line_start":54,"line_end":54,"column_start":1,"column_end":31}},{"value":"/     // 👆 prints a hash, which will be random since the default Hasher uses a random salt","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2595,"byte_end":2690,"line_start":55,"line_end":55,"column_start":1,"column_end":93}},{"value":"/ }","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2691,"byte_end":2696,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2697,"byte_end":2704,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ # Verifying","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2705,"byte_end":2720,"line_start":58,"line_end":58,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2721,"byte_end":2724,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ Verifying passwords against a hash is equally as simple. Just instantiate a default","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2725,"byte_end":2812,"line_start":60,"line_end":60,"column_start":1,"column_end":88}},{"value":"/ [`Verifier`](struct.Verifier.html), provide it with the password and the hash you would","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2813,"byte_end":2904,"line_start":61,"line_end":61,"column_start":1,"column_end":92}},{"value":"/ like to compare, provide it with the secret key that was used to create the hash, and","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2905,"byte_end":2994,"line_start":62,"line_end":62,"column_start":1,"column_end":90}},{"value":"/ then call the [`verify`](struct.Verifier.html#method.verify) method.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":2995,"byte_end":3067,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3068,"byte_end":3075,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/ extern crate argonautica;","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3076,"byte_end":3105,"line_start":65,"line_end":65,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3106,"byte_end":3109,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ use argonautica::Verifier;","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3110,"byte_end":3140,"line_start":67,"line_end":67,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3141,"byte_end":3144,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3145,"byte_end":3160,"line_start":69,"line_end":69,"column_start":1,"column_end":16}},{"value":"/     let mut verifier = Verifier::default();","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3161,"byte_end":3208,"line_start":70,"line_end":70,"column_start":1,"column_end":48}},{"value":"/     let is_valid = verifier","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3209,"byte_end":3240,"line_start":71,"line_end":71,"column_start":1,"column_end":32}},{"value":"/         .with_hash(\"","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3241,"byte_end":3265,"line_start":72,"line_end":72,"column_start":1,"column_end":25}},{"value":"/             $argon2id$v=19$m=4096,t=192,p=4$\\","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3266,"byte_end":3315,"line_start":73,"line_end":73,"column_start":1,"column_end":50}},{"value":"/             o2y5PU86Vt+sr93N7YUGgC7AMpTKpTQCk4tNGUPZMY4$\\","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3316,"byte_end":3377,"line_start":74,"line_end":74,"column_start":1,"column_end":62}},{"value":"/             yzP/ukZRPIbZg6PvgnUUobUMbApfF9RH6NagL9L4Xr4\\","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3378,"byte_end":3438,"line_start":75,"line_end":75,"column_start":1,"column_end":61}},{"value":"/         \")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3439,"byte_end":3453,"line_start":76,"line_end":76,"column_start":1,"column_end":15}},{"value":"/         .with_password(\"P@ssw0rd\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3454,"byte_end":3492,"line_start":77,"line_end":77,"column_start":1,"column_end":39}},{"value":"/         .with_secret_key(\"\\","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3493,"byte_end":3524,"line_start":78,"line_end":78,"column_start":1,"column_end":32}},{"value":"/             secret key that you should really store in a .env file \\","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3525,"byte_end":3597,"line_start":79,"line_end":79,"column_start":1,"column_end":73}},{"value":"/             instead of in code, but this is just an example\\","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3598,"byte_end":3662,"line_start":80,"line_end":80,"column_start":1,"column_end":65}},{"value":"/         \")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3663,"byte_end":3677,"line_start":81,"line_end":81,"column_start":1,"column_end":15}},{"value":"/         .verify()","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3678,"byte_end":3699,"line_start":82,"line_end":82,"column_start":1,"column_end":22}},{"value":"/         .unwrap();","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3700,"byte_end":3722,"line_start":83,"line_end":83,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3723,"byte_end":3726,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/     assert!(is_valid);","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3727,"byte_end":3753,"line_start":85,"line_end":85,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3754,"byte_end":3759,"line_start":86,"line_end":86,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3760,"byte_end":3767,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ # Alternatives","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3768,"byte_end":3786,"line_start":88,"line_end":88,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3787,"byte_end":3790,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ If <b>argonautica</b> isn't your cup of tea, other Rust crates that will do Argon2 hashing for you","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3791,"byte_end":3893,"line_start":90,"line_end":90,"column_start":1,"column_end":103}},{"value":"/ include [argon2rs](https://github.com/bryant/argon2rs) and","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3894,"byte_end":3956,"line_start":91,"line_end":91,"column_start":1,"column_end":63}},{"value":"/ [rust-argon2](https://github.com/sru-systems/rust-argon2). If you're interesting","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":3957,"byte_end":4041,"line_start":92,"line_end":92,"column_start":1,"column_end":85}},{"value":"/ in password hashing with a different algorithm,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":4042,"byte_end":4093,"line_start":93,"line_end":93,"column_start":1,"column_end":52}},{"value":"/ [rust-bcrypt](https://github.com/Keats/rust-bcrypt) might be worth checking out.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":4094,"byte_end":4178,"line_start":94,"line_end":94,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":4179,"byte_end":4182,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ For what it's worth, besides API differences, <b>argonautica</b> has three key features that","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":4183,"byte_end":4279,"line_start":96,"line_end":96,"column_start":1,"column_end":97}},{"value":"/ other crates currently lack:","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":4280,"byte_end":4312,"line_start":97,"line_end":97,"column_start":1,"column_end":33}},{"value":"/ * The ability to use [SIMD](https://en.wikipedia.org/wiki/SIMD) instructions (even on stable),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":4313,"byte_end":4411,"line_start":98,"line_end":98,"column_start":1,"column_end":99}},{"value":"/   which can lead to significantly faster hashing times","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":4412,"byte_end":4470,"line_start":99,"line_end":99,"column_start":1,"column_end":59}},{"value":"/     * For example, on default settings, argonautica with SIMD runs <b>over twice","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":4471,"byte_end":4555,"line_start":100,"line_end":100,"column_start":1,"column_end":85}},{"value":"/       as fast</b> as other crates on the developer's early-2014 Macbook, which has access to","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":4556,"byte_end":4652,"line_start":101,"line_end":101,"column_start":1,"column_end":97}},{"value":"/       [SIMD instructions](https://software.intel.com/sites/landingpage/IntrinsicsGuide/)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":4653,"byte_end":4745,"line_start":102,"line_end":102,"column_start":1,"column_end":93}},{"value":"/       through","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":4746,"byte_end":4763,"line_start":103,"line_end":103,"column_start":1,"column_end":18}},{"value":"/       [AVX2](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#Advanced_Vector_Extensions)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":4764,"byte_end":4865,"line_start":104,"line_end":104,"column_start":1,"column_end":102}},{"value":"/     * <i>Note: SIMD instructions are specific to your CPU; so if you're compiling for","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":4866,"byte_end":4955,"line_start":105,"line_end":105,"column_start":1,"column_end":90}},{"value":"/       machines other than your own, you should not turn on the SIMD feature</i>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":4956,"byte_end":5039,"line_start":106,"line_end":106,"column_start":1,"column_end":84}},{"value":"/ * The ability to hash passwords with a secret key, which not even the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5040,"byte_end":5113,"line_start":107,"line_end":107,"column_start":1,"column_end":74}},{"value":"/   [C implementation](https://github.com/P-H-C/phc-winner-argon2) exposes publicly","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5114,"byte_end":5199,"line_start":108,"line_end":108,"column_start":1,"column_end":86}},{"value":"/ * The newest Argon2 variant: Argon2id","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5200,"byte_end":5241,"line_start":109,"line_end":109,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5242,"byte_end":5245,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ # Configuration","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5246,"byte_end":5265,"line_start":111,"line_end":111,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5266,"byte_end":5269,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ The default configurations for [`Hasher`](struct.Hasher.html) and","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5270,"byte_end":5339,"line_start":113,"line_end":113,"column_start":1,"column_end":70}},{"value":"/ [`Verifier`](struct.Verifier.html) were chosen to be reasonably secure for the general","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5340,"byte_end":5430,"line_start":114,"line_end":114,"column_start":1,"column_end":91}},{"value":"/ use-case of hashing passwords for storage in a website database, but if you want to use","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5431,"byte_end":5522,"line_start":115,"line_end":115,"column_start":1,"column_end":92}},{"value":"/ <b>argonautica</b> for different reasons or if you just disagree with the chosen defaults,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5523,"byte_end":5617,"line_start":116,"line_end":116,"column_start":1,"column_end":95}},{"value":"/ customizing <b>argonautica</b> to meet your needs should hopefully be as easy and as intuitive","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5618,"byte_end":5716,"line_start":117,"line_end":117,"column_start":1,"column_end":99}},{"value":"/ as using the defaults.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5717,"byte_end":5743,"line_start":118,"line_end":118,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5744,"byte_end":5747,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ Here is an example that shows how to use [`Hasher`](struct.Hasher.html)'s custom","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5748,"byte_end":5832,"line_start":120,"line_end":120,"column_start":1,"column_end":85}},{"value":"/ configuration options. It provides color on each of the options.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5833,"byte_end":5901,"line_start":121,"line_end":121,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5902,"byte_end":5909,"line_start":122,"line_end":122,"column_start":1,"column_end":8}},{"value":"/ extern crate argonautica;","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5910,"byte_end":5939,"line_start":123,"line_end":123,"column_start":1,"column_end":30}},{"value":"/ extern crate futures_cpupool;","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5940,"byte_end":5973,"line_start":124,"line_end":124,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5974,"byte_end":5977,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ use argonautica::Hasher;","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":5978,"byte_end":6006,"line_start":126,"line_end":126,"column_start":1,"column_end":29}},{"value":"/ use argonautica::config::{Backend, Variant, Version};","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6007,"byte_end":6064,"line_start":127,"line_end":127,"column_start":1,"column_end":58}},{"value":"/ use futures_cpupool::CpuPool;","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6065,"byte_end":6098,"line_start":128,"line_end":128,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6099,"byte_end":6102,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6103,"byte_end":6118,"line_start":130,"line_end":130,"column_start":1,"column_end":16}},{"value":"/     let mut hasher = Hasher::default();","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6119,"byte_end":6162,"line_start":131,"line_end":131,"column_start":1,"column_end":44}},{"value":"/     hasher","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6163,"byte_end":6177,"line_start":132,"line_end":132,"column_start":1,"column_end":15}},{"value":"/         .configure_backend(Backend::C) // Default is `Backend::C`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6178,"byte_end":6247,"line_start":133,"line_end":133,"column_start":1,"column_end":70}},{"value":"/         // 👆 argonautica was designed to support multiple backends (meaning multiple","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6248,"byte_end":6339,"line_start":134,"line_end":134,"column_start":1,"column_end":89}},{"value":"/         // implementations of the underlying Argon2 algorithm). Currently only the C backend","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6340,"byte_end":6436,"line_start":135,"line_end":135,"column_start":1,"column_end":97}},{"value":"/         // is supported, which uses the cannonical Argon2 library written in C to actually","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6437,"byte_end":6531,"line_start":136,"line_end":136,"column_start":1,"column_end":95}},{"value":"/         // do the work. In the future hopefully a Rust backend will also be supported, but,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6532,"byte_end":6627,"line_start":137,"line_end":137,"column_start":1,"column_end":96}},{"value":"/         // for the moment, you must use `Backend::C`, which is the default. Using","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6628,"byte_end":6713,"line_start":138,"line_end":138,"column_start":1,"column_end":86}},{"value":"/         // `Backend::Rust` will result in an error (again, for the moment).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6714,"byte_end":6793,"line_start":139,"line_end":139,"column_start":1,"column_end":80}},{"value":"/         .configure_cpu_pool(CpuPool::new(2))","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6794,"byte_end":6842,"line_start":140,"line_end":140,"column_start":1,"column_end":49}},{"value":"/         // 👆 There are two non-blocking methods on `Hasher` that perform computation on","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6843,"byte_end":6937,"line_start":141,"line_end":141,"column_start":1,"column_end":92}},{"value":"/         // a separate thread and return a `Future` instead of a `Result` (`hash_non_blocking`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":6938,"byte_end":7035,"line_start":142,"line_end":142,"column_start":1,"column_end":98}},{"value":"/         // and `hash_raw_non_blocking`). These methods allow argonautica to play nicely with","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":7036,"byte_end":7132,"line_start":143,"line_end":143,"column_start":1,"column_end":97}},{"value":"/         // futures-heavy code, but need a `CpuPool` in order to work. The blocking","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":7133,"byte_end":7219,"line_start":144,"line_end":144,"column_start":1,"column_end":87}},{"value":"/         // methods `hash` and `hash_raw` do not use a 'CpuPool'; so if you are using only","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":7220,"byte_end":7313,"line_start":145,"line_end":145,"column_start":1,"column_end":94}},{"value":"/         // these blocking methods you can ignore this configuration entirely. If, however,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":7314,"byte_end":7408,"line_start":146,"line_end":146,"column_start":1,"column_end":95}},{"value":"/         // you are using the non-blocking methods and would like to provide your own `CpuPool`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":7409,"byte_end":7507,"line_start":147,"line_end":147,"column_start":1,"column_end":99}},{"value":"/         // instead of using the default, which is a lazily created `CpuPool` with the number","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":7508,"byte_end":7604,"line_start":148,"line_end":148,"column_start":1,"column_end":97}},{"value":"/         // of threads equal to the number of logical cores on your machine, you can","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":7605,"byte_end":7692,"line_start":149,"line_end":149,"column_start":1,"column_end":88}},{"value":"/         // configure your `Hasher` with a custom `CpuPool` using this method. This","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":7693,"byte_end":7779,"line_start":150,"line_end":150,"column_start":1,"column_end":87}},{"value":"/         // might be useful if, for example, you are writing code in an environment which","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":7780,"byte_end":7872,"line_start":151,"line_end":151,"column_start":1,"column_end":93}},{"value":"/         // makes heavy use of futures, the code you are writing uses both a `Hasher` and","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":7873,"byte_end":7965,"line_start":152,"line_end":152,"column_start":1,"column_end":93}},{"value":"/         // a `Verifier`, and you would like both of them to share the same underlying","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":7966,"byte_end":8055,"line_start":153,"line_end":153,"column_start":1,"column_end":90}},{"value":"/         // `CpuPool`.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":8056,"byte_end":8081,"line_start":154,"line_end":154,"column_start":1,"column_end":26}},{"value":"/         .configure_hash_len(16) // Default is `32`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":8082,"byte_end":8136,"line_start":155,"line_end":155,"column_start":1,"column_end":55}},{"value":"/         // 👆 The hash length in bytes is configurable. The default is 32. This is probably","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":8137,"byte_end":8234,"line_start":156,"line_end":156,"column_start":1,"column_end":95}},{"value":"/         // a good number to use. 16 is also probably fine. You probably shouldn't go below 16","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":8235,"byte_end":8332,"line_start":157,"line_end":157,"column_start":1,"column_end":98}},{"value":"/         .configure_iterations(192) // Default is `192`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":8333,"byte_end":8391,"line_start":158,"line_end":158,"column_start":1,"column_end":59}},{"value":"/         // 👆 Argon2 has a notion of \"iterations\" or \"time cost\". All else equal and generally","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":8392,"byte_end":8492,"line_start":159,"line_end":159,"column_start":1,"column_end":98}},{"value":"/         // speaking, the greater the number of iterations, the longer it takes to perform the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":8493,"byte_end":8590,"line_start":160,"line_end":160,"column_start":1,"column_end":98}},{"value":"/         // hash and the more secure the resulting hash. More iterations basically means more","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":8591,"byte_end":8687,"line_start":161,"line_end":161,"column_start":1,"column_end":97}},{"value":"/         // CPU load. This and \"memory size\" (see below) are the two primary parameters to","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":8688,"byte_end":8781,"line_start":162,"line_end":162,"column_start":1,"column_end":94}},{"value":"/         // adjust in order to increase or decrease the security of your hash. The default is","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":8782,"byte_end":8878,"line_start":163,"line_end":163,"column_start":1,"column_end":97}},{"value":"/         // 192 iterations, which was chosen because, along with the default memory size of","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":8879,"byte_end":8973,"line_start":164,"line_end":164,"column_start":1,"column_end":95}},{"value":"/         // 4096, this leads to a hashing time of approximately 300 milliseconds on the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":8974,"byte_end":9064,"line_start":165,"line_end":165,"column_start":1,"column_end":91}},{"value":"/         // early-2014 Macbook Air that is the developer's machine. If you're going to use","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":9065,"byte_end":9158,"line_start":166,"line_end":166,"column_start":1,"column_end":94}},{"value":"/         // argonautica in production, you should probably tweak this parameter (and the memory","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":9159,"byte_end":9257,"line_start":167,"line_end":167,"column_start":1,"column_end":99}},{"value":"/         // size parameter) in order to increase the time it takes to hash to the maximum you","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":9258,"byte_end":9354,"line_start":168,"line_end":168,"column_start":1,"column_end":97}},{"value":"/         // can reasonably allow for your use-case (e.g. to probably about 300-500 milliseconds","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":9355,"byte_end":9453,"line_start":169,"line_end":169,"column_start":1,"column_end":99}},{"value":"/         // for the use-case of hashing user passwords for a website)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":9454,"byte_end":9526,"line_start":170,"line_end":170,"column_start":1,"column_end":73}},{"value":"/         .configure_lanes(2) // Default is number of logical cores on your machine","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":9527,"byte_end":9612,"line_start":171,"line_end":171,"column_start":1,"column_end":86}},{"value":"/         // 👆 Argon2 can break up its work into one or more \"lanes\" during some parts of","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":9613,"byte_end":9707,"line_start":172,"line_end":172,"column_start":1,"column_end":92}},{"value":"/         // the hashing algorithm. If you configure it with multiple lanes and you also","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":9708,"byte_end":9798,"line_start":173,"line_end":173,"column_start":1,"column_end":91}},{"value":"/         // use multiple threads (see below) the hashing algorithm will performed its","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":9799,"byte_end":9887,"line_start":174,"line_end":174,"column_start":1,"column_end":89}},{"value":"/         // work in parallel in some parts, potentially speeding up the time it takes to","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":9888,"byte_end":9979,"line_start":175,"line_end":175,"column_start":1,"column_end":92}},{"value":"/         // produce a hash without diminishing the security of the result. By default,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":9980,"byte_end":10069,"line_start":176,"line_end":176,"column_start":1,"column_end":90}},{"value":"/         // the number of lanes is set to the number of logical cores on your machine","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":10070,"byte_end":10158,"line_start":177,"line_end":177,"column_start":1,"column_end":89}},{"value":"/         .configure_memory_size(4096) // Default is `4096`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":10159,"byte_end":10220,"line_start":178,"line_end":178,"column_start":1,"column_end":62}},{"value":"/         // 👆 Argon2 has a notion of \"memory size\" or \"memory cost\" (in kibibytes). All else","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":10221,"byte_end":10319,"line_start":179,"line_end":179,"column_start":1,"column_end":96}},{"value":"/         // equal and generally speaking, the greater the memory size, the longer it takes to","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":10320,"byte_end":10416,"line_start":180,"line_end":180,"column_start":1,"column_end":97}},{"value":"/         // perform the hash and the more secure the resulting hash. More memory size basically","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":10417,"byte_end":10515,"line_start":181,"line_end":181,"column_start":1,"column_end":99}},{"value":"/         // means more memory used. This and \"iterations\" (see above) are, again, generally","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":10516,"byte_end":10610,"line_start":182,"line_end":182,"column_start":1,"column_end":95}},{"value":"/         // speaking, the two parameters to adjust in order to increase or decrease the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":10611,"byte_end":10701,"line_start":183,"line_end":183,"column_start":1,"column_end":91}},{"value":"/         // security of your hash. The default is 4096 kibibytes, which was chosen because,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":10702,"byte_end":10796,"line_start":184,"line_end":184,"column_start":1,"column_end":95}},{"value":"/         // again, along with the default iterations of 192, this leads to a hashing time of","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":10797,"byte_end":10892,"line_start":185,"line_end":185,"column_start":1,"column_end":96}},{"value":"/         // approximately 300 milliseconds on the early-2014 Macbook Air that is the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":10893,"byte_end":10980,"line_start":186,"line_end":186,"column_start":1,"column_end":88}},{"value":"/         // developer's machine. If you're going to use argonautica in production, you should","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":10981,"byte_end":11077,"line_start":187,"line_end":187,"column_start":1,"column_end":97}},{"value":"/         // probably tweak this parameter (and the iterations parameter) in order to increase","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":11078,"byte_end":11174,"line_start":188,"line_end":188,"column_start":1,"column_end":97}},{"value":"/         // the time it takes to hash to the maximum you can reasonably allow for your use-case","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":11175,"byte_end":11273,"line_start":189,"line_end":189,"column_start":1,"column_end":99}},{"value":"/         // (e.g. to probably about 300-500 milliseconds for the use-case of hashing user","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":11274,"byte_end":11366,"line_start":190,"line_end":190,"column_start":1,"column_end":93}},{"value":"/         // passwords for a website)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":11367,"byte_end":11406,"line_start":191,"line_end":191,"column_start":1,"column_end":40}},{"value":"/         .configure_password_clearing(false) // Default is `false`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":11407,"byte_end":11476,"line_start":192,"line_end":192,"column_start":1,"column_end":70}},{"value":"/         // 👆 It is possible to have the underlying bytes of the password you provided","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":11477,"byte_end":11569,"line_start":193,"line_end":193,"column_start":1,"column_end":90}},{"value":"/         // to `Hasher` be erased after each call to `hash`, `hash_raw` or their non-blocking","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":11570,"byte_end":11666,"line_start":194,"line_end":194,"column_start":1,"column_end":97}},{"value":"/         // equivalents. If you want this extra security feature, set this configuration","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":11667,"byte_end":11758,"line_start":195,"line_end":195,"column_start":1,"column_end":92}},{"value":"/         // to `true` (the default is `false`). If you set this configuration to `true`,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":11759,"byte_end":11850,"line_start":196,"line_end":196,"column_start":1,"column_end":92}},{"value":"/         // you will be required to provide `Hasher` with a mutable password (e.g.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":11851,"byte_end":11936,"line_start":197,"line_end":197,"column_start":1,"column_end":86}},{"value":"/         // a `String`, a `Vec<u8>`, a `&mut str`, or a `&mut [u8]` instead of a","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":11937,"byte_end":12020,"line_start":198,"line_end":198,"column_start":1,"column_end":84}},{"value":"/         // `&str` or a `&[u8]`)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":12021,"byte_end":12056,"line_start":199,"line_end":199,"column_start":1,"column_end":36}},{"value":"/         .configure_secret_key_clearing(false) // Default is `false`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":12057,"byte_end":12128,"line_start":200,"line_end":200,"column_start":1,"column_end":72}},{"value":"/         // 👆 It is also possible to have the underlying bytes of the secret key you provided","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":12129,"byte_end":12228,"line_start":201,"line_end":201,"column_start":1,"column_end":97}},{"value":"/         // to `Hasher` be erased after each call to `hash`, `hash_raw` or their non-blocking","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":12229,"byte_end":12325,"line_start":202,"line_end":202,"column_start":1,"column_end":97}},{"value":"/         // equivalents. If you want this extra security feature, set this configuration","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":12326,"byte_end":12417,"line_start":203,"line_end":203,"column_start":1,"column_end":92}},{"value":"/         // to `true` (the default is `false`). If you set this configuration to `true`,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":12418,"byte_end":12509,"line_start":204,"line_end":204,"column_start":1,"column_end":92}},{"value":"/         // you will be required to provide `Hasher` with a mutable secret key (e.g.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":12510,"byte_end":12597,"line_start":205,"line_end":205,"column_start":1,"column_end":88}},{"value":"/         // a `String`, a `Vec<u8>`, a `&mut str`, or a `&mut [u8]` instead of a `&str`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":12598,"byte_end":12688,"line_start":206,"line_end":206,"column_start":1,"column_end":91}},{"value":"/         // or a `&[u8]`)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":12689,"byte_end":12717,"line_start":207,"line_end":207,"column_start":1,"column_end":29}},{"value":"/         .configure_threads(2) // Default is number of logical cores on your machine","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":12718,"byte_end":12805,"line_start":208,"line_end":208,"column_start":1,"column_end":88}},{"value":"/         // 👆 If you have configured `Hasher` to use more than one lane (see above), you","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":12806,"byte_end":12900,"line_start":209,"line_end":209,"column_start":1,"column_end":92}},{"value":"/         // can get the hashing algorithm to run in parallel during some parts of the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":12901,"byte_end":12989,"line_start":210,"line_end":210,"column_start":1,"column_end":89}},{"value":"/         // computation by setting the number of threads to be greater than one as well,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":12990,"byte_end":13081,"line_start":211,"line_end":211,"column_start":1,"column_end":92}},{"value":"/         // potentially speeding up the time it takes to produce a hash without diminishing","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":13082,"byte_end":13176,"line_start":212,"line_end":212,"column_start":1,"column_end":95}},{"value":"/         // the security of the result. By default, the number of threads is set to the number","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":13177,"byte_end":13274,"line_start":213,"line_end":213,"column_start":1,"column_end":98}},{"value":"/         // of logical cores on your machine. If you set the number of threads to a number","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":13275,"byte_end":13368,"line_start":214,"line_end":214,"column_start":1,"column_end":94}},{"value":"/         // greater than the number of lanes, `Hasher` will automatically reduce the number","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":13369,"byte_end":13463,"line_start":215,"line_end":215,"column_start":1,"column_end":95}},{"value":"/         // of threads to the number of lanes","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":13464,"byte_end":13512,"line_start":216,"line_end":216,"column_start":1,"column_end":49}},{"value":"/         .configure_variant(Variant::Argon2id) // Default is `Variant::Argon2id`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":13513,"byte_end":13596,"line_start":217,"line_end":217,"column_start":1,"column_end":84}},{"value":"/         // 👆 Argon2 has three variants: Argon2d, Argon2i, and Argon2id. Here is how these","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":13597,"byte_end":13693,"line_start":218,"line_end":218,"column_start":1,"column_end":94}},{"value":"/         // variants are explained in the RFC: \"Argon2 has one primary variant: Argon2id,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":13694,"byte_end":13786,"line_start":219,"line_end":219,"column_start":1,"column_end":93}},{"value":"/         // and two supplementary variants: Argon2d and Argon2i. Argon2d uses data-dependent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":13787,"byte_end":13882,"line_start":220,"line_end":220,"column_start":1,"column_end":96}},{"value":"/         // memory access, which makes it suitable for ... applications with no threats from","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":13883,"byte_end":13978,"line_start":221,"line_end":221,"column_start":1,"column_end":96}},{"value":"/         // side-channel timing attacks. Argon2i uses data-independent memory access, which","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":13979,"byte_end":14073,"line_start":222,"line_end":222,"column_start":1,"column_end":95}},{"value":"/         // is preferred for password hashing and password-based key derivation. Argon2id","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":14074,"byte_end":14166,"line_start":223,"line_end":223,"column_start":1,"column_end":93}},{"value":"/         // works as Argon2i for the first half of the first iteration over the memory, and","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":14167,"byte_end":14261,"line_start":224,"line_end":224,"column_start":1,"column_end":95}},{"value":"/         // as Argon2d for the rest, thus providing both side-channel attack protection and","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":14262,"byte_end":14356,"line_start":225,"line_end":225,"column_start":1,"column_end":95}},{"value":"/         // brute-force cost savings due to time-memory tradeoffs.\" If you do not know which","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":14357,"byte_end":14452,"line_start":226,"line_end":226,"column_start":1,"column_end":96}},{"value":"/         // variant to use, use the default, which is Argon2id","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":14453,"byte_end":14518,"line_start":227,"line_end":227,"column_start":1,"column_end":66}},{"value":"/         .configure_version(Version::_0x13) // Default is `Version::_0x13`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":14519,"byte_end":14596,"line_start":228,"line_end":228,"column_start":1,"column_end":78}},{"value":"/         // 👆 Argon2 has two versions: 0x10 and 0x13. The latest version is 0x13 (as of 5/18).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":14597,"byte_end":14697,"line_start":229,"line_end":229,"column_start":1,"column_end":98}},{"value":"/         // Unless you have a very specific reason not to, you should use the latest","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":14698,"byte_end":14785,"line_start":230,"line_end":230,"column_start":1,"column_end":88}},{"value":"/         // version (0x13), which is also the default","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":14786,"byte_end":14842,"line_start":231,"line_end":231,"column_start":1,"column_end":57}},{"value":"/         .opt_out_of_secret_key(true); // Default is `false`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":14843,"byte_end":14906,"line_start":232,"line_end":232,"column_start":1,"column_end":64}},{"value":"/         // 👆 As an extra security measure, if you want to hash without a secret key, which","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":14907,"byte_end":15004,"line_start":233,"line_end":233,"column_start":1,"column_end":95}},{"value":"/         // is not recommended, you must explicitly declare that this is your intention","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15005,"byte_end":15095,"line_start":234,"line_end":234,"column_start":1,"column_end":91}},{"value":"/         // by calling this method and setting the `opt_out_of_secret_key` configuration to","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15096,"byte_end":15190,"line_start":235,"line_end":235,"column_start":1,"column_end":95}},{"value":"/         // `true` (by default, it is set to `false`); otherwise hashing will return an error","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15191,"byte_end":15287,"line_start":236,"line_end":236,"column_start":1,"column_end":97}},{"value":"/         // when you fail to provide a secret key","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15288,"byte_end":15340,"line_start":237,"line_end":237,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15341,"byte_end":15344,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/     let hash = hasher","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15345,"byte_end":15370,"line_start":239,"line_end":239,"column_start":1,"column_end":26}},{"value":"/         .with_password(\"P@ssw0rd\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15371,"byte_end":15409,"line_start":240,"line_end":240,"column_start":1,"column_end":39}},{"value":"/         .with_salt(\"somesalt\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15410,"byte_end":15444,"line_start":241,"line_end":241,"column_start":1,"column_end":35}},{"value":"/         .hash()","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15445,"byte_end":15464,"line_start":242,"line_end":242,"column_start":1,"column_end":20}},{"value":"/         .unwrap();","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15465,"byte_end":15487,"line_start":243,"line_end":243,"column_start":1,"column_end":23}},{"value":"/         // 👆 Note: We are able to hash witout a secret key because we explicitly","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15488,"byte_end":15575,"line_start":244,"line_end":244,"column_start":1,"column_end":85}},{"value":"/         // set `opt_out_of_secret_key` to `true` above","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15576,"byte_end":15634,"line_start":245,"line_end":245,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15635,"byte_end":15638,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/     assert_eq!(","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15639,"byte_end":15658,"line_start":247,"line_end":247,"column_start":1,"column_end":20}},{"value":"/         &hash,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15659,"byte_end":15677,"line_start":248,"line_end":248,"column_start":1,"column_end":19}},{"value":"/         \"$argon2id$v=19$m=4096,t=192,p=2$c29tZXNhbHQ$sw41ZsxebJmOJ6vSHe6BGQ\",","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15678,"byte_end":15759,"line_start":249,"line_end":249,"column_start":1,"column_end":82}},{"value":"/     );","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15760,"byte_end":15770,"line_start":250,"line_end":250,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15771,"byte_end":15776,"line_start":251,"line_end":251,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15777,"byte_end":15784,"line_start":252,"line_end":252,"column_start":1,"column_end":8}},{"value":"/ # Installation","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15785,"byte_end":15803,"line_start":253,"line_end":253,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15804,"byte_end":15807,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ <b>argonautica</b> should be relatively straightforward to include in your Rust project:","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15808,"byte_end":15900,"line_start":255,"line_end":255,"column_start":1,"column_end":93}},{"value":"/ * Place `extern crate argonautica;` in your code (typically in either `lib.rs` or `main.rs`)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15901,"byte_end":15997,"line_start":256,"line_end":256,"column_start":1,"column_end":97}},{"value":"/ * In the `[dependencies]` section of your `Cargo.toml`, place ...","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":15998,"byte_end":16067,"line_start":257,"line_end":257,"column_start":1,"column_end":70}},{"value":"/     * ... if you're building for your own machine ...","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":16068,"byte_end":16125,"line_start":258,"line_end":258,"column_start":1,"column_end":58}},{"value":"/         * `argonautica = { version = \"0.2\", features = [\"simd\"] }`, or","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":16126,"byte_end":16200,"line_start":259,"line_end":259,"column_start":1,"column_end":75}},{"value":"/         * `argonautica = { version = \"0.2\", features = [\"serde\", \"simd\"] }`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":16201,"byte_end":16280,"line_start":260,"line_end":260,"column_start":1,"column_end":80}},{"value":"/     * ... if you're building for a different machine ...","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":16281,"byte_end":16341,"line_start":261,"line_end":261,"column_start":1,"column_end":61}},{"value":"/         * `argonautica = \"0.2\"`, or","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":16342,"byte_end":16381,"line_start":262,"line_end":262,"column_start":1,"column_end":40}},{"value":"/         * `argonautica = { version = \"0.2\", features = [\"serde\"] }`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":16382,"byte_end":16453,"line_start":263,"line_end":263,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":16454,"byte_end":16457,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ That said, <b>argonautica</b> uses [cc](https://github.com/alexcrichton/cc-rs) and","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":16458,"byte_end":16544,"line_start":265,"line_end":265,"column_start":1,"column_end":87}},{"value":"/ [bindgen](https://github.com/rust-lang-nursery/rust-bindgen) to compile the cannonical","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":16545,"byte_end":16635,"line_start":266,"line_end":266,"column_start":1,"column_end":91}},{"value":"/ [C implemenation](https://github.com/P-H-C/phc-winner-argon2) of Argon2 into a","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":16636,"byte_end":16718,"line_start":267,"line_end":267,"column_start":1,"column_end":83}},{"value":"/ static archive during the build process. This means you need a C compiler on your","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":16719,"byte_end":16804,"line_start":268,"line_end":268,"column_start":1,"column_end":86}},{"value":"/ machine in order to build <b>argonautica</b>. More specifically, you need:","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":16805,"byte_end":16883,"line_start":269,"line_end":269,"column_start":1,"column_end":79}},{"value":"/ * [LLVM/Clang](https://llvm.org/) (version 3.9 or higher)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":16884,"byte_end":16945,"line_start":270,"line_end":270,"column_start":1,"column_end":62}},{"value":"/     * Mac OS: `brew install llvm`, which requires [Homebrew](https://brew.sh/)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":16946,"byte_end":17028,"line_start":271,"line_end":271,"column_start":1,"column_end":83}},{"value":"/     * Debian-based linux: `apt-get install clang llvm-dev libclang-dev`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":17029,"byte_end":17104,"line_start":272,"line_end":272,"column_start":1,"column_end":76}},{"value":"/     * Arch linux: `pacman -S clang`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":17105,"byte_end":17144,"line_start":273,"line_end":273,"column_start":1,"column_end":40}},{"value":"/     * Windows: Download a pre-built binary [here](http://releases.llvm.org/download.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":17145,"byte_end":17238,"line_start":274,"line_end":274,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":17239,"byte_end":17242,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ <b>argonautica</b> runs on stable Rust version 1.26.0 or greater.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":17243,"byte_end":17312,"line_start":276,"line_end":276,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":17313,"byte_end":17316,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ # License","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":17317,"byte_end":17330,"line_start":278,"line_end":278,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":17331,"byte_end":17334,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ <b>argonautica</b> is licensed under either of:","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":17335,"byte_end":17386,"line_start":280,"line_end":280,"column_start":1,"column_end":52}},{"value":"/ * [The Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0), or","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":17387,"byte_end":17474,"line_start":281,"line_end":281,"column_start":1,"column_end":88}},{"value":"/ * [The MIT license](http://opensource.org/licenses/MIT)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":17475,"byte_end":17534,"line_start":282,"line_end":282,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":17535,"byte_end":17538,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ at your option.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":17539,"byte_end":17558,"line_start":284,"line_end":284,"column_start":1,"column_end":20}},{"value":"deny(missing_debug_implementations, missing_docs, unused_imports,\n       unused_unsafe, unused_variables)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":17560,"byte_end":17668,"line_start":286,"line_end":288,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1146},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":32493,"byte_end":32498,"line_start":33,"line_end":33,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":1147},{"krate":0,"index":1148}],"decl_id":null,"docs":" Struct representing an error, which implements the\n [`Fail`](https://docs.rs/failure/0.1.1/failure/trait.Fail.html) trait\n from [failure](https://github.com/rust-lang-nursery/failure)\n","sig":null,"attributes":[{"value":"/ Struct representing an error, which implements the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":32100,"byte_end":32154,"line_start":27,"line_end":27,"column_start":1,"column_end":55}},{"value":"/ [`Fail`](https://docs.rs/failure/0.1.1/failure/trait.Fail.html) trait","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":32155,"byte_end":32228,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/ from [failure](https://github.com/rust-lang-nursery/failure)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":32229,"byte_end":32293,"line_start":29,"line_end":29,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":32621,"byte_end":32624,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"pub fn new(ErrorKind) -> Error","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Error`](struct.Error.html)\n","sig":null,"attributes":[{"value":"/ Creates a new [`Error`](struct.Error.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":32563,"byte_end":32609,"line_start":39,"line_end":39,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":32927,"byte_end":32938,"line_start":46,"line_end":46,"column_start":12,"column_end":23},"name":"add_context","qualname":"<Error>::add_context","value":"pub fn add_context<S>(Self, S) -> Error where S: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Adds additional context to the [`Error`](struct.Error.html). The additional context will be appended to\n the end of the [`Error`](struct.Error.html)'s display string\n","sig":null,"attributes":[{"value":"/ Adds additional context to the [`Error`](struct.Error.html). The additional context will be appended to","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":32739,"byte_end":32846,"line_start":44,"line_end":44,"column_start":5,"column_end":112}},{"value":"/ the end of the [`Error`](struct.Error.html)'s display string","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":32851,"byte_end":32915,"line_start":45,"line_end":45,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":33213,"byte_end":33217,"line_start":54,"line_end":54,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"pub fn kind(&Self) -> ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Gets the [`ErrorKind`](enum.ErrorKind.html) associated with the [`Error`](struct.Error.html)\n","sig":null,"attributes":[{"value":"/ Gets the [`ErrorKind`](enum.ErrorKind.html) associated with the [`Error`](struct.Error.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":33105,"byte_end":33201,"line_start":53,"line_end":53,"column_start":5,"column_end":101}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1197},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":34358,"byte_end":34384,"line_start":8,"line_end":8,"column_start":5,"column_end":31},"name":"AdditionalDataTooLongError","qualname":"::error_kind::ErrorKind::AdditionalDataTooLongError","value":"ErrorKind::AdditionalDataTooLongError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Additional data too long. Length in bytes must be less than 2^32\n","sig":null,"attributes":[{"value":"/ Additional data too long. Length in bytes must be less than 2^32","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":34195,"byte_end":34263,"line_start":6,"line_end":6,"column_start":5,"column_end":73}},{"value":"fail(display =\n       \"Additional data too long. Length in bytes must be less than 2^32\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":34268,"byte_end":34353,"line_start":7,"line_end":7,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1199},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":34566,"byte_end":34584,"line_start":12,"line_end":12,"column_start":5,"column_end":23},"name":"BackendEncodeError","qualname":"::error_kind::ErrorKind::BackendEncodeError","value":"ErrorKind::BackendEncodeError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Backend encode error. u32 provided could not be encoded into a Backend\n","sig":null,"attributes":[{"value":"/ Backend encode error. u32 provided could not be encoded into a Backend","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":34391,"byte_end":34465,"line_start":10,"line_end":10,"column_start":5,"column_end":79}},{"value":"fail(display =\n       \"Backend encode error. u32 provided could not be encoded into a Backend\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":34470,"byte_end":34561,"line_start":11,"line_end":11,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1201},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":34738,"byte_end":34761,"line_start":16,"line_end":16,"column_start":5,"column_end":28},"name":"BackendUnsupportedError","qualname":"::error_kind::ErrorKind::BackendUnsupportedError","value":"ErrorKind::BackendUnsupportedError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Rust backend not yet supported. Please use the C backend\n","sig":null,"attributes":[{"value":"/ Rust backend not yet supported. Please use the C backend","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":34591,"byte_end":34651,"line_start":14,"line_end":14,"column_start":5,"column_end":65}},{"value":"fail(display = \"Rust backend not yet supported. Please use the C backend\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":34656,"byte_end":34733,"line_start":15,"line_end":15,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1203},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":34913,"byte_end":34930,"line_start":20,"line_end":20,"column_start":5,"column_end":22},"name":"Base64DecodeError","qualname":"::error_kind::ErrorKind::Base64DecodeError","value":"ErrorKind::Base64DecodeError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Base64 decode error. Bytes provided were invalid base64\n","sig":null,"attributes":[{"value":"/ Base64 decode error. Bytes provided were invalid base64","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":34768,"byte_end":34827,"line_start":18,"line_end":18,"column_start":5,"column_end":64}},{"value":"fail(display = \"Base64 decode error. Bytes provided were invalid base64\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":34832,"byte_end":34908,"line_start":19,"line_end":19,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1205},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":35158,"byte_end":35161,"line_start":26,"line_end":26,"column_start":5,"column_end":8},"name":"Bug","qualname":"::error_kind::ErrorKind::Bug","value":"ErrorKind::Bug","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" This is a bug in the argonautica crate and should be unreachable. Please file an issue\n","sig":null,"attributes":[{"value":"/ This is a bug in the argonautica crate and should be unreachable. Please file an issue","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":34937,"byte_end":35027,"line_start":22,"line_end":22,"column_start":5,"column_end":95}},{"value":"fail(display =\n       \"This is a bug in the argonautica crate and should be unreachable. Please file an issue\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":35032,"byte_end":35153,"line_start":23,"line_end":25,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1207},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":35291,"byte_end":35306,"line_start":30,"line_end":30,"column_start":5,"column_end":20},"name":"HashDecodeError","qualname":"::error_kind::ErrorKind::HashDecodeError","value":"ErrorKind::HashDecodeError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Hash decode error. Hash provided was invalid\n","sig":null,"attributes":[{"value":"/ Hash decode error. Hash provided was invalid","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":35168,"byte_end":35216,"line_start":28,"line_end":28,"column_start":5,"column_end":53}},{"value":"fail(display = \"Hash decode error. Hash provided was invalid\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":35221,"byte_end":35286,"line_start":29,"line_end":29,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1209},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":35664,"byte_end":35684,"line_start":39,"line_end":39,"column_start":5,"column_end":25},"name":"HashLenTooShortError","qualname":"::error_kind::ErrorKind::HashLenTooShortError","value":"ErrorKind::HashLenTooShortError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Hash length too short. Hash length must be at least 4\n","sig":null,"attributes":[{"value":"/ Hash length too short. Hash length must be at least 4","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":35523,"byte_end":35580,"line_start":37,"line_end":37,"column_start":5,"column_end":62}},{"value":"fail(display = \"Hash length too short. Hash length must be at least 4\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":35585,"byte_end":35659,"line_start":38,"line_end":38,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1211},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":35866,"byte_end":35882,"line_start":43,"line_end":43,"column_start":5,"column_end":21},"name":"HashMissingError","qualname":"::error_kind::ErrorKind::HashMissingError","value":"ErrorKind::HashMissingError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Hash missing. Attempted to verify without first having provided a hash\n","sig":null,"attributes":[{"value":"/ Hash missing. Attempted to verify without first having provided a hash","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":35691,"byte_end":35765,"line_start":41,"line_end":41,"column_start":5,"column_end":79}},{"value":"fail(display =\n       \"Hash missing. Attempted to verify without first having provided a hash\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":35770,"byte_end":35861,"line_start":42,"line_end":42,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1213},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36010,"byte_end":36031,"line_start":47,"line_end":47,"column_start":5,"column_end":26},"name":"IterationsTooFewError","qualname":"::error_kind::ErrorKind::IterationsTooFewError","value":"ErrorKind::IterationsTooFewError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Iterations too few. Iterations must be greater than 0\n","sig":null,"attributes":[{"value":"/ Iterations too few. Iterations must be greater than 0","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":35889,"byte_end":35946,"line_start":45,"line_end":45,"column_start":5,"column_end":62}},{"value":"fail(display = \"Iterations must be greater than 0\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":35951,"byte_end":36005,"line_start":46,"line_end":46,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1215},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36144,"byte_end":36160,"line_start":51,"line_end":51,"column_start":5,"column_end":21},"name":"LanesTooFewError","qualname":"::error_kind::ErrorKind::LanesTooFewError","value":"ErrorKind::LanesTooFewError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Lanes too few. Lanes must be greater than 0\n","sig":null,"attributes":[{"value":"/ Lanes too few. Lanes must be greater than 0","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36038,"byte_end":36085,"line_start":49,"line_end":49,"column_start":5,"column_end":52}},{"value":"fail(display = \"Lanes must be greater than 0\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36090,"byte_end":36139,"line_start":50,"line_end":50,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1217},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36274,"byte_end":36291,"line_start":55,"line_end":55,"column_start":5,"column_end":22},"name":"LanesTooManyError","qualname":"::error_kind::ErrorKind::LanesTooManyError","value":"ErrorKind::LanesTooManyError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Lanes too many. Lanes must be less than 2^24\n","sig":null,"attributes":[{"value":"/ Lanes too many. Lanes must be less than 2^24","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36167,"byte_end":36215,"line_start":53,"line_end":53,"column_start":5,"column_end":53}},{"value":"fail(display = \"Lanes must be less than 2^24\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36220,"byte_end":36269,"line_start":54,"line_end":54,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1219},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36455,"byte_end":36476,"line_start":59,"line_end":59,"column_start":5,"column_end":26},"name":"MemoryAllocationError","qualname":"::error_kind::ErrorKind::MemoryAllocationError","value":"ErrorKind::MemoryAllocationError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" C code attempted to allocate memory (using malloc) and failed\n","sig":null,"attributes":[{"value":"/ C code attempted to allocate memory (using malloc) and failed","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36298,"byte_end":36363,"line_start":57,"line_end":57,"column_start":5,"column_end":70}},{"value":"fail(display =\n       \"C code attempted to allocate memory (using malloc) and failed\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36368,"byte_end":36450,"line_start":58,"line_end":58,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1221},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36628,"byte_end":36650,"line_start":63,"line_end":63,"column_start":5,"column_end":27},"name":"MemorySizeInvalidError","qualname":"::error_kind::ErrorKind::MemorySizeInvalidError","value":"ErrorKind::MemorySizeInvalidError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Memory size invalid. Memory size must be a power of two\n","sig":null,"attributes":[{"value":"/ Memory size invalid. Memory size must be a power of two","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36483,"byte_end":36542,"line_start":61,"line_end":61,"column_start":5,"column_end":64}},{"value":"fail(display = \"Memory size invalid. Memory size must be a power of two\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36547,"byte_end":36623,"line_start":62,"line_end":62,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1223},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36864,"byte_end":36887,"line_start":69,"line_end":69,"column_start":5,"column_end":28},"name":"MemorySizeTooSmallError","qualname":"::error_kind::ErrorKind::MemorySizeTooSmallError","value":"ErrorKind::MemorySizeTooSmallError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Memory size too small. Memory size must be at least 8 times the number of lanes\n","sig":null,"attributes":[{"value":"/ Memory size too small. Memory size must be at least 8 times the number of lanes","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36657,"byte_end":36740,"line_start":65,"line_end":65,"column_start":5,"column_end":88}},{"value":"fail(display =\n       \"Memory size too small. Memory size must be at least 8 times the number of lanes\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36745,"byte_end":36859,"line_start":66,"line_end":68,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1225},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":37015,"byte_end":37025,"line_start":73,"line_end":73,"column_start":5,"column_end":15},"name":"OsRngError","qualname":"::error_kind::ErrorKind::OsRngError","value":"ErrorKind::OsRngError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Failed to access OS random number generator\n","sig":null,"attributes":[{"value":"/ Failed to access OS random number generator","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36894,"byte_end":36941,"line_start":71,"line_end":71,"column_start":5,"column_end":52}},{"value":"fail(display = \"Failed to access OS random number generator\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":36946,"byte_end":37010,"line_start":72,"line_end":72,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1227},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":37743,"byte_end":37765,"line_start":79,"line_end":79,"column_start":5,"column_end":27},"name":"PasswordImmutableError","qualname":"::error_kind::ErrorKind::PasswordImmutableError","value":"ErrorKind::PasswordImmutableError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Password immutable error. You attempted to hash or verify with an immutable password and password_clearing set to true, which is not possible because with an immutable password argonautica cannot zero out the password bytes. To prevent this error, either pass Hasher or Verifier a mutable password or set password_clearing to false\n","sig":null,"attributes":[{"value":"/ Password immutable error. You attempted to hash or verify with an immutable password and password_clearing set to true, which is not possible because with an immutable password argonautica cannot zero out the password bytes. To prevent this error, either pass Hasher or Verifier a mutable password or set password_clearing to false","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":37032,"byte_end":37367,"line_start":75,"line_end":75,"column_start":5,"column_end":340}},{"value":"fail(display =\n       \"Password immutable error. You attempted to hash or verify with an immutable password and password_clearing set to true, which is not possible because with an immutable password argonautica cannot zero out the password bytes. To prevent this error, either pass Hasher or Verifier a mutable password or set password_clearing to false\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":37372,"byte_end":37738,"line_start":76,"line_end":78,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1229},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":37977,"byte_end":37997,"line_start":85,"line_end":85,"column_start":5,"column_end":25},"name":"PasswordMissingError","qualname":"::error_kind::ErrorKind::PasswordMissingError","value":"ErrorKind::PasswordMissingError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Password missing. Attempted to verify without first having provided a password\n","sig":null,"attributes":[{"value":"/ Password missing. Attempted to verify without first having provided a password","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":37772,"byte_end":37854,"line_start":81,"line_end":81,"column_start":5,"column_end":87}},{"value":"fail(display =\n       \"Password missing. Attempted to verify without first having provided a password\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":37859,"byte_end":37972,"line_start":82,"line_end":84,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1231},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":38153,"byte_end":38173,"line_start":89,"line_end":89,"column_start":5,"column_end":25},"name":"PasswordTooLongError","qualname":"::error_kind::ErrorKind::PasswordTooLongError","value":"ErrorKind::PasswordTooLongError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Password too long. Length in bytes must be less than 2^32\n","sig":null,"attributes":[{"value":"/ Password too long. Length in bytes must be less than 2^32","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":38004,"byte_end":38065,"line_start":87,"line_end":87,"column_start":5,"column_end":66}},{"value":"fail(display = \"Password too long. Length in bytes must be less than 2^32\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":38070,"byte_end":38148,"line_start":88,"line_end":88,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1233},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":38331,"byte_end":38352,"line_start":93,"line_end":93,"column_start":5,"column_end":26},"name":"PasswordTooShortError","qualname":"::error_kind::ErrorKind::PasswordTooShortError","value":"ErrorKind::PasswordTooShortError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Password too short. Length in bytes must be greater than 0\n","sig":null,"attributes":[{"value":"/ Password too short. Length in bytes must be greater than 0","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":38180,"byte_end":38242,"line_start":91,"line_end":91,"column_start":5,"column_end":67}},{"value":"fail(display =\n       \"Password too short. Length in bytes must be greater than 0\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":38247,"byte_end":38326,"line_start":92,"line_end":92,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1235},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":38500,"byte_end":38516,"line_start":97,"line_end":97,"column_start":5,"column_end":21},"name":"SaltTooLongError","qualname":"::error_kind::ErrorKind::SaltTooLongError","value":"ErrorKind::SaltTooLongError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Salt too long. Length in bytes must be less than 2^32\n","sig":null,"attributes":[{"value":"/ Salt too long. Length in bytes must be less than 2^32","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":38359,"byte_end":38416,"line_start":95,"line_end":95,"column_start":5,"column_end":62}},{"value":"fail(display = \"Salt too long. Length in bytes must be less than 2^32\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":38421,"byte_end":38495,"line_start":96,"line_end":96,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1237},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":38658,"byte_end":38675,"line_start":101,"line_end":101,"column_start":5,"column_end":22},"name":"SaltTooShortError","qualname":"::error_kind::ErrorKind::SaltTooShortError","value":"ErrorKind::SaltTooShortError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Salt too short. Length in bytes must be at least 8\n","sig":null,"attributes":[{"value":"/ Salt too short. Length in bytes must be at least 8","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":38523,"byte_end":38577,"line_start":99,"line_end":99,"column_start":5,"column_end":59}},{"value":"fail(display = \"Salt too short. Length in bytes must be at least 8\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":38582,"byte_end":38653,"line_start":100,"line_end":100,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1239},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":39421,"byte_end":39444,"line_start":107,"line_end":107,"column_start":5,"column_end":28},"name":"SecretKeyImmutableError","qualname":"::error_kind::ErrorKind::SecretKeyImmutableError","value":"ErrorKind::SecretKeyImmutableError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Secret key immutable error. You attempted to hash or verify with an immutable secret key and secret_key_clearing set to true, which is not possible because with an immutable secret key argonautica cannot zero out the secret key bytes. To prevent this error, either pass Hasher or Verifier a mutable secret key or set secret_key_clearing to false\n","sig":null,"attributes":[{"value":"/ Secret key immutable error. You attempted to hash or verify with an immutable secret key and secret_key_clearing set to true, which is not possible because with an immutable secret key argonautica cannot zero out the secret key bytes. To prevent this error, either pass Hasher or Verifier a mutable secret key or set secret_key_clearing to false","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":38682,"byte_end":39031,"line_start":103,"line_end":103,"column_start":5,"column_end":354}},{"value":"fail(display =\n       \"Secret key immutable error. You attempted to hash or verify with an immutable secret key and secret_key_clearing set to true, which is not possible because with an immutable secret key argonautica cannot zero out the secret key bytes. To prevent this error, either pass Hasher or Verifier a mutable secret key or set secret_key_clearing to false\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":39036,"byte_end":39416,"line_start":104,"line_end":106,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1241},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":39722,"byte_end":39743,"line_start":113,"line_end":113,"column_start":5,"column_end":26},"name":"SecretKeyMissingError","qualname":"::error_kind::ErrorKind::SecretKeyMissingError","value":"ErrorKind::SecretKeyMissingError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Secret key missing. Attempted to hash without a secret key without having first opted out of using a secret key\n","sig":null,"attributes":[{"value":"/ Secret key missing. Attempted to hash without a secret key without having first opted out of using a secret key","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":39451,"byte_end":39566,"line_start":109,"line_end":109,"column_start":5,"column_end":120}},{"value":"fail(display =\n       \"Secret key missing. Attempted to hash without a secret key without having first opted out of using a secret key\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":39571,"byte_end":39717,"line_start":110,"line_end":112,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1243},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":39903,"byte_end":39924,"line_start":117,"line_end":117,"column_start":5,"column_end":26},"name":"SecretKeyTooLongError","qualname":"::error_kind::ErrorKind::SecretKeyTooLongError","value":"ErrorKind::SecretKeyTooLongError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Secret key too long. Length in bytes must be less than 2^32\n","sig":null,"attributes":[{"value":"/ Secret key too long. Length in bytes must be less than 2^32","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":39750,"byte_end":39813,"line_start":115,"line_end":115,"column_start":5,"column_end":68}},{"value":"fail(display =\n       \"Secret key too long. Length in bytes must be less than 2^32\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":39818,"byte_end":39898,"line_start":116,"line_end":116,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1245},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40054,"byte_end":40065,"line_start":121,"line_end":121,"column_start":5,"column_end":16},"name":"ThreadError","qualname":"::error_kind::ErrorKind::ThreadError","value":"ErrorKind::ThreadError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" C code reported a \"Threading failure\" error\n","sig":null,"attributes":[{"value":"/ C code reported a \"Threading failure\" error","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":39931,"byte_end":39978,"line_start":119,"line_end":119,"column_start":5,"column_end":52}},{"value":"fail(display = \"C code reported a \\\"Threading failure\\\" error\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":39983,"byte_end":40049,"line_start":120,"line_end":120,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1247},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40201,"byte_end":40219,"line_start":125,"line_end":125,"column_start":5,"column_end":23},"name":"ThreadsTooFewError","qualname":"::error_kind::ErrorKind::ThreadsTooFewError","value":"ErrorKind::ThreadsTooFewError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Threads too few. Threads must be greater than 0\n","sig":null,"attributes":[{"value":"/ Threads too few. Threads must be greater than 0","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40072,"byte_end":40123,"line_start":123,"line_end":123,"column_start":5,"column_end":56}},{"value":"fail(display = \"Threads too few. Threads must be greater than 0\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40128,"byte_end":40196,"line_start":124,"line_end":124,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1249},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40357,"byte_end":40376,"line_start":129,"line_end":129,"column_start":5,"column_end":24},"name":"ThreadsTooManyError","qualname":"::error_kind::ErrorKind::ThreadsTooManyError","value":"ErrorKind::ThreadsTooManyError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Threads too many. Threads must be less than 2^24\n","sig":null,"attributes":[{"value":"/ Threads too many. Threads must be less than 2^24","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40226,"byte_end":40278,"line_start":127,"line_end":127,"column_start":5,"column_end":57}},{"value":"fail(display = \"Threads too many. Threads must be less than 2^24\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40283,"byte_end":40352,"line_start":128,"line_end":128,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1251},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40550,"byte_end":40565,"line_start":133,"line_end":133,"column_start":5,"column_end":20},"name":"Utf8EncodeError","qualname":"::error_kind::ErrorKind::Utf8EncodeError","value":"ErrorKind::Utf8EncodeError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Utf-8 encode error. Bytes provided could not be encoded into utf-8\n","sig":null,"attributes":[{"value":"/ Utf-8 encode error. Bytes provided could not be encoded into utf-8","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40383,"byte_end":40453,"line_start":131,"line_end":131,"column_start":5,"column_end":75}},{"value":"fail(display =\n       \"Utf-8 encode error. Bytes provided could not be encoded into utf-8\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40458,"byte_end":40545,"line_start":132,"line_end":132,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1253},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40749,"byte_end":40767,"line_start":137,"line_end":137,"column_start":5,"column_end":23},"name":"VariantEncodeError","qualname":"::error_kind::ErrorKind::VariantEncodeError","value":"ErrorKind::VariantEncodeError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Variant encode error. &str provided could not be encoded into a Variant\n","sig":null,"attributes":[{"value":"/ Variant encode error. &str provided could not be encoded into a Variant","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40572,"byte_end":40647,"line_start":135,"line_end":135,"column_start":5,"column_end":80}},{"value":"fail(display =\n       \"Variant encode error. &str provided could not be encoded into a Variant\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40652,"byte_end":40744,"line_start":136,"line_end":136,"column_start":5,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1255},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40979,"byte_end":40997,"line_start":143,"line_end":143,"column_start":5,"column_end":23},"name":"VersionEncodeError","qualname":"::error_kind::ErrorKind::VersionEncodeError","value":"ErrorKind::VersionEncodeError","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Version encode error. &str or u32 provided could not be encoded into a Version\n","sig":null,"attributes":[{"value":"/ Version encode error. &str or u32 provided could not be encoded into a Version","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40774,"byte_end":40856,"line_start":139,"line_end":139,"column_start":5,"column_end":87}},{"value":"fail(display =\n       \"Version encode error. &str or u32 provided could not be encoded into a Version\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":40861,"byte_end":40974,"line_start":140,"line_end":142,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1257},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":41071,"byte_end":41086,"line_start":147,"line_end":147,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error_kind::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display = \"__Nonexaustive variant\")","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":41023,"byte_end":41066,"line_start":146,"line_end":146,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":1170},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":34179,"byte_end":34188,"line_start":5,"line_end":5,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error_kind::ErrorKind","value":"pub enum ErrorKind {\n    AdditionalDataTooLongError,\n    BackendEncodeError,\n    BackendUnsupportedError,\n    Base64DecodeError,\n    Bug,\n    HashDecodeError,\n    HashLenTooShortError,\n    HashMissingError,\n    IterationsTooFewError,\n    LanesTooFewError,\n    LanesTooManyError,\n    MemoryAllocationError,\n    MemorySizeInvalidError,\n    MemorySizeTooSmallError,\n    OsRngError,\n    PasswordImmutableError,\n    PasswordMissingError,\n    PasswordTooLongError,\n    PasswordTooShortError,\n    SaltTooLongError,\n    SaltTooShortError,\n    SecretKeyImmutableError,\n    SecretKeyMissingError,\n    SecretKeyTooLongError,\n    ThreadError,\n    ThreadsTooFewError,\n    ThreadsTooManyError,\n    Utf8EncodeError,\n    VariantEncodeError,\n    VersionEncodeError,\n    __Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":1197},{"krate":0,"index":1199},{"krate":0,"index":1201},{"krate":0,"index":1203},{"krate":0,"index":1205},{"krate":0,"index":1207},{"krate":0,"index":1209},{"krate":0,"index":1211},{"krate":0,"index":1213},{"krate":0,"index":1215},{"krate":0,"index":1217},{"krate":0,"index":1219},{"krate":0,"index":1221},{"krate":0,"index":1223},{"krate":0,"index":1225},{"krate":0,"index":1227},{"krate":0,"index":1229},{"krate":0,"index":1231},{"krate":0,"index":1233},{"krate":0,"index":1235},{"krate":0,"index":1237},{"krate":0,"index":1239},{"krate":0,"index":1241},{"krate":0,"index":1243},{"krate":0,"index":1245},{"krate":0,"index":1247},{"krate":0,"index":1249},{"krate":0,"index":1251},{"krate":0,"index":1253},{"krate":0,"index":1255},{"krate":0,"index":1257}],"decl_id":null,"docs":" Enum representing the various kinds of errors\n","sig":null,"attributes":[{"value":"/ Enum representing the various kinds of errors","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error_kind.rs","byte_start":33919,"byte_end":33968,"line_start":1,"line_end":1,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1345},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":42804,"byte_end":42810,"line_start":28,"line_end":28,"column_start":12,"column_end":18},"name":"Hasher","qualname":"::hasher::Hasher","value":"Hasher {  }","parent":null,"children":[{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351}],"decl_id":null,"docs":" <b><u>One of the two main structs.</u></b> Use it to turn passwords into hashes\n","sig":null,"attributes":[{"value":"/ <b><u>One of the two main structs.</u></b> Use it to turn passwords into hashes","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":42565,"byte_end":42648,"line_start":24,"line_end":24,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":45621,"byte_end":45624,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"new","qualname":"<Hasher>::new","value":"pub fn new() -> Hasher","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Hasher`](struct.Hasher.html) with a sensible default configuration\n for the average machine (e.g. an early-2014 MacBook Air).","sig":null,"attributes":[{"value":"/ Creates a new [`Hasher`](struct.Hasher.html) with a sensible default configuration","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":43223,"byte_end":43309,"line_start":39,"line_end":39,"column_start":5,"column_end":91}},{"value":"/ for the average machine (e.g. an early-2014 MacBook Air).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":43314,"byte_end":43375,"line_start":40,"line_end":40,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":43380,"byte_end":43383,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ <b>Note: If you are using this library to hash user passwords for storage in a database,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":43388,"byte_end":43480,"line_start":42,"line_end":42,"column_start":5,"column_end":97}},{"value":"/ it is recommended that you adjust these settings for your machine (primarily `iterations`,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":43485,"byte_end":43579,"line_start":43,"line_end":43,"column_start":5,"column_end":99}},{"value":"/ and `memory_size`) until the time it takes to hash a password is approximately 300-500","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":43584,"byte_end":43674,"line_start":44,"line_end":44,"column_start":5,"column_end":95}},{"value":"/ milliseconds</b>.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":43679,"byte_end":43700,"line_start":45,"line_end":45,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":43705,"byte_end":43708,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ There is a script in the examples directory that will show you the various configuration","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":43713,"byte_end":43805,"line_start":47,"line_end":47,"column_start":5,"column_end":97}},{"value":"/ options for your machine that produce hashing times between 300 and 500 milliseconds","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":43810,"byte_end":43898,"line_start":48,"line_end":48,"column_start":5,"column_end":93}},{"value":"/ (Don't forget to run it with the `--release` and `--features=\"simd\"` flags). Alternatively,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":43903,"byte_end":43998,"line_start":49,"line_end":49,"column_start":5,"column_end":100}},{"value":"/ you can clone the repository and run the benchmark suite with","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":44003,"byte_end":44068,"line_start":50,"line_end":50,"column_start":5,"column_end":70}},{"value":"/ `cargo bench --features=\"benches simd\" -- inputs`, which will take longer but which runs","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":44073,"byte_end":44165,"line_start":51,"line_end":51,"column_start":5,"column_end":97}},{"value":"/ many iterations for each configuration scenario; so it provides information about","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":44170,"byte_end":44255,"line_start":52,"line_end":52,"column_start":5,"column_end":90}},{"value":"/ distributions of running time (e.g. mean, 95% confidence intervals, etc.) as opposed","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":44260,"byte_end":44348,"line_start":53,"line_end":53,"column_start":5,"column_end":93}},{"value":"/ to just point estimates.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":44353,"byte_end":44381,"line_start":54,"line_end":54,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":44386,"byte_end":44389,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Here are the default configuration options:","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":44394,"byte_end":44441,"line_start":56,"line_end":56,"column_start":5,"column_end":52}},{"value":"/ * `backend`: [`Backend::C`](config/enum.Backend.html#variant.C)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":44446,"byte_end":44513,"line_start":57,"line_end":57,"column_start":5,"column_end":72}},{"value":"/ * `cpu_pool`: A [`CpuPool`](https://docs.rs/futures-cpupool/0.1.8/futures_cpupool/struct.CpuPool.html) ...","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":44518,"byte_end":44628,"line_start":58,"line_end":58,"column_start":5,"column_end":115}},{"value":"/     * with threads equal to the number of logical cores on your machine","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":44633,"byte_end":44708,"line_start":59,"line_end":59,"column_start":5,"column_end":80}},{"value":"/     * that is lazily created, i.e. created only if / when you call the methods","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":44713,"byte_end":44795,"line_start":60,"line_end":60,"column_start":5,"column_end":87}},{"value":"/       that need it ([`hash_non_blocking`](struct.Hasher.html#method.hash_non_blocking) or","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":44800,"byte_end":44893,"line_start":61,"line_end":61,"column_start":5,"column_end":98}},{"value":"/       [`hash_raw_non_blocking`](struct.Hasher.html#method.hash_raw_non_blocking))","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":44898,"byte_end":44983,"line_start":62,"line_end":62,"column_start":5,"column_end":90}},{"value":"/ * `hash_len`: `32` bytes","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":44988,"byte_end":45016,"line_start":63,"line_end":63,"column_start":5,"column_end":33}},{"value":"/ * `iterations`: `192`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":45021,"byte_end":45046,"line_start":64,"line_end":64,"column_start":5,"column_end":30}},{"value":"/ * `lanes`: The number of logical cores on your machine","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":45051,"byte_end":45109,"line_start":65,"line_end":65,"column_start":5,"column_end":63}},{"value":"/ * `memory_size`: `4096` kibibytes","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":45114,"byte_end":45151,"line_start":66,"line_end":66,"column_start":5,"column_end":42}},{"value":"/ * `opt_out_of_secret_key`: `false`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":45156,"byte_end":45194,"line_start":67,"line_end":67,"column_start":5,"column_end":43}},{"value":"/ * `password_clearing`: `false`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":45199,"byte_end":45233,"line_start":68,"line_end":68,"column_start":5,"column_end":39}},{"value":"/ * `salt`: random [`Salt`](input/struct.Salt.html) of length 32 bytes that renews with every hash","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":45238,"byte_end":45338,"line_start":69,"line_end":69,"column_start":5,"column_end":105}},{"value":"/ * `secret_key_clearing`: `false`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":45343,"byte_end":45379,"line_start":70,"line_end":70,"column_start":5,"column_end":41}},{"value":"/ * `threads`: The number of logical cores on your machine","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":45384,"byte_end":45444,"line_start":71,"line_end":71,"column_start":5,"column_end":65}},{"value":"/ * `variant`: [`Variant::Argon2id`](config/enum.Variant.html#variant.Argon2id)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":45449,"byte_end":45530,"line_start":72,"line_end":72,"column_start":5,"column_end":86}},{"value":"/ * `version`: [`Version::_0x13`](config/enum.Verion.html#variant._0x13)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":45535,"byte_end":45609,"line_start":73,"line_end":73,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":46608,"byte_end":46625,"line_start":87,"line_end":87,"column_start":12,"column_end":29},"name":"fast_but_insecure","qualname":"<Hasher>::fast_but_insecure","value":"pub fn fast_but_insecure() -> Hasher","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Hasher`](struct.Hasher.html) that is <b>fast but <u>highly</u> insecure</b>.\n If for some reason you'd like to use Argon2 for hashing where security is not an issue,\n you can use this configuration. It sets hash length to 32 bytes (256 bits), uses only\n 1 iteration, sets memory size to the minimum of 8 * the number of lanes, uses a\n deterministic salt of the minimum length of 8 bytes, and opts out of a secret key.\n All other configuration options are the same as the defaults. On the developer's\n early-2014 Macbook Air, this configuration hashes the full text of Shakespear's Hamlet\n in approximately 1 millisecond (on average). [MD5](https://github.com/stainless-steel/md5)\n does it in about half the time and [sha2](https://github.com/RustCrypto/hashes) with the\n SHA-256 algorithm performs about the same as `argonautica`\n","sig":null,"attributes":[{"value":"/ Creates a new [`Hasher`](struct.Hasher.html) that is <b>fast but <u>highly</u> insecure</b>.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":45684,"byte_end":45780,"line_start":77,"line_end":77,"column_start":5,"column_end":101}},{"value":"/ If for some reason you'd like to use Argon2 for hashing where security is not an issue,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":45785,"byte_end":45876,"line_start":78,"line_end":78,"column_start":5,"column_end":96}},{"value":"/ you can use this configuration. It sets hash length to 32 bytes (256 bits), uses only","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":45881,"byte_end":45970,"line_start":79,"line_end":79,"column_start":5,"column_end":94}},{"value":"/ 1 iteration, sets memory size to the minimum of 8 * the number of lanes, uses a","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":45975,"byte_end":46058,"line_start":80,"line_end":80,"column_start":5,"column_end":88}},{"value":"/ deterministic salt of the minimum length of 8 bytes, and opts out of a secret key.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":46063,"byte_end":46149,"line_start":81,"line_end":81,"column_start":5,"column_end":91}},{"value":"/ All other configuration options are the same as the defaults. On the developer's","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":46154,"byte_end":46238,"line_start":82,"line_end":82,"column_start":5,"column_end":89}},{"value":"/ early-2014 Macbook Air, this configuration hashes the full text of Shakespear's Hamlet","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":46243,"byte_end":46333,"line_start":83,"line_end":83,"column_start":5,"column_end":95}},{"value":"/ in approximately 1 millisecond (on average). [MD5](https://github.com/stainless-steel/md5)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":46338,"byte_end":46432,"line_start":84,"line_end":84,"column_start":5,"column_end":99}},{"value":"/ does it in about half the time and [sha2](https://github.com/RustCrypto/hashes) with the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":46437,"byte_end":46529,"line_start":85,"line_end":85,"column_start":5,"column_end":97}},{"value":"/ SHA-256 algorithm performs about the same as `argonautica`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":46534,"byte_end":46596,"line_start":86,"line_end":86,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":48105,"byte_end":48122,"line_start":121,"line_end":121,"column_start":12,"column_end":29},"name":"configure_backend","qualname":"<Hasher>::configure_backend","value":"pub fn configure_backend(&mut Self, Backend) -> &mut Hasher","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Hasher`](struct.Hasher.html) with a custom backend. The\n default backend is [`Backend::C`](config/enum.Backend.html#variant.C), <i>which is\n currently the only backend supported. A Rust backend is planned, but is not currently\n available. If you configure a [`Hasher`](struct.Hasher.html) with\n [`Backend::Rust`](config/enum.Backend.html#variant.Rust) it will error when you\n call [`hash`](struct.Hasher.html#method.hash),\n [`hash_raw`](struct.Hasher.html#method.hash_raw) or their non-blocking equivalents</i>\n","sig":null,"attributes":[{"value":"/ Allows you to configure [`Hasher`](struct.Hasher.html) with a custom backend. The","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":47511,"byte_end":47596,"line_start":114,"line_end":114,"column_start":5,"column_end":90}},{"value":"/ default backend is [`Backend::C`](config/enum.Backend.html#variant.C), <i>which is","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":47601,"byte_end":47687,"line_start":115,"line_end":115,"column_start":5,"column_end":91}},{"value":"/ currently the only backend supported. A Rust backend is planned, but is not currently","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":47692,"byte_end":47781,"line_start":116,"line_end":116,"column_start":5,"column_end":94}},{"value":"/ available. If you configure a [`Hasher`](struct.Hasher.html) with","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":47786,"byte_end":47855,"line_start":117,"line_end":117,"column_start":5,"column_end":74}},{"value":"/ [`Backend::Rust`](config/enum.Backend.html#variant.Rust) it will error when you","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":47860,"byte_end":47943,"line_start":118,"line_end":118,"column_start":5,"column_end":88}},{"value":"/ call [`hash`](struct.Hasher.html#method.hash),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":47948,"byte_end":47998,"line_start":119,"line_end":119,"column_start":5,"column_end":55}},{"value":"/ [`hash_raw`](struct.Hasher.html#method.hash_raw) or their non-blocking equivalents</i>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":48003,"byte_end":48093,"line_start":120,"line_end":120,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":49057,"byte_end":49075,"line_start":134,"line_end":134,"column_start":12,"column_end":30},"name":"configure_cpu_pool","qualname":"<Hasher>::configure_cpu_pool","value":"pub fn configure_cpu_pool(&mut Self, CpuPool) -> &mut Hasher","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Hasher`](struct.Hasher.html) with a custom\n [`CpuPool`](https://docs.rs/futures-cpupool/0.1.8/futures_cpupool/struct.CpuPool.html).\n The default [`Hasher`](struct.Hasher.html) does not have a cpu pool, which is\n only needed for the [`hash_non_blocking`](struct.Hasher.html#method.hash_non_blocking)\n and [`hash_raw_non_blocking`](struct.Hasher.html#method.hash_raw_non_blocking) methods.\n If you call either of these methods without a cpu pool, a default cpu pool will be created\n for you on the fly; so even if you never configure [`Hasher`](struct.Hasher.html) with\n this method you can still use the non-blocking hashing methods.\n The default cpu pool has as many threads as the number of logical cores on your machine\n","sig":null,"attributes":[{"value":"/ Allows you to configure [`Hasher`](struct.Hasher.html) with a custom","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":48238,"byte_end":48310,"line_start":125,"line_end":125,"column_start":5,"column_end":77}},{"value":"/ [`CpuPool`](https://docs.rs/futures-cpupool/0.1.8/futures_cpupool/struct.CpuPool.html).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":48315,"byte_end":48406,"line_start":126,"line_end":126,"column_start":5,"column_end":96}},{"value":"/ The default [`Hasher`](struct.Hasher.html) does not have a cpu pool, which is","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":48411,"byte_end":48492,"line_start":127,"line_end":127,"column_start":5,"column_end":86}},{"value":"/ only needed for the [`hash_non_blocking`](struct.Hasher.html#method.hash_non_blocking)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":48497,"byte_end":48587,"line_start":128,"line_end":128,"column_start":5,"column_end":95}},{"value":"/ and [`hash_raw_non_blocking`](struct.Hasher.html#method.hash_raw_non_blocking) methods.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":48592,"byte_end":48683,"line_start":129,"line_end":129,"column_start":5,"column_end":96}},{"value":"/ If you call either of these methods without a cpu pool, a default cpu pool will be created","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":48688,"byte_end":48782,"line_start":130,"line_end":130,"column_start":5,"column_end":99}},{"value":"/ for you on the fly; so even if you never configure [`Hasher`](struct.Hasher.html) with","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":48787,"byte_end":48877,"line_start":131,"line_end":131,"column_start":5,"column_end":95}},{"value":"/ this method you can still use the non-blocking hashing methods.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":48882,"byte_end":48949,"line_start":132,"line_end":132,"column_start":5,"column_end":72}},{"value":"/ The default cpu pool has as many threads as the number of logical cores on your machine","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":48954,"byte_end":49045,"line_start":133,"line_end":133,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":49470,"byte_end":49488,"line_start":143,"line_end":143,"column_start":12,"column_end":30},"name":"configure_hash_len","qualname":"<Hasher>::configure_hash_len","value":"pub fn configure_hash_len(&mut Self, u32) -> &mut Hasher","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Hasher`](struct.Hasher.html) to use a custom hash length\n (in number of bytes). The default is `32`.","sig":null,"attributes":[{"value":"/ Allows you to configure [`Hasher`](struct.Hasher.html) to use a custom hash length","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":49194,"byte_end":49280,"line_start":138,"line_end":138,"column_start":5,"column_end":91}},{"value":"/ (in number of bytes). The default is `32`.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":49285,"byte_end":49331,"line_start":139,"line_end":139,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":49336,"byte_end":49339,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ See [configuration example](index.html#configuration) for a more detailed discussion","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":49344,"byte_end":49432,"line_start":141,"line_end":141,"column_start":5,"column_end":93}},{"value":"/ of this parameter","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":49437,"byte_end":49458,"line_start":142,"line_end":142,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":49848,"byte_end":49868,"line_start":151,"line_end":151,"column_start":12,"column_end":32},"name":"configure_iterations","qualname":"<Hasher>::configure_iterations","value":"pub fn configure_iterations(&mut Self, u32) -> &mut Hasher","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Hasher`](struct.Hasher.html) to use a custom number of\n iterations. The default is `192`.","sig":null,"attributes":[{"value":"/ Allows you to configure [`Hasher`](struct.Hasher.html) to use a custom number of","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":49603,"byte_end":49687,"line_start":147,"line_end":147,"column_start":5,"column_end":89}},{"value":"/ iterations. The default is `192`.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":49692,"byte_end":49729,"line_start":148,"line_end":148,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":49734,"byte_end":49737,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ See [configuration example](index.html#configuration) for a more details on this parameter","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":49742,"byte_end":49836,"line_start":150,"line_end":150,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":50268,"byte_end":50283,"line_start":159,"line_end":159,"column_start":12,"column_end":27},"name":"configure_lanes","qualname":"<Hasher>::configure_lanes","value":"pub fn configure_lanes(&mut Self, u32) -> &mut Hasher","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Hasher`](struct.Hasher.html) to use a custom number of\n lanes. The default is the number of physical cores on your machine.","sig":null,"attributes":[{"value":"/ Allows you to configure [`Hasher`](struct.Hasher.html) to use a custom number of","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":49989,"byte_end":50073,"line_start":155,"line_end":155,"column_start":5,"column_end":89}},{"value":"/ lanes. The default is the number of physical cores on your machine.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":50078,"byte_end":50149,"line_start":156,"line_end":156,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":50154,"byte_end":50157,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ See [configuration example](index.html#configuration) for a more details on this parameter","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":50162,"byte_end":50256,"line_start":158,"line_end":158,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":50641,"byte_end":50662,"line_start":167,"line_end":167,"column_start":12,"column_end":33},"name":"configure_memory_size","qualname":"<Hasher>::configure_memory_size","value":"pub fn configure_memory_size(&mut Self, u32) -> &mut Hasher","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Hasher`](struct.Hasher.html) to use a custom memory size\n (in kibibytes). The default is `4096`.","sig":null,"attributes":[{"value":"/ Allows you to configure [`Hasher`](struct.Hasher.html) to use a custom memory size","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":50389,"byte_end":50475,"line_start":163,"line_end":163,"column_start":5,"column_end":91}},{"value":"/ (in kibibytes). The default is `4096`.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":50480,"byte_end":50522,"line_start":164,"line_end":164,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":50527,"byte_end":50530,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ See [configuration example](index.html#configuration) for a more details on this parameter","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":50535,"byte_end":50629,"line_start":166,"line_end":166,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":51584,"byte_end":51611,"line_start":182,"line_end":182,"column_start":12,"column_end":39},"name":"configure_password_clearing","qualname":"<Hasher>::configure_password_clearing","value":"pub fn configure_password_clearing(&mut Self, bool) -> &mut Hasher","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Hasher`](struct.Hasher.html) to erase the password bytes\n after each call to [`hash`](struct.Hasher.html#method.hash),\n [`hash_raw`](struct.Hasher#method.hash_raw), or their non-blocking equivalents.\n The default is to <b>not</b> clear out the password\n bytes (i.e. `false`). If you set this option to `true`, you must provide\n [`Hasher`](struct.Hasher.html) with a mutable password, e.g. a password\n constructed from a `String`, `Vec<u8>`, `&mut str`, `&mut [u8]`, etc. as opposed to\n one constructed from a `&str`, `&[u8]`, etc., or else hashing will return an\n [`Error`](struct.Error.html).","sig":null,"attributes":[{"value":"/ Allows you to configure [`Hasher`](struct.Hasher.html) to erase the password bytes","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":50786,"byte_end":50872,"line_start":171,"line_end":171,"column_start":5,"column_end":91}},{"value":"/ after each call to [`hash`](struct.Hasher.html#method.hash),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":50877,"byte_end":50941,"line_start":172,"line_end":172,"column_start":5,"column_end":69}},{"value":"/ [`hash_raw`](struct.Hasher#method.hash_raw), or their non-blocking equivalents.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":50946,"byte_end":51029,"line_start":173,"line_end":173,"column_start":5,"column_end":88}},{"value":"/ The default is to <b>not</b> clear out the password","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":51034,"byte_end":51089,"line_start":174,"line_end":174,"column_start":5,"column_end":60}},{"value":"/ bytes (i.e. `false`). If you set this option to `true`, you must provide","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":51094,"byte_end":51170,"line_start":175,"line_end":175,"column_start":5,"column_end":81}},{"value":"/ [`Hasher`](struct.Hasher.html) with a mutable password, e.g. a password","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":51175,"byte_end":51250,"line_start":176,"line_end":176,"column_start":5,"column_end":80}},{"value":"/ constructed from a `String`, `Vec<u8>`, `&mut str`, `&mut [u8]`, etc. as opposed to","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":51255,"byte_end":51342,"line_start":177,"line_end":177,"column_start":5,"column_end":92}},{"value":"/ one constructed from a `&str`, `&[u8]`, etc., or else hashing will return an","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":51347,"byte_end":51427,"line_start":178,"line_end":178,"column_start":5,"column_end":85}},{"value":"/ [`Error`](struct.Error.html).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":51432,"byte_end":51465,"line_start":179,"line_end":179,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":51470,"byte_end":51473,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ See [configuration example](index.html#configuration) for a more details on this parameter","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":51478,"byte_end":51572,"line_start":181,"line_end":181,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":52540,"byte_end":52569,"line_start":197,"line_end":197,"column_start":12,"column_end":41},"name":"configure_secret_key_clearing","qualname":"<Hasher>::configure_secret_key_clearing","value":"pub fn configure_secret_key_clearing(&mut Self, bool) -> &mut Hasher","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Hasher`](struct.Hasher.html) to erase the secret key bytes\n after each call to [`hash`](struct.Hasher.html#method.hash),\n [`hash_raw`](struct.Hasher#method.hash_raw), or their non-blocking equivalents.\n The default is to <b>not</b> clear out the secret key\n bytes (i.e. `false`). If you set this option to `true`, you must provide\n [`Hasher`](struct.Hasher.html) with a mutable secret key, e.g. a secret key\n constructed from a `String`, `Vec<u8>`, `&mut str`, `&mut [u8]`, etc. as opposed to\n one constructed from a `&str`, `&[u8]`, etc., or else hashing will return an\n [`Error`](struct.Error.html).","sig":null,"attributes":[{"value":"/ Allows you to configure [`Hasher`](struct.Hasher.html) to erase the secret key bytes","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":51734,"byte_end":51822,"line_start":186,"line_end":186,"column_start":5,"column_end":93}},{"value":"/ after each call to [`hash`](struct.Hasher.html#method.hash),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":51827,"byte_end":51891,"line_start":187,"line_end":187,"column_start":5,"column_end":69}},{"value":"/ [`hash_raw`](struct.Hasher#method.hash_raw), or their non-blocking equivalents.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":51896,"byte_end":51979,"line_start":188,"line_end":188,"column_start":5,"column_end":88}},{"value":"/ The default is to <b>not</b> clear out the secret key","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":51984,"byte_end":52041,"line_start":189,"line_end":189,"column_start":5,"column_end":62}},{"value":"/ bytes (i.e. `false`). If you set this option to `true`, you must provide","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":52046,"byte_end":52122,"line_start":190,"line_end":190,"column_start":5,"column_end":81}},{"value":"/ [`Hasher`](struct.Hasher.html) with a mutable secret key, e.g. a secret key","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":52127,"byte_end":52206,"line_start":191,"line_end":191,"column_start":5,"column_end":84}},{"value":"/ constructed from a `String`, `Vec<u8>`, `&mut str`, `&mut [u8]`, etc. as opposed to","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":52211,"byte_end":52298,"line_start":192,"line_end":192,"column_start":5,"column_end":92}},{"value":"/ one constructed from a `&str`, `&[u8]`, etc., or else hashing will return an","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":52303,"byte_end":52383,"line_start":193,"line_end":193,"column_start":5,"column_end":85}},{"value":"/ [`Error`](struct.Error.html).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":52388,"byte_end":52421,"line_start":194,"line_end":194,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":52426,"byte_end":52429,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ See [configuration example](index.html#configuration) for a more details on this parameter","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":52434,"byte_end":52528,"line_start":196,"line_end":196,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":53135,"byte_end":53152,"line_start":207,"line_end":207,"column_start":12,"column_end":29},"name":"configure_threads","qualname":"<Hasher>::configure_threads","value":"pub fn configure_threads(&mut Self, u32) -> &mut Hasher","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Hasher`](struct.Hasher.html) to use a custom number of\n threads. The default is the number of physical cores on your machine. If you choose\n a number of threads that is greater than the lanes configuration,\n [`Hasher`](struct.Hasher.html) will use the minimum of the two.","sig":null,"attributes":[{"value":"/ Allows you to configure [`Hasher`](struct.Hasher.html) to use a custom number of","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":52694,"byte_end":52778,"line_start":201,"line_end":201,"column_start":5,"column_end":89}},{"value":"/ threads. The default is the number of physical cores on your machine. If you choose","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":52783,"byte_end":52870,"line_start":202,"line_end":202,"column_start":5,"column_end":92}},{"value":"/ a number of threads that is greater than the lanes configuration,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":52875,"byte_end":52944,"line_start":203,"line_end":203,"column_start":5,"column_end":74}},{"value":"/ [`Hasher`](struct.Hasher.html) will use the minimum of the two.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":52949,"byte_end":53016,"line_start":204,"line_end":204,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":53021,"byte_end":53024,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ See [configuration example](index.html#configuration) for a more details on this parameter","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":53029,"byte_end":53123,"line_start":206,"line_end":206,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":53652,"byte_end":53669,"line_start":216,"line_end":216,"column_start":12,"column_end":29},"name":"configure_variant","qualname":"<Hasher>::configure_variant","value":"pub fn configure_variant(&mut Self, Variant) -> &mut Hasher","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Hasher`](struct.Hasher.html) to use a custom Argon2\n variant. The default is [`Variant::Argon2id`](config/enum.Variant.html#variant.Argon2id).\n Do <b>not</b> use a different variant unless you have a specific reason to do so.","sig":null,"attributes":[{"value":"/ Allows you to configure [`Hasher`](struct.Hasher.html) to use a custom Argon2","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":53264,"byte_end":53345,"line_start":211,"line_end":211,"column_start":5,"column_end":86}},{"value":"/ variant. The default is [`Variant::Argon2id`](config/enum.Variant.html#variant.Argon2id).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":53350,"byte_end":53443,"line_start":212,"line_end":212,"column_start":5,"column_end":98}},{"value":"/ Do <b>not</b> use a different variant unless you have a specific reason to do so.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":53448,"byte_end":53533,"line_start":213,"line_end":213,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":53538,"byte_end":53541,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ See [configuration example](index.html#configuration) for a more details on this parameter","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":53546,"byte_end":53640,"line_start":215,"line_end":215,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":54199,"byte_end":54216,"line_start":226,"line_end":226,"column_start":12,"column_end":29},"name":"configure_version","qualname":"<Hasher>::configure_version","value":"pub fn configure_version(&mut Self, Version) -> &mut Hasher","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Hasher`](struct.Hasher.html) to use a custom Argon2 version.\n The default and latest (as of 5/18) is\n [`Version::_0x13`](config/enum.Version.html#variant._0x13).\n Do <b>not</b> use a different version unless you have a specific reason to do so.","sig":null,"attributes":[{"value":"/ Allows you to configure [`Hasher`](struct.Hasher.html) to use a custom Argon2 version.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":53785,"byte_end":53875,"line_start":220,"line_end":220,"column_start":5,"column_end":95}},{"value":"/ The default and latest (as of 5/18) is","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":53880,"byte_end":53922,"line_start":221,"line_end":221,"column_start":5,"column_end":47}},{"value":"/ [`Version::_0x13`](config/enum.Version.html#variant._0x13).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":53927,"byte_end":53990,"line_start":222,"line_end":222,"column_start":5,"column_end":68}},{"value":"/ Do <b>not</b> use a different version unless you have a specific reason to do so.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":53995,"byte_end":54080,"line_start":223,"line_end":223,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":54085,"byte_end":54088,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ See [configuration example](index.html#configuration) for a more details on this parameter","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":54093,"byte_end":54187,"line_start":225,"line_end":225,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":55023,"byte_end":55027,"line_start":241,"line_end":241,"column_start":12,"column_end":16},"name":"hash","qualname":"<Hasher>::hash","value":"pub fn hash(&mut Self) -> Result<String, Error>","parent":null,"children":[],"decl_id":null,"docs":" <b><u>The primary method (blocking version).</u></b>","sig":null,"attributes":[{"value":"/ <b><u>The primary method (blocking version).</u></b>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":54332,"byte_end":54388,"line_start":230,"line_end":230,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":54393,"byte_end":54396,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ After you have configured a [`Hasher`](struct.Hasher.html) to your liking and provided","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":54401,"byte_end":54491,"line_start":232,"line_end":232,"column_start":5,"column_end":95}},{"value":"/ it will all the data you would like to hash, e.g.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":54496,"byte_end":54549,"line_start":233,"line_end":233,"column_start":5,"column_end":58}},{"value":"/ * a [`Password`](input/struct.Password.html),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":54554,"byte_end":54603,"line_start":234,"line_end":234,"column_start":5,"column_end":54}},{"value":"/ * a [`Salt`](input/struct.Password.html) (note: it is recommened you use the default random salt),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":54608,"byte_end":54710,"line_start":235,"line_end":235,"column_start":5,"column_end":107}},{"value":"/ * a [`SecretKey`](input/struct.SecretKey.html),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":54715,"byte_end":54766,"line_start":236,"line_end":236,"column_start":5,"column_end":56}},{"value":"/ * [`AdditionalData`](input/struct.AdditionalData.html) (optional),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":54771,"byte_end":54841,"line_start":237,"line_end":237,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":54846,"byte_end":54849,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ call this method in order to produce a string-encoded hash, which is safe to store in a","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":54854,"byte_end":54945,"line_start":239,"line_end":239,"column_start":5,"column_end":96}},{"value":"/ database and against which you can verify passwords later","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":54950,"byte_end":55011,"line_start":240,"line_end":240,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":55505,"byte_end":55522,"line_start":251,"line_end":251,"column_start":12,"column_end":29},"name":"hash_non_blocking","qualname":"<Hasher>::hash_non_blocking","value":"pub fn hash_non_blocking(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" <b><u>The primary method (non-blocking version).</u></b>","sig":null,"attributes":[{"value":"/ <b><u>The primary method (non-blocking version).</u></b>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":55177,"byte_end":55237,"line_start":246,"line_end":246,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":55242,"byte_end":55245,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ Same as [`hash`](struct.Hasher.html#method.hash) except it returns a","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":55250,"byte_end":55322,"line_start":248,"line_end":248,"column_start":5,"column_end":77}},{"value":"/ [`Future`](https://docs.rs/futures/0.1.21/futures/future/trait.Future.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":55327,"byte_end":55406,"line_start":249,"line_end":249,"column_start":5,"column_end":84}},{"value":"/ instead of a [`Result`](https://doc.rust-lang.org/std/result/enum.Result.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":55411,"byte_end":55493,"line_start":250,"line_end":250,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":56185,"byte_end":56193,"line_start":262,"line_end":262,"column_start":12,"column_end":20},"name":"hash_raw","qualname":"<Hasher>::hash_raw","value":"pub fn hash_raw(&mut Self) -> Result<HashRaw, Error>","parent":null,"children":[],"decl_id":null,"docs":" Like the [`hash`](struct.Hasher.html#method.hash) method, but instead of producing\n an string-encoded hash, it produces a [`HashRaw`](output/struct.HashRaw.html) struct\n that contains all the components of the string-encoded version, including the raw\n hash bytes and the raw salt bytes. In general, you should prefer to use the\n [`hash`](struct.Hasher.html#method.hash) method instead of this method\n","sig":null,"attributes":[{"value":"/ Like the [`hash`](struct.Hasher.html#method.hash) method, but instead of producing","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":55741,"byte_end":55827,"line_start":257,"line_end":257,"column_start":5,"column_end":91}},{"value":"/ an string-encoded hash, it produces a [`HashRaw`](output/struct.HashRaw.html) struct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":55832,"byte_end":55920,"line_start":258,"line_end":258,"column_start":5,"column_end":93}},{"value":"/ that contains all the components of the string-encoded version, including the raw","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":55925,"byte_end":56010,"line_start":259,"line_end":259,"column_start":5,"column_end":90}},{"value":"/ hash bytes and the raw salt bytes. In general, you should prefer to use the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":56015,"byte_end":56094,"line_start":260,"line_end":260,"column_start":5,"column_end":84}},{"value":"/ [`hash`](struct.Hasher.html#method.hash) method instead of this method","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":56099,"byte_end":56173,"line_start":261,"line_end":261,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":56885,"byte_end":56906,"line_start":277,"line_end":277,"column_start":12,"column_end":33},"name":"hash_raw_non_blocking","qualname":"<Hasher>::hash_raw_non_blocking","value":"pub fn hash_raw_non_blocking(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Same as [`hash_raw`](struct.Hasher.html#method.hash) except it returns a\n [`Future`](https://docs.rs/futures/0.1.21/futures/future/trait.Future.html)\n instead of a [`Result`](https://doc.rust-lang.org/std/result/enum.Result.html)\n","sig":null,"attributes":[{"value":"/ Same as [`hash_raw`](struct.Hasher.html#method.hash) except it returns a","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":56626,"byte_end":56702,"line_start":274,"line_end":274,"column_start":5,"column_end":81}},{"value":"/ [`Future`](https://docs.rs/futures/0.1.21/futures/future/trait.Future.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":56707,"byte_end":56786,"line_start":275,"line_end":275,"column_start":5,"column_end":84}},{"value":"/ instead of a [`Result`](https://doc.rust-lang.org/std/result/enum.Result.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":56791,"byte_end":56873,"line_start":276,"line_end":276,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":57854,"byte_end":57875,"line_start":296,"line_end":296,"column_start":12,"column_end":33},"name":"opt_out_of_secret_key","qualname":"<Hasher>::opt_out_of_secret_key","value":"pub fn opt_out_of_secret_key(&mut Self, bool) -> &mut Hasher","parent":null,"children":[],"decl_id":null,"docs":" As an extra security measure, if you want to hash without a secret key, which\n is not recommended, you must explicitly declare that this is your intention\n by calling this method and setting the `opt_out_of_secret_key` configuration to\n `true` (by default, it is set to `false`); otherwise hashing will return an error\n when you fail to provide a secret key\n","sig":null,"attributes":[{"value":"/ As an extra security measure, if you want to hash without a secret key, which","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":57453,"byte_end":57534,"line_start":291,"line_end":291,"column_start":5,"column_end":86}},{"value":"/ is not recommended, you must explicitly declare that this is your intention","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":57539,"byte_end":57618,"line_start":292,"line_end":292,"column_start":5,"column_end":84}},{"value":"/ by calling this method and setting the `opt_out_of_secret_key` configuration to","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":57623,"byte_end":57706,"line_start":293,"line_end":293,"column_start":5,"column_end":88}},{"value":"/ `true` (by default, it is set to `false`); otherwise hashing will return an error","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":57711,"byte_end":57796,"line_start":294,"line_end":294,"column_start":5,"column_end":90}},{"value":"/ when you fail to provide a secret key","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":57801,"byte_end":57842,"line_start":295,"line_end":295,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":58242,"byte_end":58250,"line_start":303,"line_end":303,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<Hasher>::to_owned","value":"pub fn to_owned(&Self) -> Hasher","parent":null,"children":[],"decl_id":null,"docs":" Clones the [`Hasher`](struct.Hasher.html), returning a new\n [`Hasher`](struct.Hasher.html) with a `static` lifetime. Use this method if you\n would like to move a [`Hasher`](struct.Hasher.html) to another thread\n","sig":null,"attributes":[{"value":"/ Clones the [`Hasher`](struct.Hasher.html), returning a new","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":58002,"byte_end":58064,"line_start":300,"line_end":300,"column_start":5,"column_end":67}},{"value":"/ [`Hasher`](struct.Hasher.html) with a `static` lifetime. Use this method if you","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":58069,"byte_end":58152,"line_start":301,"line_end":301,"column_start":5,"column_end":88}},{"value":"/ would like to move a [`Hasher`](struct.Hasher.html) to another thread","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":58157,"byte_end":58230,"line_start":302,"line_end":302,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":59502,"byte_end":59522,"line_start":327,"line_end":327,"column_start":12,"column_end":32},"name":"with_additional_data","qualname":"<Hasher>::with_additional_data","value":"pub fn with_additional_data<AD>(&mut Self, AD) -> &mut Hasher where\nAD: Into<AdditionalData>","parent":null,"children":[],"decl_id":null,"docs":" Allows you to add some additional data to the [`Hasher`](struct.Hasher.html)\n that will be hashed alongside the [`Password`](input/struct.Password.html) and\n other pieces of data you would like to hash (i.e. the [`Salt`](input/struct.Salt.html) and\n an optional [`SecretKey`](input/struct.SecretKey.html)).","sig":null,"attributes":[{"value":"/ Allows you to add some additional data to the [`Hasher`](struct.Hasher.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":58712,"byte_end":58792,"line_start":317,"line_end":317,"column_start":5,"column_end":85}},{"value":"/ that will be hashed alongside the [`Password`](input/struct.Password.html) and","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":58797,"byte_end":58879,"line_start":318,"line_end":318,"column_start":5,"column_end":87}},{"value":"/ other pieces of data you would like to hash (i.e. the [`Salt`](input/struct.Salt.html) and","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":58884,"byte_end":58978,"line_start":319,"line_end":319,"column_start":5,"column_end":99}},{"value":"/ an optional [`SecretKey`](input/struct.SecretKey.html)).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":58983,"byte_end":59043,"line_start":320,"line_end":320,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":59048,"byte_end":59051,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ Including additional data in your hash is not very common; so it is unlikely you will","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":59056,"byte_end":59145,"line_start":322,"line_end":322,"column_start":5,"column_end":94}},{"value":"/ need to use this method. If, however, you do add additional data, note that it is like","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":59150,"byte_end":59240,"line_start":323,"line_end":323,"column_start":5,"column_end":95}},{"value":"/ a secret key in that it will be required later in order to verify passwords, and","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":59245,"byte_end":59329,"line_start":324,"line_end":324,"column_start":5,"column_end":89}},{"value":"/ it is not stored in the string-encoded version of the hash, meaning you will have to","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":59334,"byte_end":59422,"line_start":325,"line_end":325,"column_start":5,"column_end":93}},{"value":"/ provide it manually to a [`Verifier`](struct.Verifier.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":59427,"byte_end":59490,"line_start":326,"line_end":326,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":60043,"byte_end":60056,"line_start":338,"line_end":338,"column_start":12,"column_end":25},"name":"with_password","qualname":"<Hasher>::with_password","value":"pub fn with_password<P>(&mut Self, P) -> &mut Hasher where P: Into<Password>","parent":null,"children":[],"decl_id":null,"docs":" Allows you to provide a [`Hasher`](struct.Hasher.html) with the password you would like\n to hash. Hashing requires a password; so you must call this method before calling\n [`hash`](struct.Hasher.html#method.hash), [`hash_raw`](struct.Hasher.html#method.hash_raw),\n or their non-blocking version\n","sig":null,"attributes":[{"value":"/ Allows you to provide a [`Hasher`](struct.Hasher.html) with the password you would like","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":59712,"byte_end":59803,"line_start":334,"line_end":334,"column_start":5,"column_end":96}},{"value":"/ to hash. Hashing requires a password; so you must call this method before calling","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":59808,"byte_end":59893,"line_start":335,"line_end":335,"column_start":5,"column_end":90}},{"value":"/ [`hash`](struct.Hasher.html#method.hash), [`hash_raw`](struct.Hasher.html#method.hash_raw),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":59898,"byte_end":59993,"line_start":336,"line_end":336,"column_start":5,"column_end":100}},{"value":"/ or their non-blocking version","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":59998,"byte_end":60031,"line_start":337,"line_end":337,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":60822,"byte_end":60831,"line_start":353,"line_end":353,"column_start":12,"column_end":21},"name":"with_salt","qualname":"<Hasher>::with_salt","value":"pub fn with_salt<S>(&mut Self, S) -> &mut Hasher where S: Into<Salt>","parent":null,"children":[],"decl_id":null,"docs":" Allows you to provide [`Hasher`](struct.Hasher.html) with a custom\n [`Salt`](input/struct.Salt.html) to include in the hash. The default\n [`Hasher`](struct.Hasher.html) is configured to use a random\n [`Salt`](input/struct.Salt.html) of 32 bytes; so there is no need\n to call this method. If you would like to use a random\n [`Salt`](input/struct.Salt.html) of different length, you can call this method with\n `Salt::random(your_custom_length_in_bytes)`. Using a deterministic\n [`Salt`](input/struct.Salt.html) is possible, but discouraged\n","sig":null,"attributes":[{"value":"/ Allows you to provide [`Hasher`](struct.Hasher.html) with a custom","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":60220,"byte_end":60290,"line_start":345,"line_end":345,"column_start":5,"column_end":75}},{"value":"/ [`Salt`](input/struct.Salt.html) to include in the hash. The default","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":60295,"byte_end":60367,"line_start":346,"line_end":346,"column_start":5,"column_end":77}},{"value":"/ [`Hasher`](struct.Hasher.html) is configured to use a random","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":60372,"byte_end":60436,"line_start":347,"line_end":347,"column_start":5,"column_end":69}},{"value":"/ [`Salt`](input/struct.Salt.html) of 32 bytes; so there is no need","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":60441,"byte_end":60510,"line_start":348,"line_end":348,"column_start":5,"column_end":74}},{"value":"/ to call this method. If you would like to use a random","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":60515,"byte_end":60573,"line_start":349,"line_end":349,"column_start":5,"column_end":63}},{"value":"/ [`Salt`](input/struct.Salt.html) of different length, you can call this method with","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":60578,"byte_end":60665,"line_start":350,"line_end":350,"column_start":5,"column_end":92}},{"value":"/ `Salt::random(your_custom_length_in_bytes)`. Using a deterministic","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":60670,"byte_end":60740,"line_start":351,"line_end":351,"column_start":5,"column_end":75}},{"value":"/ [`Salt`](input/struct.Salt.html) is possible, but discouraged","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":60745,"byte_end":60810,"line_start":352,"line_end":352,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":61392,"byte_end":61407,"line_start":365,"line_end":365,"column_start":12,"column_end":27},"name":"with_secret_key","qualname":"<Hasher>::with_secret_key","value":"pub fn with_secret_key<SK>(&mut Self, SK) -> &mut Hasher where\nSK: Into<SecretKey>","parent":null,"children":[],"decl_id":null,"docs":" Allows you to provide [`Hasher`](struct.Hasher.html) with a secret key that will be used\n to create the hash. The secret key will not be included in the hash output, meaning you\n must save it somewhere (ideally outside your code) to use later, as the only way to\n verify passwords against the hash later is to know the secret key. This library\n encourages the use of a secret key\n","sig":null,"attributes":[{"value":"/ Allows you to provide [`Hasher`](struct.Hasher.html) with a secret key that will be used","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":60969,"byte_end":61061,"line_start":360,"line_end":360,"column_start":5,"column_end":97}},{"value":"/ to create the hash. The secret key will not be included in the hash output, meaning you","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":61066,"byte_end":61157,"line_start":361,"line_end":361,"column_start":5,"column_end":96}},{"value":"/ must save it somewhere (ideally outside your code) to use later, as the only way to","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":61162,"byte_end":61249,"line_start":362,"line_end":362,"column_start":5,"column_end":92}},{"value":"/ verify passwords against the hash later is to know the secret key. This library","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":61254,"byte_end":61337,"line_start":363,"line_end":363,"column_start":5,"column_end":88}},{"value":"/ encourages the use of a secret key","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":61342,"byte_end":61380,"line_start":364,"line_end":364,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":61722,"byte_end":61737,"line_start":374,"line_end":374,"column_start":12,"column_end":27},"name":"additional_data","qualname":"<Hasher>::additional_data","value":"pub fn additional_data(&Self) -> Option<&AdditionalData>","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the [`Hasher`](struct.Hasher.html)'s\n [`AdditionalData`](input/struct.AdditionalData.html), if any\n","sig":null,"attributes":[{"value":"/ Read-only access to the [`Hasher`](struct.Hasher.html)'s","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":61581,"byte_end":61641,"line_start":372,"line_end":372,"column_start":5,"column_end":65}},{"value":"/ [`AdditionalData`](input/struct.AdditionalData.html), if any","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":61646,"byte_end":61710,"line_start":373,"line_end":373,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":61952,"byte_end":61958,"line_start":379,"line_end":379,"column_start":12,"column_end":18},"name":"config","qualname":"<Hasher>::config","value":"pub fn config(&Self) -> &HasherConfig","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the [`Hasher`](struct.Hasher.html)'s\n [`HasherConfig`](config/struct.HasherConfig.html)\n","sig":null,"attributes":[{"value":"/ Read-only access to the [`Hasher`](struct.Hasher.html)'s","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":61822,"byte_end":61882,"line_start":377,"line_end":377,"column_start":5,"column_end":65}},{"value":"/ [`HasherConfig`](config/struct.HasherConfig.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":61887,"byte_end":61940,"line_start":378,"line_end":378,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":62145,"byte_end":62153,"line_start":384,"line_end":384,"column_start":12,"column_end":20},"name":"password","qualname":"<Hasher>::password","value":"pub fn password(&Self) -> Option<&Password>","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the [`Hasher`](struct.Hasher.html)'s\n [`Password`](input/struct.Password.html), if any\n","sig":null,"attributes":[{"value":"/ Read-only access to the [`Hasher`](struct.Hasher.html)'s","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":62016,"byte_end":62076,"line_start":382,"line_end":382,"column_start":5,"column_end":65}},{"value":"/ [`Password`](input/struct.Password.html), if any","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":62081,"byte_end":62133,"line_start":383,"line_end":383,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":62334,"byte_end":62338,"line_start":388,"line_end":388,"column_start":12,"column_end":16},"name":"salt","qualname":"<Hasher>::salt","value":"pub fn salt(&Self) -> &Salt","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the [`Hasher`](struct.Hasher.html)'s [`Salt`](input/struct.Salt.html)\n","sig":null,"attributes":[{"value":"/ Read-only access to the [`Hasher`](struct.Hasher.html)'s [`Salt`](input/struct.Salt.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":62229,"byte_end":62322,"line_start":387,"line_end":387,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":62517,"byte_end":62527,"line_start":393,"line_end":393,"column_start":12,"column_end":22},"name":"secret_key","qualname":"<Hasher>::secret_key","value":"pub fn secret_key(&Self) -> Option<&SecretKey>","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the [`Hasher`](struct.Hasher.html)'s\n [`SecretKey`](input/struct.SecretKey.html), if any\n","sig":null,"attributes":[{"value":"/ Read-only access to the [`Hasher`](struct.Hasher.html)'s","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":62386,"byte_end":62446,"line_start":391,"line_end":391,"column_start":5,"column_end":65}},{"value":"/ [`SecretKey`](input/struct.SecretKey.html), if any","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":62451,"byte_end":62505,"line_start":392,"line_end":392,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1368},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":73384,"byte_end":73392,"line_start":39,"line_end":39,"column_start":12,"column_end":20},"name":"Verifier","qualname":"::verifier::Verifier","value":"Verifier {  }","parent":null,"children":[{"krate":0,"index":1370},{"krate":0,"index":1371}],"decl_id":null,"docs":" <b><u>One of the two main structs.</u></b> Use it to verify passwords against hashes\n","sig":null,"attributes":[{"value":"/ <b><u>One of the two main structs.</u></b> Use it to verify passwords against hashes","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":73140,"byte_end":73228,"line_start":35,"line_end":35,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":74169,"byte_end":74172,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<Verifier>::new","value":"pub fn new() -> Verifier","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Verifier`](struct.Verifier.html) with the following configuration:\n * `backend`: [`Backend::C`](config/enum.Backend.html#variant.C)\n * `cpu_pool`: A [`CpuPool`](https://docs.rs/futures-cpupool/0.1.8/futures_cpupool/struct.CpuPool.html) ...\n     * with threads equal to the number of logical cores on your machine\n     * that is lazily created, i.e. created only if / when you call the method that\n       needs it ([`verify_non_blocking`](struct.Verifier.html#method.verify_non_blocking))\n * `password_clearing`: `false`\n * `secret_key_clearing`: `false`\n * `threads`: The number of logical cores on your machine\n","sig":null,"attributes":[{"value":"/ Creates a new [`Verifier`](struct.Verifier.html) with the following configuration:","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":73470,"byte_end":73556,"line_start":45,"line_end":45,"column_start":5,"column_end":91}},{"value":"/ * `backend`: [`Backend::C`](config/enum.Backend.html#variant.C)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":73561,"byte_end":73628,"line_start":46,"line_end":46,"column_start":5,"column_end":72}},{"value":"/ * `cpu_pool`: A [`CpuPool`](https://docs.rs/futures-cpupool/0.1.8/futures_cpupool/struct.CpuPool.html) ...","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":73633,"byte_end":73743,"line_start":47,"line_end":47,"column_start":5,"column_end":115}},{"value":"/     * with threads equal to the number of logical cores on your machine","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":73748,"byte_end":73823,"line_start":48,"line_end":48,"column_start":5,"column_end":80}},{"value":"/     * that is lazily created, i.e. created only if / when you call the method that","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":73828,"byte_end":73914,"line_start":49,"line_end":49,"column_start":5,"column_end":91}},{"value":"/       needs it ([`verify_non_blocking`](struct.Verifier.html#method.verify_non_blocking))","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":73919,"byte_end":74012,"line_start":50,"line_end":50,"column_start":5,"column_end":98}},{"value":"/ * `password_clearing`: `false`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":74017,"byte_end":74051,"line_start":51,"line_end":51,"column_start":5,"column_end":39}},{"value":"/ * `secret_key_clearing`: `false`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":74056,"byte_end":74092,"line_start":52,"line_end":52,"column_start":5,"column_end":41}},{"value":"/ * `threads`: The number of logical cores on your machine","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":74097,"byte_end":74157,"line_start":53,"line_end":53,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":74678,"byte_end":74695,"line_start":62,"line_end":62,"column_start":12,"column_end":29},"name":"configure_backend","qualname":"<Verifier>::configure_backend","value":"pub fn configure_backend(&mut Self, Backend) -> &mut Verifier","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Verifier`](struct.Verifier.html) with a custom backend. The\n default backend is [`Backend::C`](config/enum.Backend.html#variant.C), <i>which is\n currently the only backend supported. A Rust backend is planned, but is not currently\n available. If you configure a [`Verifier`](struct.Verifier.html) with\n [`Backend::Rust`](config/enum.Backend.html#variant.Rust) it will error</i>\n","sig":null,"attributes":[{"value":"/ Allows you to configure [`Verifier`](struct.Verifier.html) with a custom backend. The","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":74231,"byte_end":74320,"line_start":57,"line_end":57,"column_start":5,"column_end":94}},{"value":"/ default backend is [`Backend::C`](config/enum.Backend.html#variant.C), <i>which is","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":74325,"byte_end":74411,"line_start":58,"line_end":58,"column_start":5,"column_end":91}},{"value":"/ currently the only backend supported. A Rust backend is planned, but is not currently","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":74416,"byte_end":74505,"line_start":59,"line_end":59,"column_start":5,"column_end":94}},{"value":"/ available. If you configure a [`Verifier`](struct.Verifier.html) with","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":74510,"byte_end":74583,"line_start":60,"line_end":60,"column_start":5,"column_end":78}},{"value":"/ [`Backend::Rust`](config/enum.Backend.html#variant.Rust) it will error</i>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":74588,"byte_end":74666,"line_start":61,"line_end":61,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":75677,"byte_end":75695,"line_start":75,"line_end":75,"column_start":12,"column_end":30},"name":"configure_cpu_pool","qualname":"<Verifier>::configure_cpu_pool","value":"pub fn configure_cpu_pool(&mut Self, CpuPool) -> &mut Verifier","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Verifier`](struct.Verifier.html) with a custom\n [`CpuPool`](https://docs.rs/futures-cpupool/0.1.8/futures_cpupool/struct.CpuPool.html).\n The default [`Verifier`](struct.Verifier.html) does not have a cpu pool, which is\n only needed for the [`verify_non_blocking`](struct.Verifier.html#method.verify_non_blocking)\n method. If you call [`verify_non_blocking`](struct.Verifier.html#method.verify_non_blocking)\n without a cpu pool, a default cpu pool will be created for you on the fly; so even\n if you never configure [`Verifier`](struct.Verifier.html) with this method you can still\n use the [`verify_non_blocking`](struct.Verifier.html#method.verify_non_blocking) method.\n The default cpu pool has as many threads as the number of logical cores on your machine\n","sig":null,"attributes":[{"value":"/ Allows you to configure [`Verifier`](struct.Verifier.html) with a custom","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":74820,"byte_end":74896,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/ [`CpuPool`](https://docs.rs/futures-cpupool/0.1.8/futures_cpupool/struct.CpuPool.html).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":74901,"byte_end":74992,"line_start":67,"line_end":67,"column_start":5,"column_end":96}},{"value":"/ The default [`Verifier`](struct.Verifier.html) does not have a cpu pool, which is","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":74997,"byte_end":75082,"line_start":68,"line_end":68,"column_start":5,"column_end":90}},{"value":"/ only needed for the [`verify_non_blocking`](struct.Verifier.html#method.verify_non_blocking)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":75087,"byte_end":75183,"line_start":69,"line_end":69,"column_start":5,"column_end":101}},{"value":"/ method. If you call [`verify_non_blocking`](struct.Verifier.html#method.verify_non_blocking)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":75188,"byte_end":75284,"line_start":70,"line_end":70,"column_start":5,"column_end":101}},{"value":"/ without a cpu pool, a default cpu pool will be created for you on the fly; so even","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":75289,"byte_end":75375,"line_start":71,"line_end":71,"column_start":5,"column_end":91}},{"value":"/ if you never configure [`Verifier`](struct.Verifier.html) with this method you can still","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":75380,"byte_end":75472,"line_start":72,"line_end":72,"column_start":5,"column_end":97}},{"value":"/ use the [`verify_non_blocking`](struct.Verifier.html#method.verify_non_blocking) method.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":75477,"byte_end":75569,"line_start":73,"line_end":73,"column_start":5,"column_end":97}},{"value":"/ The default cpu pool has as many threads as the number of logical cores on your machine","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":75574,"byte_end":75665,"line_start":74,"line_end":74,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":76473,"byte_end":76500,"line_start":87,"line_end":87,"column_start":12,"column_end":39},"name":"configure_password_clearing","qualname":"<Verifier>::configure_password_clearing","value":"pub fn configure_password_clearing(&mut Self, bool) -> &mut Verifier","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Verifier`](struct.Verifier.html) to erase the password bytes\n after each call to [`verify`](struct.Verifier.html#method.verify)\n or its non-blocking equivalent. The default is to <b>not</b> clear out the password\n bytes (i.e. `false`). If you set this option to `true`, you must provide\n [`Verifier`](struct.Verifier.html) with a mutable password, e.g. a password\n constructed from a `String`, `Vec<u8>`, `&mut str`, `&mut [u8]`, etc. as opposed to\n one constructed from a `&str`, `&[u8]`, etc., or else verifying will return an\n [`Error`](struct.Error.html).\n","sig":null,"attributes":[{"value":"/ Allows you to configure [`Verifier`](struct.Verifier.html) to erase the password bytes","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":75823,"byte_end":75913,"line_start":79,"line_end":79,"column_start":5,"column_end":95}},{"value":"/ after each call to [`verify`](struct.Verifier.html#method.verify)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":75918,"byte_end":75987,"line_start":80,"line_end":80,"column_start":5,"column_end":74}},{"value":"/ or its non-blocking equivalent. The default is to <b>not</b> clear out the password","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":75992,"byte_end":76079,"line_start":81,"line_end":81,"column_start":5,"column_end":92}},{"value":"/ bytes (i.e. `false`). If you set this option to `true`, you must provide","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":76084,"byte_end":76160,"line_start":82,"line_end":82,"column_start":5,"column_end":81}},{"value":"/ [`Verifier`](struct.Verifier.html) with a mutable password, e.g. a password","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":76165,"byte_end":76244,"line_start":83,"line_end":83,"column_start":5,"column_end":84}},{"value":"/ constructed from a `String`, `Vec<u8>`, `&mut str`, `&mut [u8]`, etc. as opposed to","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":76249,"byte_end":76336,"line_start":84,"line_end":84,"column_start":5,"column_end":92}},{"value":"/ one constructed from a `&str`, `&[u8]`, etc., or else verifying will return an","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":76341,"byte_end":76423,"line_start":85,"line_end":85,"column_start":5,"column_end":87}},{"value":"/ [`Error`](struct.Error.html).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":76428,"byte_end":76461,"line_start":86,"line_end":86,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":77290,"byte_end":77319,"line_start":99,"line_end":99,"column_start":12,"column_end":41},"name":"configure_secret_key_clearing","qualname":"<Verifier>::configure_secret_key_clearing","value":"pub fn configure_secret_key_clearing(&mut Self, bool) -> &mut Verifier","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Verifier`](struct.Verifier.html) to erase the secret key bytes\n after each call to [`verify`](struct.Verifier.html#method.verify)\n or its non-blocking equivalent. The default is to <b>not</b> clear out the secret key\n bytes (i.e. `false`). If you set this option to `true`, you must provide\n [`Verifier`](struct.Verifier.html) with a mutable secret key, e.g. a secret key\n constructed from a `String`, `Vec<u8>`, `&mut str`, `&mut [u8]`, etc. as opposed to\n one constructed from a `&str`, `&[u8]`, etc., or else verifying will return an\n [`Error`](struct.Error.html).\n","sig":null,"attributes":[{"value":"/ Allows you to configure [`Verifier`](struct.Verifier.html) to erase the secret key bytes","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":76632,"byte_end":76724,"line_start":91,"line_end":91,"column_start":5,"column_end":97}},{"value":"/ after each call to [`verify`](struct.Verifier.html#method.verify)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":76729,"byte_end":76798,"line_start":92,"line_end":92,"column_start":5,"column_end":74}},{"value":"/ or its non-blocking equivalent. The default is to <b>not</b> clear out the secret key","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":76803,"byte_end":76892,"line_start":93,"line_end":93,"column_start":5,"column_end":94}},{"value":"/ bytes (i.e. `false`). If you set this option to `true`, you must provide","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":76897,"byte_end":76973,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ [`Verifier`](struct.Verifier.html) with a mutable secret key, e.g. a secret key","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":76978,"byte_end":77061,"line_start":95,"line_end":95,"column_start":5,"column_end":88}},{"value":"/ constructed from a `String`, `Vec<u8>`, `&mut str`, `&mut [u8]`, etc. as opposed to","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":77066,"byte_end":77153,"line_start":96,"line_end":96,"column_start":5,"column_end":92}},{"value":"/ one constructed from a `&str`, `&[u8]`, etc., or else verifying will return an","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":77158,"byte_end":77240,"line_start":97,"line_end":97,"column_start":5,"column_end":87}},{"value":"/ [`Error`](struct.Error.html).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":77245,"byte_end":77278,"line_start":98,"line_end":98,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":77808,"byte_end":77825,"line_start":107,"line_end":107,"column_start":12,"column_end":29},"name":"configure_threads","qualname":"<Verifier>::configure_threads","value":"pub fn configure_threads(&mut Self, u32) -> &mut Verifier","parent":null,"children":[],"decl_id":null,"docs":" Allows you to configure [`Verifier`](struct.Verifier.html) to use a custom number of\n threads. The default is the number of physical cores on your machine. If you choose\n a number of threads that is greater than the lanes configuration of your hash,\n [`Verifier`](struct.Verifier.html) will use the minimum of the two.\n","sig":null,"attributes":[{"value":"/ Allows you to configure [`Verifier`](struct.Verifier.html) to use a custom number of","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":77453,"byte_end":77541,"line_start":103,"line_end":103,"column_start":5,"column_end":93}},{"value":"/ threads. The default is the number of physical cores on your machine. If you choose","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":77546,"byte_end":77633,"line_start":104,"line_end":104,"column_start":5,"column_end":92}},{"value":"/ a number of threads that is greater than the lanes configuration of your hash,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":77638,"byte_end":77720,"line_start":105,"line_end":105,"column_start":5,"column_end":87}},{"value":"/ [`Verifier`](struct.Verifier.html) will use the minimum of the two.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":77725,"byte_end":77796,"line_start":106,"line_end":106,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":78198,"byte_end":78206,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<Verifier>::to_owned","value":"pub fn to_owned(&Self) -> Verifier","parent":null,"children":[],"decl_id":null,"docs":" Clones the [`Verifier`](struct.Verifier.html), returning a new\n [`Verifier`](struct.Verifier.html) with a `static` lifetime. Use this method if you\n would like to move a [`Verifier`](struct.Verifier.html) to another thread\n","sig":null,"attributes":[{"value":"/ Clones the [`Verifier`](struct.Verifier.html), returning a new","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":77946,"byte_end":78012,"line_start":111,"line_end":111,"column_start":5,"column_end":71}},{"value":"/ [`Verifier`](struct.Verifier.html) with a `static` lifetime. Use this method if you","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":78017,"byte_end":78104,"line_start":112,"line_end":112,"column_start":5,"column_end":92}},{"value":"/ would like to move a [`Verifier`](struct.Verifier.html) to another thread","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":78109,"byte_end":78186,"line_start":113,"line_end":113,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":79001,"byte_end":79007,"line_start":131,"line_end":131,"column_start":12,"column_end":18},"name":"verify","qualname":"<Verifier>::verify","value":"pub fn verify(&mut Self) -> Result<bool, Error>","parent":null,"children":[],"decl_id":null,"docs":" <b><u>The primary method (blocking version)</u></b>","sig":null,"attributes":[{"value":"/ <b><u>The primary method (blocking version)</u></b>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":78357,"byte_end":78412,"line_start":120,"line_end":120,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":78417,"byte_end":78420,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ After you have configured [`Verifier`](struct.Verifier.html) to your liking and provided","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":78425,"byte_end":78517,"line_start":122,"line_end":122,"column_start":5,"column_end":97}},{"value":"/ it will all the data it needs to verify a password, i.e.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":78522,"byte_end":78582,"line_start":123,"line_end":123,"column_start":5,"column_end":65}},{"value":"/ * a string-encoded hash or [`HashRaw`](output/struct.HashRaw.html),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":78587,"byte_end":78658,"line_start":124,"line_end":124,"column_start":5,"column_end":76}},{"value":"/ * a [`Password`](input/struct.Password.html),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":78663,"byte_end":78712,"line_start":125,"line_end":125,"column_start":5,"column_end":54}},{"value":"/ * a [`SecretKey`](input/struct.SecretKey.html) (if required),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":78717,"byte_end":78782,"line_start":126,"line_end":126,"column_start":5,"column_end":70}},{"value":"/ * [`AdditionalData`](input/struct.AdditionalData.html) (if required),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":78787,"byte_end":78860,"line_start":127,"line_end":127,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":78865,"byte_end":78868,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ call this method to verify that the password matches the hash or","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":78873,"byte_end":78941,"line_start":129,"line_end":129,"column_start":5,"column_end":73}},{"value":"/ [`HashRaw`](output/struct.HashRaw.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":78946,"byte_end":78989,"line_start":130,"line_end":130,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":81439,"byte_end":81458,"line_start":180,"line_end":180,"column_start":12,"column_end":31},"name":"verify_non_blocking","qualname":"<Verifier>::verify_non_blocking","value":"pub fn verify_non_blocking(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" <b><u>The primary method (non-blocking version)</u></b>","sig":null,"attributes":[{"value":"/ <b><u>The primary method (non-blocking version)</u></b>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":81106,"byte_end":81165,"line_start":175,"line_end":175,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":81170,"byte_end":81173,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Same as [`verify`](struct.Verifier.html#method.verify) except it returns a","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":81178,"byte_end":81256,"line_start":177,"line_end":177,"column_start":5,"column_end":83}},{"value":"/ [`Future`](https://docs.rs/futures/0.1.21/futures/future/trait.Future.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":81261,"byte_end":81340,"line_start":178,"line_end":178,"column_start":5,"column_end":84}},{"value":"/ instead of a [`Result`](https://doc.rust-lang.org/std/result/enum.Result.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":81345,"byte_end":81427,"line_start":179,"line_end":179,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":82178,"byte_end":82198,"line_start":194,"line_end":194,"column_start":12,"column_end":32},"name":"with_additional_data","qualname":"<Verifier>::with_additional_data","value":"pub fn with_additional_data<AD>(&mut Self, AD) -> &mut Verifier where\nAD: Into<AdditionalData>","parent":null,"children":[],"decl_id":null,"docs":" Allows you to provide [`Verifier`](struct.Verifier.html) with the additional data\n that was originally used to create the hash. Normally hashes are not created with\n additional data; so you are not likely to need this method\n","sig":null,"attributes":[{"value":"/ Allows you to provide [`Verifier`](struct.Verifier.html) with the additional data","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":81924,"byte_end":82009,"line_start":191,"line_end":191,"column_start":5,"column_end":90}},{"value":"/ that was originally used to create the hash. Normally hashes are not created with","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":82014,"byte_end":82099,"line_start":192,"line_end":192,"column_start":5,"column_end":90}},{"value":"/ additional data; so you are not likely to need this method","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":82104,"byte_end":82166,"line_start":193,"line_end":193,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":82752,"byte_end":82761,"line_start":206,"line_end":206,"column_start":12,"column_end":21},"name":"with_hash","qualname":"<Verifier>::with_hash","value":"pub fn with_hash<S>(&mut Self, S) -> &mut Verifier where S: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Allows you to provide [`Verifier`](struct.Verifier.html) with the hash to verify\n against (in the form of a string-encoded hash like those produced by the\n [`hash`](struct.Hasher.html#method.hash) or\n [`hash_non_blocking`](struct.Hasher.html#method.hash_non_blocking)\n methods on [`Hasher`](struct.Hasher.html))\n","sig":null,"attributes":[{"value":"/ Allows you to provide [`Verifier`](struct.Verifier.html) with the hash to verify","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":82397,"byte_end":82481,"line_start":201,"line_end":201,"column_start":5,"column_end":89}},{"value":"/ against (in the form of a string-encoded hash like those produced by the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":82486,"byte_end":82562,"line_start":202,"line_end":202,"column_start":5,"column_end":81}},{"value":"/ [`hash`](struct.Hasher.html#method.hash) or","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":82567,"byte_end":82614,"line_start":203,"line_end":203,"column_start":5,"column_end":52}},{"value":"/ [`hash_non_blocking`](struct.Hasher.html#method.hash_non_blocking)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":82619,"byte_end":82689,"line_start":204,"line_end":204,"column_start":5,"column_end":75}},{"value":"/ methods on [`Hasher`](struct.Hasher.html))","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":82694,"byte_end":82740,"line_start":205,"line_end":205,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":83321,"byte_end":83334,"line_start":218,"line_end":218,"column_start":12,"column_end":25},"name":"with_hash_raw","qualname":"<Verifier>::with_hash_raw","value":"pub fn with_hash_raw(&mut Self, &HashRaw) -> &mut Verifier","parent":null,"children":[],"decl_id":null,"docs":" Allows you to provide [`Verifier`](struct.Verifier.html) with the hash to verify\n against (in the form of a [`HashRaw`](output/struct.HashRaw.html) like those produced\n by the [`hash_raw`](struct.Hasher.html#method.hash_raw) or\n [`hash_raw_non_blocking`](struct.Hasher.html#method.hash_raw_non_blocking)\n methods on [`Hasher`](struct.Hasher.html))\n","sig":null,"attributes":[{"value":"/ Allows you to provide [`Verifier`](struct.Verifier.html) with the hash to verify","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":82930,"byte_end":83014,"line_start":213,"line_end":213,"column_start":5,"column_end":89}},{"value":"/ against (in the form of a [`HashRaw`](output/struct.HashRaw.html) like those produced","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":83019,"byte_end":83108,"line_start":214,"line_end":214,"column_start":5,"column_end":94}},{"value":"/ by the [`hash_raw`](struct.Hasher.html#method.hash_raw) or","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":83113,"byte_end":83175,"line_start":215,"line_end":215,"column_start":5,"column_end":67}},{"value":"/ [`hash_raw_non_blocking`](struct.Hasher.html#method.hash_raw_non_blocking)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":83180,"byte_end":83258,"line_start":216,"line_end":216,"column_start":5,"column_end":83}},{"value":"/ methods on [`Hasher`](struct.Hasher.html))","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":83263,"byte_end":83309,"line_start":217,"line_end":217,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":83577,"byte_end":83590,"line_start":224,"line_end":224,"column_start":12,"column_end":25},"name":"with_password","qualname":"<Verifier>::with_password","value":"pub fn with_password<P>(&mut Self, P) -> &mut Verifier where P: Into<Password>","parent":null,"children":[],"decl_id":null,"docs":" Allows you to provide [`Verifier`](struct.Verifier.html) with the password\n to verify against\n","sig":null,"attributes":[{"value":"/ Allows you to provide [`Verifier`](struct.Verifier.html) with the password","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":83461,"byte_end":83539,"line_start":222,"line_end":222,"column_start":5,"column_end":83}},{"value":"/ to verify against","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":83544,"byte_end":83565,"line_start":223,"line_end":223,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":83906,"byte_end":83921,"line_start":233,"line_end":233,"column_start":12,"column_end":27},"name":"with_secret_key","qualname":"<Verifier>::with_secret_key","value":"pub fn with_secret_key<SK>(&mut Self, SK) -> &mut Verifier where\nSK: Into<SecretKey>","parent":null,"children":[],"decl_id":null,"docs":" Allows you to provide [`Verifier`](struct.Verifier.html) with the secret key\n that was initially used to create the hash\n","sig":null,"attributes":[{"value":"/ Allows you to provide [`Verifier`](struct.Verifier.html) with the secret key","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":83763,"byte_end":83843,"line_start":231,"line_end":231,"column_start":5,"column_end":85}},{"value":"/ that was initially used to create the hash","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":83848,"byte_end":83894,"line_start":232,"line_end":232,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":84249,"byte_end":84264,"line_start":242,"line_end":242,"column_start":12,"column_end":27},"name":"additional_data","qualname":"<Verifier>::additional_data","value":"pub fn additional_data(&Self) -> Option<&AdditionalData>","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the [`Verifier`](struct.Verifier.html)'s\n [`AdditionalData`](input/struct.AdditionalData.html), if any\n","sig":null,"attributes":[{"value":"/ Read-only access to the [`Verifier`](struct.Verifier.html)'s","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":84104,"byte_end":84168,"line_start":240,"line_end":240,"column_start":5,"column_end":69}},{"value":"/ [`AdditionalData`](input/struct.AdditionalData.html), if any","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":84173,"byte_end":84237,"line_start":241,"line_end":241,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":84487,"byte_end":84493,"line_start":247,"line_end":247,"column_start":12,"column_end":18},"name":"config","qualname":"<Verifier>::config","value":"pub fn config(&Self) -> VerifierConfig","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the [`Verifier`](struct.Verifier.html)'s\n [`VerifierConfig`](config/struct.VerifierConfig.html)\n","sig":null,"attributes":[{"value":"/ Read-only access to the [`Verifier`](struct.Verifier.html)'s","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":84349,"byte_end":84413,"line_start":245,"line_end":245,"column_start":5,"column_end":69}},{"value":"/ [`VerifierConfig`](config/struct.VerifierConfig.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":84418,"byte_end":84475,"line_start":246,"line_end":246,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":84988,"byte_end":84992,"line_start":257,"line_end":257,"column_start":12,"column_end":16},"name":"hash","qualname":"<Verifier>::hash","value":"pub fn hash(&Self) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Returns the [`Verifier`](struct.Verifier.html)'s string-encoded hash, if any\n","sig":null,"attributes":[{"value":"/ Returns the [`Verifier`](struct.Verifier.html)'s string-encoded hash, if any","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":84896,"byte_end":84976,"line_start":256,"line_end":256,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":85344,"byte_end":85352,"line_start":266,"line_end":266,"column_start":12,"column_end":20},"name":"hash_raw","qualname":"<Verifier>::hash_raw","value":"pub fn hash_raw(&Self) -> Result<Option<HashRaw>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns the [`Verifier`](struct.Verifier.html)'s [`HashRaw`](output/struct.HashRaw.html),\n if any\n","sig":null,"attributes":[{"value":"/ Returns the [`Verifier`](struct.Verifier.html)'s [`HashRaw`](output/struct.HashRaw.html),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":85224,"byte_end":85317,"line_start":264,"line_end":264,"column_start":5,"column_end":98}},{"value":"/ if any","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":85322,"byte_end":85332,"line_start":265,"line_end":265,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":85741,"byte_end":85749,"line_start":275,"line_end":275,"column_start":12,"column_end":20},"name":"password","qualname":"<Verifier>::password","value":"pub fn password(&Self) -> Option<&Password>","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the [`Verifier`](struct.Verifier.html)'s\n [`Password`](input/struct.Password.html), if any\n","sig":null,"attributes":[{"value":"/ Read-only access to the [`Verifier`](struct.Verifier.html)'s","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":85608,"byte_end":85672,"line_start":273,"line_end":273,"column_start":5,"column_end":69}},{"value":"/ [`Password`](input/struct.Password.html), if any","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":85677,"byte_end":85729,"line_start":274,"line_end":274,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":85960,"byte_end":85970,"line_start":280,"line_end":280,"column_start":12,"column_end":22},"name":"secret_key","qualname":"<Verifier>::secret_key","value":"pub fn secret_key(&Self) -> Option<&SecretKey>","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the [`Verifier`](struct.Verifier.html)'s\n [`SecretKey`](input/struct.SecretKey.html), if any\n","sig":null,"attributes":[{"value":"/ Read-only access to the [`Verifier`](struct.Verifier.html)'s","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":85825,"byte_end":85889,"line_start":278,"line_end":278,"column_start":5,"column_end":69}},{"value":"/ [`SecretKey`](input/struct.SecretKey.html), if any","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":85894,"byte_end":85948,"line_start":279,"line_end":279,"column_start":5,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":292},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"config","qualname":"::config","value":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/mod.rs","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":308},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":406},{"krate":0,"index":427},{"krate":0,"index":442},{"krate":0,"index":464},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":471},{"krate":0,"index":474},{"krate":0,"index":477},{"krate":0,"index":480}],"decl_id":null,"docs":" Enums and defaults for Argon2 configuration options (e.g. `hash_len`,\n [`Variant`](config/enum.Variant.html), [`Version`](config/enum.Version.html), etc.)\n","sig":null,"attributes":[{"value":"/ Enums and defaults for Argon2 configuration options (e.g. `hash_len`,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/mod.rs","byte_start":88931,"byte_end":89004,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/ [`Variant`](config/enum.Variant.html), [`Version`](config/enum.Version.html), etc.)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/mod.rs","byte_start":89005,"byte_end":89092,"line_start":2,"line_end":2,"column_start":1,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1376},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":90383,"byte_end":90384,"line_start":23,"line_end":23,"column_start":5,"column_end":6},"name":"C","qualname":"::config::backend::Backend::C","value":"Backend::C","parent":{"krate":0,"index":1375},"children":[],"decl_id":null,"docs":" Backend using a\n [C implementation](https://github.com/P-H-C/phc-winner-argon2/tree/20171227)\n of the Argon2 algorithm\n","sig":null,"attributes":[{"value":"/ Backend using a","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":90242,"byte_end":90261,"line_start":20,"line_end":20,"column_start":5,"column_end":24}},{"value":"/ [C implementation](https://github.com/P-H-C/phc-winner-argon2/tree/20171227)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":90266,"byte_end":90346,"line_start":21,"line_end":21,"column_start":5,"column_end":85}},{"value":"/ of the Argon2 algorithm","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":90351,"byte_end":90378,"line_start":22,"line_end":22,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1379},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":90544,"byte_end":90548,"line_start":26,"line_end":26,"column_start":5,"column_end":9},"name":"Rust","qualname":"::config::backend::Backend::Rust","value":"Backend::Rust","parent":{"krate":0,"index":1375},"children":[],"decl_id":null,"docs":" Placeholder for a currently-unavailable but planned-for-the-future Rust backend.\n *You will get an error if you use this backend now.*\n","sig":null,"attributes":[{"value":"/ Placeholder for a currently-unavailable but planned-for-the-future Rust backend.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":90394,"byte_end":90478,"line_start":24,"line_end":24,"column_start":5,"column_end":89}},{"value":"/ *You will get an error if you use this backend now.*","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":90483,"byte_end":90539,"line_start":25,"line_end":25,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":1375},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":90228,"byte_end":90235,"line_start":19,"line_end":19,"column_start":10,"column_end":17},"name":"Backend","qualname":"::config::backend::Backend","value":"pub enum Backend { C = , Rust = , }","parent":null,"children":[{"krate":0,"index":1376},{"krate":0,"index":1379}],"decl_id":null,"docs":" Enum representing the choice between a\n [C implementation](https://github.com/P-H-C/phc-winner-argon2/tree/20171227)\n of the Argon2 algorithm or a Rust implementation. *Currently only a C\n implemenation is supported. You will get an error if you choose the Rust backend.\n The intention is to write a Rust implementation in the future.*\n","sig":null,"attributes":[{"value":"/ Enum representing the choice between a","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":89672,"byte_end":89714,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/ [C implementation](https://github.com/P-H-C/phc-winner-argon2/tree/20171227)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":89715,"byte_end":89795,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ of the Argon2 algorithm or a Rust implementation. *Currently only a C","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":89796,"byte_end":89869,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/ implemenation is supported. You will get an error if you choose the Rust backend.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":89870,"byte_end":89955,"line_start":14,"line_end":14,"column_start":1,"column_end":86}},{"value":"/ The intention is to write a Rust implementation in the future.*","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":89956,"byte_end":90023,"line_start":15,"line_end":15,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":90748,"byte_end":90756,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"from_u32","qualname":"<Backend>::from_u32","value":"pub fn from_u32(u32) -> Result<Backend, Error>","parent":null,"children":[],"decl_id":null,"docs":" Performs the following mapping:\n * `1_u32` => `Ok(Backend::C)`<br/>\n * `2_u32` => `Ok(Backend::Rust)`<br/>\n * anything else => an error\n","sig":null,"attributes":[{"value":"/ Performs the following mapping:","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":90576,"byte_end":90611,"line_start":30,"line_end":30,"column_start":5,"column_end":40}},{"value":"/ * `1_u32` => `Ok(Backend::C)`<br/>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":90616,"byte_end":90654,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/ * `2_u32` => `Ok(Backend::Rust)`<br/>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":90659,"byte_end":90700,"line_start":32,"line_end":32,"column_start":5,"column_end":46}},{"value":"/ * anything else => an error","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":90705,"byte_end":90736,"line_start":33,"line_end":33,"column_start":5,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":325},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":91942,"byte_end":91958,"line_start":9,"line_end":9,"column_start":8,"column_end":24},"name":"default_cpu_pool","qualname":"::config::defaults::default_cpu_pool","value":"pub fn default_cpu_pool() -> CpuPool","parent":null,"children":[],"decl_id":null,"docs":" Returns a [`CpuPool`](https://docs.rs/futures-cpupool/0.1.8/futures_cpupool/struct.CpuPool.html)\n with threads equal to the number of logical cores on your machine\n","sig":null,"attributes":[{"value":"/ Returns a [`CpuPool`](https://docs.rs/futures-cpupool/0.1.8/futures_cpupool/struct.CpuPool.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":91746,"byte_end":91846,"line_start":6,"line_end":6,"column_start":1,"column_end":101}},{"value":"/ with threads equal to the number of logical cores on your machine","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":91847,"byte_end":91916,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"inline(always)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":91917,"byte_end":91934,"line_start":8,"line_end":8,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":326},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92190,"byte_end":92203,"line_start":20,"line_end":20,"column_start":8,"column_end":21},"name":"default_lanes","qualname":"::config::defaults::default_lanes","value":"pub fn default_lanes() -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of logical cores on your machine\n","sig":null,"attributes":[{"value":"/ Returns the number of logical cores on your machine","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92109,"byte_end":92164,"line_start":18,"line_end":18,"column_start":1,"column_end":56}},{"value":"inline(always)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92165,"byte_end":92182,"line_start":19,"line_end":19,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":327},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92326,"byte_end":92341,"line_start":26,"line_end":26,"column_start":8,"column_end":23},"name":"default_threads","qualname":"::config::defaults::default_threads","value":"pub fn default_threads() -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of logical cores on your machine\n","sig":null,"attributes":[{"value":"/ Returns the number of logical cores on your machine","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92245,"byte_end":92300,"line_start":24,"line_end":24,"column_start":1,"column_end":56}},{"value":"inline(always)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92301,"byte_end":92318,"line_start":25,"line_end":25,"column_start":1,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":328},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92441,"byte_end":92456,"line_start":31,"line_end":31,"column_start":11,"column_end":26},"name":"DEFAULT_BACKEND","qualname":"::config::defaults::DEFAULT_BACKEND","value":"Backend","parent":null,"children":[],"decl_id":null,"docs":" [`Backend::C`](enum.Backend.html#variant.C)\n","sig":null,"attributes":[{"value":"/ [`Backend::C`](enum.Backend.html#variant.C)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92383,"byte_end":92430,"line_start":30,"line_end":30,"column_start":1,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":329},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92504,"byte_end":92520,"line_start":34,"line_end":34,"column_start":11,"column_end":27},"name":"DEFAULT_HASH_LEN","qualname":"::config::defaults::DEFAULT_HASH_LEN","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" `32_u32`\n","sig":null,"attributes":[{"value":"/ `32_u32`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92481,"byte_end":92493,"line_start":33,"line_end":33,"column_start":1,"column_end":13}}]},{"kind":"Const","id":{"krate":0,"index":330},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92557,"byte_end":92575,"line_start":37,"line_end":37,"column_start":11,"column_end":29},"name":"DEFAULT_ITERATIONS","qualname":"::config::defaults::DEFAULT_ITERATIONS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" `192_u32`\n","sig":null,"attributes":[{"value":"/ `192_u32`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92533,"byte_end":92546,"line_start":36,"line_end":36,"column_start":1,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":331},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92614,"byte_end":92633,"line_start":40,"line_end":40,"column_start":11,"column_end":30},"name":"DEFAULT_MEMORY_SIZE","qualname":"::config::defaults::DEFAULT_MEMORY_SIZE","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" `4096_u32`\n","sig":null,"attributes":[{"value":"/ `4096_u32`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92589,"byte_end":92603,"line_start":39,"line_end":39,"column_start":1,"column_end":15}}]},{"kind":"Const","id":{"krate":0,"index":332},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92671,"byte_end":92700,"line_start":43,"line_end":43,"column_start":11,"column_end":40},"name":"DEFAULT_OPT_OUT_OF_SECRET_KEY","qualname":"::config::defaults::DEFAULT_OPT_OUT_OF_SECRET_KEY","value":"bool","parent":null,"children":[],"decl_id":null,"docs":" `false`\n","sig":null,"attributes":[{"value":"/ `false`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92649,"byte_end":92660,"line_start":42,"line_end":42,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":333},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92739,"byte_end":92764,"line_start":46,"line_end":46,"column_start":11,"column_end":36},"name":"DEFAULT_PASSWORD_CLEARING","qualname":"::config::defaults::DEFAULT_PASSWORD_CLEARING","value":"bool","parent":null,"children":[],"decl_id":null,"docs":" `false`\n","sig":null,"attributes":[{"value":"/ `false`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92717,"byte_end":92728,"line_start":45,"line_end":45,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":334},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92804,"byte_end":92820,"line_start":49,"line_end":49,"column_start":11,"column_end":27},"name":"DEFAULT_SALT_LEN","qualname":"::config::defaults::DEFAULT_SALT_LEN","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" `32_u32`\n","sig":null,"attributes":[{"value":"/ `32_u32`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92781,"byte_end":92793,"line_start":48,"line_end":48,"column_start":1,"column_end":13}}]},{"kind":"Const","id":{"krate":0,"index":335},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92855,"byte_end":92882,"line_start":52,"line_end":52,"column_start":11,"column_end":38},"name":"DEFAULT_SECRET_KEY_CLEARING","qualname":"::config::defaults::DEFAULT_SECRET_KEY_CLEARING","value":"bool","parent":null,"children":[],"decl_id":null,"docs":" `false`\n","sig":null,"attributes":[{"value":"/ `false`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92833,"byte_end":92844,"line_start":51,"line_end":51,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":336},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92971,"byte_end":92986,"line_start":55,"line_end":55,"column_start":11,"column_end":26},"name":"DEFAULT_VARIANT","qualname":"::config::defaults::DEFAULT_VARIANT","value":"Variant","parent":null,"children":[],"decl_id":null,"docs":" [`Variant::Argon2id`](enum.Variant.html#variant.Argon2id)\n","sig":null,"attributes":[{"value":"/ [`Variant::Argon2id`](enum.Variant.html#variant.Argon2id)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":92899,"byte_end":92960,"line_start":54,"line_end":54,"column_start":1,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":337},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":93084,"byte_end":93099,"line_start":58,"line_end":58,"column_start":11,"column_end":26},"name":"DEFAULT_VERSION","qualname":"::config::defaults::DEFAULT_VERSION","value":"Version","parent":null,"children":[],"decl_id":null,"docs":" [`Version::_0x13`](enum.Version.html#variant._0x13)\n","sig":null,"attributes":[{"value":"/ [`Version::_0x13`](enum.Version.html#variant._0x13)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/defaults.rs","byte_start":93018,"byte_end":93073,"line_start":57,"line_end":57,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1494},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":94592,"byte_end":94604,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"HasherConfig","qualname":"::config::hasher_config::HasherConfig","value":"HasherConfig {  }","parent":null,"children":[{"krate":0,"index":1495},{"krate":0,"index":1496},{"krate":0,"index":1497},{"krate":0,"index":1498},{"krate":0,"index":1499},{"krate":0,"index":1500},{"krate":0,"index":1501},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506}],"decl_id":null,"docs":" Read-only configuration for [`Hasher`](../struct.Hasher.html). Can be obtained by calling\n the [`config`](../struct.Hasher.html#method.config) method on an instance of\n [`Hasher`](../struct.Hasher.html)\n","sig":null,"attributes":[{"value":"/ Read-only configuration for [`Hasher`](../struct.Hasher.html). Can be obtained by calling","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":94217,"byte_end":94310,"line_start":9,"line_end":9,"column_start":1,"column_end":94}},{"value":"/ the [`config`](../struct.Hasher.html#method.config) method on an instance of","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":94311,"byte_end":94391,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ [`Hasher`](../struct.Hasher.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":94392,"byte_end":94429,"line_start":11,"line_end":11,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95092,"byte_end":95099,"line_start":36,"line_end":36,"column_start":12,"column_end":19},"name":"backend","qualname":"<HasherConfig>::backend","value":"pub fn backend(&Self) -> Backend","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95058,"byte_end":95080,"line_start":35,"line_end":35,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95185,"byte_end":95193,"line_start":40,"line_end":40,"column_start":12,"column_end":20},"name":"cpu_pool","qualname":"<HasherConfig>::cpu_pool","value":"pub fn cpu_pool(&Self) -> Option<CpuPool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95151,"byte_end":95173,"line_start":39,"line_end":39,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95390,"byte_end":95398,"line_start":47,"line_end":47,"column_start":12,"column_end":20},"name":"hash_len","qualname":"<HasherConfig>::hash_len","value":"pub fn hash_len(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95356,"byte_end":95378,"line_start":46,"line_end":46,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95481,"byte_end":95491,"line_start":51,"line_end":51,"column_start":12,"column_end":22},"name":"iterations","qualname":"<HasherConfig>::iterations","value":"pub fn iterations(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95447,"byte_end":95469,"line_start":50,"line_end":50,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95576,"byte_end":95581,"line_start":55,"line_end":55,"column_start":12,"column_end":17},"name":"lanes","qualname":"<HasherConfig>::lanes","value":"pub fn lanes(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95542,"byte_end":95564,"line_start":54,"line_end":54,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95661,"byte_end":95672,"line_start":59,"line_end":59,"column_start":12,"column_end":23},"name":"memory_size","qualname":"<HasherConfig>::memory_size","value":"pub fn memory_size(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95627,"byte_end":95649,"line_start":58,"line_end":58,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95758,"byte_end":95779,"line_start":63,"line_end":63,"column_start":12,"column_end":33},"name":"opt_out_of_secret_key","qualname":"<HasherConfig>::opt_out_of_secret_key","value":"pub fn opt_out_of_secret_key(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95724,"byte_end":95746,"line_start":62,"line_end":62,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95876,"byte_end":95893,"line_start":67,"line_end":67,"column_start":12,"column_end":29},"name":"password_clearing","qualname":"<HasherConfig>::password_clearing","value":"pub fn password_clearing(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95842,"byte_end":95864,"line_start":66,"line_end":66,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95986,"byte_end":96005,"line_start":71,"line_end":71,"column_start":12,"column_end":31},"name":"secret_key_clearing","qualname":"<HasherConfig>::secret_key_clearing","value":"pub fn secret_key_clearing(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95952,"byte_end":95974,"line_start":70,"line_end":70,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":96100,"byte_end":96107,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"name":"threads","qualname":"<HasherConfig>::threads","value":"pub fn threads(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":96066,"byte_end":96088,"line_start":74,"line_end":74,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":96189,"byte_end":96196,"line_start":79,"line_end":79,"column_start":12,"column_end":19},"name":"variant","qualname":"<HasherConfig>::variant","value":"pub fn variant(&Self) -> Variant","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":96155,"byte_end":96177,"line_start":78,"line_end":78,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":96282,"byte_end":96289,"line_start":83,"line_end":83,"column_start":12,"column_end":19},"name":"version","qualname":"<HasherConfig>::version","value":"pub fn version(&Self) -> Version","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":96248,"byte_end":96270,"line_start":82,"line_end":82,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1512},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":104994,"byte_end":105001,"line_start":56,"line_end":56,"column_start":5,"column_end":12},"name":"Argon2d","qualname":"::config::variant::Variant::Argon2d","value":"Variant::Argon2d","parent":{"krate":0,"index":1511},"children":[],"decl_id":null,"docs":" Variant of the Argon2 algorithm that is faster and uses data-depending memory access,\n which makes it suitable for applications with no threats from side-channel timing attackes.\n Do <b><u>not</b></u> use this unless you have a specific reason to.\n","sig":null,"attributes":[{"value":"/ Variant of the Argon2 algorithm that is faster and uses data-depending memory access,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":104724,"byte_end":104813,"line_start":53,"line_end":53,"column_start":5,"column_end":94}},{"value":"/ which makes it suitable for applications with no threats from side-channel timing attackes.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":104818,"byte_end":104913,"line_start":54,"line_end":54,"column_start":5,"column_end":100}},{"value":"/ Do <b><u>not</b></u> use this unless you have a specific reason to.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":104918,"byte_end":104989,"line_start":55,"line_end":55,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1515},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105253,"byte_end":105260,"line_start":61,"line_end":61,"column_start":5,"column_end":12},"name":"Argon2i","qualname":"::config::variant::Variant::Argon2i","value":"Variant::Argon2i","parent":{"krate":0,"index":1511},"children":[],"decl_id":null,"docs":" Variant of the Argon2 algorithm that uses data-independent memory access, which is\n preferred for password hashing and password-based key derivation. Do <b><u>not</b></u> use\n this unless you have a specific reason to.\n","sig":null,"attributes":[{"value":"/ Variant of the Argon2 algorithm that uses data-independent memory access, which is","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105012,"byte_end":105098,"line_start":58,"line_end":58,"column_start":5,"column_end":91}},{"value":"/ preferred for password hashing and password-based key derivation. Do <b><u>not</b></u> use","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105103,"byte_end":105197,"line_start":59,"line_end":59,"column_start":5,"column_end":99}},{"value":"/ this unless you have a specific reason to.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105202,"byte_end":105248,"line_start":60,"line_end":60,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1518},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105614,"byte_end":105622,"line_start":67,"line_end":67,"column_start":5,"column_end":13},"name":"Argon2id","qualname":"::config::variant::Variant::Argon2id","value":"Variant::Argon2id","parent":{"krate":0,"index":1511},"children":[],"decl_id":null,"docs":" Default variant of the Argon2 algorithm that works as Argon2i for the first half of the\n first iteration over the memory, and as Argon2d for the rest, thus providing both\n side-channel attack protection and brute-force cost savings due to time-memory tradeoffs.\n Use this unless you have a specific reason not to.\n","sig":null,"attributes":[{"value":"/ Default variant of the Argon2 algorithm that works as Argon2i for the first half of the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105271,"byte_end":105362,"line_start":63,"line_end":63,"column_start":5,"column_end":96}},{"value":"/ first iteration over the memory, and as Argon2d for the rest, thus providing both","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105367,"byte_end":105452,"line_start":64,"line_end":64,"column_start":5,"column_end":90}},{"value":"/ side-channel attack protection and brute-force cost savings due to time-memory tradeoffs.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105457,"byte_end":105550,"line_start":65,"line_end":65,"column_start":5,"column_end":98}},{"value":"/ Use this unless you have a specific reason not to.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105555,"byte_end":105609,"line_start":66,"line_end":66,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":1511},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":104710,"byte_end":104717,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"Variant","qualname":"::config::variant::Variant","value":"pub enum Variant { Argon2d = , Argon2i = , Argon2id = , }","parent":null,"children":[{"krate":0,"index":1512},{"krate":0,"index":1515},{"krate":0,"index":1518}],"decl_id":null,"docs":" Enum representing the various variants of the Argon2 algorithm (\n [`Argon2d`](enum.Variant.html#variant.Argon2d),\n [`Argon2i`](enum.Variant.html#variant.Argon2i), and\n [`Argon2id`](enum.Variant.html#variant.Argon2id)).","sig":null,"attributes":[{"value":"/ Enum representing the various variants of the Argon2 algorithm (","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":103425,"byte_end":103493,"line_start":34,"line_end":34,"column_start":1,"column_end":69}},{"value":"/ [`Argon2d`](enum.Variant.html#variant.Argon2d),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":103494,"byte_end":103545,"line_start":35,"line_end":35,"column_start":1,"column_end":52}},{"value":"/ [`Argon2i`](enum.Variant.html#variant.Argon2i), and","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":103546,"byte_end":103601,"line_start":36,"line_end":36,"column_start":1,"column_end":56}},{"value":"/ [`Argon2id`](enum.Variant.html#variant.Argon2id)).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":103602,"byte_end":103656,"line_start":37,"line_end":37,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":103657,"byte_end":103660,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ According to the [latest (as of 5/18) Argon2 RFC](https://tools.ietf.org/html/draft-irtf-cfrg-argon2-03) ...","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":103661,"byte_end":103773,"line_start":39,"line_end":39,"column_start":1,"column_end":113}},{"value":"/ \"Argon2 has one primary variant: Argon2id, and two supplementary","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":103774,"byte_end":103842,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/ variants: Argon2d and Argon2i. Argon2d uses data-dependent memory","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":103843,"byte_end":103912,"line_start":41,"line_end":41,"column_start":1,"column_end":70}},{"value":"/ access, which makes it suitable for ... applications with no threats from","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":103913,"byte_end":103990,"line_start":42,"line_end":42,"column_start":1,"column_end":78}},{"value":"/ side-channel timing attacks. Argon2i uses data-independent memory access,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":103991,"byte_end":104068,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ which is preferred for password hashing and password-based key derivation.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":104069,"byte_end":104147,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ Argon2id works as Argon2i for the first half of the first iteration over the memory,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":104148,"byte_end":104236,"line_start":45,"line_end":45,"column_start":1,"column_end":89}},{"value":"/ and as Argon2d for the rest, thus providing both side-channel attack","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":104237,"byte_end":104309,"line_start":46,"line_end":46,"column_start":1,"column_end":73}},{"value":"/ protection and brute-force cost savings due to time-memory tradeoffs.\" If you do not","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":104310,"byte_end":104398,"line_start":47,"line_end":47,"column_start":1,"column_end":89}},{"value":"/ know which variant to use, use the default, which is [`Argon2id`](enum.Variant.html#variant.Argon2id))","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":104399,"byte_end":104505,"line_start":48,"line_end":48,"column_start":1,"column_end":107}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105844,"byte_end":105850,"line_start":75,"line_end":75,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Variant>::as_str","value":"pub fn as_str(&Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Performs the following mapping:\n * `Variant::Argond2d` => `\"argon2d\"`<br/>\n * `Variant::Argond2i` => `\"argon2i\"`<br/>\n * `Variant::Argond2id` => `\"argon2id\"`\n","sig":null,"attributes":[{"value":"/ Performs the following mapping:","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105650,"byte_end":105685,"line_start":71,"line_end":71,"column_start":5,"column_end":40}},{"value":"/ * `Variant::Argond2d` => `\"argon2d\"`<br/>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105690,"byte_end":105735,"line_start":72,"line_end":72,"column_start":5,"column_end":50}},{"value":"/ * `Variant::Argond2i` => `\"argon2i\"`<br/>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105740,"byte_end":105785,"line_start":73,"line_end":73,"column_start":5,"column_end":50}},{"value":"/ * `Variant::Argond2id` => `\"argon2id\"`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105790,"byte_end":105832,"line_start":74,"line_end":74,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1539},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":107218,"byte_end":107232,"line_start":13,"line_end":13,"column_start":12,"column_end":26},"name":"VerifierConfig","qualname":"::config::verifier_config::VerifierConfig","value":"VerifierConfig {  }","parent":null,"children":[{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544}],"decl_id":null,"docs":" Read-only configuration for [`Verifier`](../struct.Verifier.html). Can be obtained by calling\n the [`config`](../struct.Verifier.html#method.config) method on an instance of\n [`Verifier`](../struct.Verifier.html)\n","sig":null,"attributes":[{"value":"/ Read-only configuration for [`Verifier`](../struct.Verifier.html). Can be obtained by calling","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":106833,"byte_end":106930,"line_start":7,"line_end":7,"column_start":1,"column_end":98}},{"value":"/ the [`config`](../struct.Verifier.html#method.config) method on an instance of","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":106931,"byte_end":107013,"line_start":8,"line_end":8,"column_start":1,"column_end":83}},{"value":"/ [`Verifier`](../struct.Verifier.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":107014,"byte_end":107055,"line_start":9,"line_end":9,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":107622,"byte_end":107629,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"backend","qualname":"<VerifierConfig>::backend","value":"pub fn backend(&Self) -> Backend","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":107588,"byte_end":107610,"line_start":26,"line_end":26,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":107715,"byte_end":107723,"line_start":31,"line_end":31,"column_start":12,"column_end":20},"name":"cpu_pool","qualname":"<VerifierConfig>::cpu_pool","value":"pub fn cpu_pool(&Self) -> Option<CpuPool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":107681,"byte_end":107703,"line_start":30,"line_end":30,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":107920,"byte_end":107937,"line_start":38,"line_end":38,"column_start":12,"column_end":29},"name":"password_clearing","qualname":"<VerifierConfig>::password_clearing","value":"pub fn password_clearing(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":107886,"byte_end":107908,"line_start":37,"line_end":37,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":108030,"byte_end":108049,"line_start":42,"line_end":42,"column_start":12,"column_end":31},"name":"secret_key_clearing","qualname":"<VerifierConfig>::secret_key_clearing","value":"pub fn secret_key_clearing(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":107996,"byte_end":108018,"line_start":41,"line_end":41,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":108144,"byte_end":108151,"line_start":46,"line_end":46,"column_start":12,"column_end":19},"name":"threads","qualname":"<VerifierConfig>::threads","value":"pub fn threads(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":108110,"byte_end":108132,"line_start":45,"line_end":45,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1550},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":110562,"byte_end":110567,"line_start":40,"line_end":40,"column_start":5,"column_end":10},"name":"_0x10","qualname":"::config::version::Version::_0x10","value":"Version::_0x10","parent":{"krate":0,"index":1549},"children":[],"decl_id":null,"docs":" An outdated version of the Argon2 algorithm. Do <b><u>not</b></u> use this unless you have a specific reason to.\n","sig":null,"attributes":[{"value":"/ An outdated version of the Argon2 algorithm. Do <b><u>not</b></u> use this unless you have a specific reason to.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":110441,"byte_end":110557,"line_start":39,"line_end":39,"column_start":5,"column_end":121}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1553},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":110708,"byte_end":110713,"line_start":42,"line_end":42,"column_start":5,"column_end":10},"name":"_0x13","qualname":"::config::version::Version::_0x13","value":"Version::_0x13","parent":{"krate":0,"index":1549},"children":[],"decl_id":null,"docs":" The default and latest version of the Argon2 algorithm (as of 5/18). Use this unless you have a specific reason not to.\n","sig":null,"attributes":[{"value":"/ The default and latest version of the Argon2 algorithm (as of 5/18). Use this unless you have a specific reason not to.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":110580,"byte_end":110703,"line_start":41,"line_end":41,"column_start":5,"column_end":128}}]},{"kind":"Enum","id":{"krate":0,"index":1549},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":110427,"byte_end":110434,"line_start":38,"line_end":38,"column_start":10,"column_end":17},"name":"Version","qualname":"::config::version::Version","value":"pub enum Version { _0x10 = , _0x13 = , }","parent":null,"children":[{"krate":0,"index":1550},{"krate":0,"index":1553}],"decl_id":null,"docs":" Enum representing the various versions of the Argon2 algorithm (\n [`0x10`](enum.Version.html#variant._0x10) and\n [`0x13`](enum.Version.html#variant._0x13))\n","sig":null,"attributes":[{"value":"/ Enum representing the various versions of the Argon2 algorithm (","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":110057,"byte_end":110125,"line_start":32,"line_end":32,"column_start":1,"column_end":69}},{"value":"/ [`0x10`](enum.Version.html#variant._0x10) and","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":110126,"byte_end":110175,"line_start":33,"line_end":33,"column_start":1,"column_end":50}},{"value":"/ [`0x13`](enum.Version.html#variant._0x13))","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":110176,"byte_end":110222,"line_start":34,"line_end":34,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":110870,"byte_end":110876,"line_start":49,"line_end":49,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Version>::as_str","value":"pub fn as_str(&Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Performs the following mapping:\n * `Version::_0x10` => `\"16\"`<br/>\n * `Version::_0x13` => `\"19\"`\n","sig":null,"attributes":[{"value":"/ Performs the following mapping:","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":110744,"byte_end":110779,"line_start":46,"line_end":46,"column_start":5,"column_end":40}},{"value":"/ * `Version::_0x10` => `\"16\"`<br/>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":110784,"byte_end":110821,"line_start":47,"line_end":47,"column_start":5,"column_end":42}},{"value":"/ * `Version::_0x13` => `\"19\"`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":110826,"byte_end":110858,"line_start":48,"line_end":48,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":111196,"byte_end":111204,"line_start":60,"line_end":60,"column_start":12,"column_end":20},"name":"from_u32","qualname":"<Version>::from_u32","value":"pub fn from_u32(u32) -> Result<Version, Error>","parent":null,"children":[],"decl_id":null,"docs":" Performs the following mapping:\n * `16_u32` => `Ok(Version::_0x10)`<br/>\n * `19_u32` => `Ok(Version::_0x13)`<br/>\n * anything else => an error\n","sig":null,"attributes":[{"value":"/ Performs the following mapping:","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":111017,"byte_end":111052,"line_start":56,"line_end":56,"column_start":5,"column_end":40}},{"value":"/ * `16_u32` => `Ok(Version::_0x10)`<br/>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":111057,"byte_end":111100,"line_start":57,"line_end":57,"column_start":5,"column_end":48}},{"value":"/ * `19_u32` => `Ok(Version::_0x13)`<br/>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":111105,"byte_end":111148,"line_start":58,"line_end":58,"column_start":5,"column_end":48}},{"value":"/ * anything else => an error","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":111153,"byte_end":111184,"line_start":59,"line_end":59,"column_start":5,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":492},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"input","qualname":"::input","value":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":527},{"krate":0,"index":531},{"krate":0,"index":595},{"krate":0,"index":641},{"krate":0,"index":716},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":725},{"krate":0,"index":728}],"decl_id":null,"docs":" Type-safe structs representing data to hash (i.e.\n [`Password`](input/struct.Password.html),\n [`Salt`](input/struct.Salt.html),\n [`SecretKey`](input/struct.SecretKey.html), and\n [`AdditionalData`](input/struct.AdditionalData.html))","sig":null,"attributes":[{"value":"/ Type-safe structs representing data to hash (i.e.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":112114,"byte_end":112167,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/ [`Password`](input/struct.Password.html),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":112168,"byte_end":112213,"line_start":2,"line_end":2,"column_start":1,"column_end":46}},{"value":"/ [`Salt`](input/struct.Salt.html),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":112214,"byte_end":112251,"line_start":3,"line_end":3,"column_start":1,"column_end":38}},{"value":"/ [`SecretKey`](input/struct.SecretKey.html), and","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":112252,"byte_end":112303,"line_start":4,"line_end":4,"column_start":1,"column_end":52}},{"value":"/ [`AdditionalData`](input/struct.AdditionalData.html))","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":112304,"byte_end":112361,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":112362,"byte_end":112365,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ All the stucts below can be constructed from","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":112366,"byte_end":112414,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"/ [`Vec<u8>`](https://doc.rust-lang.org/std/vec/struct.Vec.html),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":112415,"byte_end":112482,"line_start":8,"line_end":8,"column_start":1,"column_end":68}},{"value":"/ [`&[u8]`](https://doc.rust-lang.org/std/primitive.slice.html),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":112483,"byte_end":112549,"line_start":9,"line_end":9,"column_start":1,"column_end":67}},{"value":"/ [`String`](https://doc.rust-lang.org/std/string/struct.String.html),","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":112550,"byte_end":112622,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ [`&str`](https://doc.rust-lang.org/std/primitive.str.html), as well as","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":112623,"byte_end":112697,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ other types, as they all implement several versions of the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":112698,"byte_end":112760,"line_start":12,"line_end":12,"column_start":1,"column_end":63}},{"value":"/ [`From`](https://doc.rust-lang.org/std/convert/trait.From.html) trait. Some have additional","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":112761,"byte_end":112856,"line_start":13,"line_end":13,"column_start":1,"column_end":96}},{"value":"/ constructors as well, e.g. [`Salt::random(...)`](struct.Salt.html#method.random), which","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":112857,"byte_end":112948,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ produces a [`Salt`](struct.Salt.html) that will create new crytographically-secure,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":112949,"byte_end":113036,"line_start":15,"line_end":15,"column_start":1,"column_end":88}},{"value":"/ random bytes after each hash.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/mod.rs","byte_start":113037,"byte_end":113070,"line_start":16,"line_end":16,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1574},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":114631,"byte_end":114645,"line_start":49,"line_end":49,"column_start":12,"column_end":26},"name":"AdditionalData","qualname":"::input::additional_data::AdditionalData","value":"","parent":null,"children":[],"decl_id":null,"docs":" Type-safe struct representing the raw bytes of your additional data (if any)\n","sig":null,"attributes":[{"value":"/ Type-safe struct representing the raw bytes of your additional data (if any)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":114350,"byte_end":114430,"line_start":45,"line_end":45,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":114745,"byte_end":114753,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<AdditionalData>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the underlying byte buffer\n","sig":null,"attributes":[{"value":"/ Read-only access to the underlying byte buffer","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":114683,"byte_end":114733,"line_start":52,"line_end":52,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":114870,"byte_end":114873,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"len","qualname":"<AdditionalData>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Read-only acccess to the underlying byte buffer's length\n","sig":null,"attributes":[{"value":"/ Read-only acccess to the underlying byte buffer's length","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":114798,"byte_end":114858,"line_start":56,"line_end":56,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":115026,"byte_end":115032,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"to_str","qualname":"<AdditionalData>::to_str","value":"pub fn to_str(&Self) -> Result<&str, Error>","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the underlying byte buffer as a `&str` if its bytes are valid utf-8\n","sig":null,"attributes":[{"value":"/ Read-only access to the underlying byte buffer as a `&str` if its bytes are valid utf-8","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":114923,"byte_end":115014,"line_start":60,"line_end":60,"column_start":5,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":1624},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":119949,"byte_end":119957,"line_start":125,"line_end":125,"column_start":12,"column_end":20},"name":"Password","qualname":"::input::password::Password","value":"Password {  }","parent":null,"children":[{"krate":0,"index":1626}],"decl_id":null,"docs":" Type-safe struct representing the raw bytes of a password\n","sig":null,"attributes":[{"value":"/ Type-safe struct representing the raw bytes of a password","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":119845,"byte_end":119906,"line_start":123,"line_end":123,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":120094,"byte_end":120102,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Password>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the underlying byte buffer\n","sig":null,"attributes":[{"value":"/ Read-only access to the underlying byte buffer","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":120032,"byte_end":120082,"line_start":130,"line_end":130,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":120955,"byte_end":120965,"line_start":145,"line_end":145,"column_start":12,"column_end":22},"name":"is_mutable","qualname":"<Password>::is_mutable","value":"pub fn is_mutable(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether the underlying byte buffer is mutable or not. The underlying byte\n buffer is mutable when the [`Password`](struct.Password.html) was constructed\n from an owned value (such as a `String` or a `Vec<u8>`) or from a mutable reference\n (such as a `&mut str` or a `&mut [u8]`). It is not mutable when the\n [`Password`](struct.Password.html) was constructed from an immutable reference\n (such as a `&str` or a `&[u8]`). The [`Password`](struct.Password.html) must be mutable\n in order to hash or verify with the `password_clearing` configuration set to `true`\n","sig":null,"attributes":[{"value":"/ Indicates whether the underlying byte buffer is mutable or not. The underlying byte","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":120327,"byte_end":120414,"line_start":138,"line_end":138,"column_start":5,"column_end":92}},{"value":"/ buffer is mutable when the [`Password`](struct.Password.html) was constructed","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":120419,"byte_end":120500,"line_start":139,"line_end":139,"column_start":5,"column_end":86}},{"value":"/ from an owned value (such as a `String` or a `Vec<u8>`) or from a mutable reference","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":120505,"byte_end":120592,"line_start":140,"line_end":140,"column_start":5,"column_end":92}},{"value":"/ (such as a `&mut str` or a `&mut [u8]`). It is not mutable when the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":120597,"byte_end":120668,"line_start":141,"line_end":141,"column_start":5,"column_end":76}},{"value":"/ [`Password`](struct.Password.html) was constructed from an immutable reference","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":120673,"byte_end":120755,"line_start":142,"line_end":142,"column_start":5,"column_end":87}},{"value":"/ (such as a `&str` or a `&[u8]`). The [`Password`](struct.Password.html) must be mutable","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":120760,"byte_end":120851,"line_start":143,"line_end":143,"column_start":5,"column_end":96}},{"value":"/ in order to hash or verify with the `password_clearing` configuration set to `true`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":120856,"byte_end":120943,"line_start":144,"line_end":144,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":121191,"byte_end":121194,"line_start":152,"line_end":152,"column_start":12,"column_end":15},"name":"len","qualname":"<Password>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Read-only acccess to the underlying byte buffer's length (in number of bytes)\n","sig":null,"attributes":[{"value":"/ Read-only acccess to the underlying byte buffer's length (in number of bytes)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":121098,"byte_end":121179,"line_start":151,"line_end":151,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":121494,"byte_end":121502,"line_start":158,"line_end":158,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<Password>::to_owned","value":"pub fn to_owned(&Self) -> Password","parent":null,"children":[],"decl_id":null,"docs":" Clones the underlying byte buffer and returns a new\n [`Password`](struct.Password.html) with a `static` lifetime. Use this method if you\n would like to move a [`Password`](struct.Password.html) to another thread\n","sig":null,"attributes":[{"value":"/ Clones the underlying byte buffer and returns a new","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":121253,"byte_end":121308,"line_start":155,"line_end":155,"column_start":5,"column_end":60}},{"value":"/ [`Password`](struct.Password.html) with a `static` lifetime. Use this method if you","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":121313,"byte_end":121400,"line_start":156,"line_end":156,"column_start":5,"column_end":92}},{"value":"/ would like to move a [`Password`](struct.Password.html) to another thread","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":121405,"byte_end":121482,"line_start":157,"line_end":157,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":121717,"byte_end":121723,"line_start":164,"line_end":164,"column_start":12,"column_end":18},"name":"to_str","qualname":"<Password>::to_str","value":"pub fn to_str(&Self) -> Result<&str, Error>","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the underlying byte buffer as a `&str` if its bytes are valid utf-8\n","sig":null,"attributes":[{"value":"/ Read-only access to the underlying byte buffer as a `&str` if its bytes are valid utf-8","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":121614,"byte_end":121705,"line_start":163,"line_end":163,"column_start":5,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":1642},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":124546,"byte_end":124550,"line_start":73,"line_end":73,"column_start":12,"column_end":16},"name":"Salt","qualname":"::input::salt::Salt","value":"","parent":null,"children":[],"decl_id":null,"docs":" Type-safe struct representing the raw bytes of your salt","sig":null,"attributes":[{"value":"/ Type-safe struct representing the raw bytes of your salt","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":123698,"byte_end":123758,"line_start":60,"line_end":60,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":123759,"byte_end":123762,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ <i>Note: A `Salt` knows if it's <b>random</b> or <b>deterministic</b>:","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":123763,"byte_end":123837,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"/ * A `Salt` will be <b>random</b> if it's constructed via the `default` or `random`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":123838,"byte_end":123924,"line_start":63,"line_end":63,"column_start":1,"column_end":87}},{"value":"/   constructors. It will be <b>deterministic</b> if it's constructed via any of the various","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":123925,"byte_end":124019,"line_start":64,"line_end":64,"column_start":1,"column_end":95}},{"value":"/   `From` implementations","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":124020,"byte_end":124048,"line_start":65,"line_end":65,"column_start":1,"column_end":29}},{"value":"/ * A <b>random</b> `Salt` will generate new random bytes using a cryptographically-secure","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":124049,"byte_end":124141,"line_start":66,"line_end":66,"column_start":1,"column_end":93}},{"value":"/   random number generator (`EntropyRng`) upon each call to `hash`, `hash_raw` or their","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":124142,"byte_end":124232,"line_start":67,"line_end":67,"column_start":1,"column_end":91}},{"value":"/   non-blocking equivalents. A <b>deterministic</b> `Salt` remain constant upon each of these","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":124233,"byte_end":124329,"line_start":68,"line_end":68,"column_start":1,"column_end":97}},{"value":"/   calls</i>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":124330,"byte_end":124345,"line_start":69,"line_end":69,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":125211,"byte_end":125217,"line_start":90,"line_end":90,"column_start":12,"column_end":18},"name":"random","qualname":"<Salt>::random","value":"pub fn random(u32) -> Salt","parent":null,"children":[],"decl_id":null,"docs":" Creates a new <u>random</u> `Salt`.","sig":null,"attributes":[{"value":"/ Creates a new <u>random</u> `Salt`.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":124828,"byte_end":124867,"line_start":84,"line_end":84,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":124872,"byte_end":124875,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Initially, the random `Salt` has nothing in it, but every time you call `hash`,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":124880,"byte_end":124963,"line_start":86,"line_end":86,"column_start":5,"column_end":88}},{"value":"/ `hash_raw`, or their non-blocking equivalents on a `Hasher`, the `Salt` will update with","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":124968,"byte_end":125060,"line_start":87,"line_end":87,"column_start":5,"column_end":97}},{"value":"/ new random bytes of the length specified generated using a cryptographically-secure","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":125065,"byte_end":125152,"line_start":88,"line_end":88,"column_start":5,"column_end":92}},{"value":"/ random number generator (`EntropyRng`)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":125157,"byte_end":125199,"line_start":89,"line_end":89,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":125389,"byte_end":125397,"line_start":95,"line_end":95,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Salt>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the underlying byte buffer\n","sig":null,"attributes":[{"value":"/ Read-only access to the underlying byte buffer","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":125327,"byte_end":125377,"line_start":94,"line_end":94,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":125680,"byte_end":125689,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"is_random","qualname":"<Salt>::is_random","value":"pub fn is_random(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `Salt` is <u>random</u>; `false` if it is <u>deterministic</u>\n","sig":null,"attributes":[{"value":"/ Returns `true` if the `Salt` is <u>random</u>; `false` if it is <u>deterministic</u>","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":125580,"byte_end":125668,"line_start":101,"line_end":101,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":125904,"byte_end":125907,"line_start":109,"line_end":109,"column_start":12,"column_end":15},"name":"len","qualname":"<Salt>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Read-only acccess to the underlying byte buffer's length\n","sig":null,"attributes":[{"value":"/ Read-only acccess to the underlying byte buffer's length","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":125832,"byte_end":125892,"line_start":108,"line_end":108,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":126069,"byte_end":126075,"line_start":113,"line_end":113,"column_start":12,"column_end":18},"name":"to_str","qualname":"<Salt>::to_str","value":"pub fn to_str(&Self) -> Result<&str, Error>","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the underlying byte buffer as a `&str` if its bytes are valid utf-8\n","sig":null,"attributes":[{"value":"/ Read-only access to the underlying byte buffer as a `&str` if its bytes are valid utf-8","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":125966,"byte_end":126057,"line_start":112,"line_end":112,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":126535,"byte_end":126541,"line_start":122,"line_end":122,"column_start":12,"column_end":18},"name":"update","qualname":"<Salt>::update","value":"pub fn update(&mut Self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" If you have a <u>random</u> `Salt`, this method will generate new random bytes of the\n length of your `Salt`. If you have a <u>deterministic</u> `Salt`, this method does nothing\n","sig":null,"attributes":[{"value":"/ If you have a <u>random</u> `Salt`, this method will generate new random bytes of the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":126335,"byte_end":126424,"line_start":120,"line_end":120,"column_start":5,"column_end":94}},{"value":"/ length of your `Salt`. If you have a <u>deterministic</u> `Salt`, this method does nothing","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":126429,"byte_end":126523,"line_start":121,"line_end":121,"column_start":5,"column_end":99}}]},{"kind":"Struct","id":{"krate":0,"index":1688},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":131223,"byte_end":131232,"line_start":127,"line_end":127,"column_start":12,"column_end":21},"name":"SecretKey","qualname":"::input::secret_key::SecretKey","value":"SecretKey {  }","parent":null,"children":[{"krate":0,"index":1690}],"decl_id":null,"docs":" Type-safe struct representing the raw bytes of a secret key\n","sig":null,"attributes":[{"value":"/ Type-safe struct representing the raw bytes of a secret key","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":131117,"byte_end":131180,"line_start":125,"line_end":125,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":131584,"byte_end":131603,"line_start":135,"line_end":135,"column_start":12,"column_end":31},"name":"from_base64_encoded","qualname":"<SecretKey>::from_base64_encoded","value":"pub fn from_base64_encoded<S>(S) -> Result<SecretKey, Error> where\nS: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`SecretKey`](struct.SecretKey.html) from a base64-encoded `&str` (or anything\n that can be dereferenced into a base64-encoded `&str`) using the\n [standard base64 encoding](https://docs.rs/base64/0.9.1/base64/constant.STANDARD.html).\n","sig":null,"attributes":[{"value":"/ Constructs a [`SecretKey`](struct.SecretKey.html) from a base64-encoded `&str` (or anything","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":131308,"byte_end":131403,"line_start":132,"line_end":132,"column_start":5,"column_end":100}},{"value":"/ that can be dereferenced into a base64-encoded `&str`) using the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":131408,"byte_end":131476,"line_start":133,"line_end":133,"column_start":5,"column_end":73}},{"value":"/ [standard base64 encoding](https://docs.rs/base64/0.9.1/base64/constant.STANDARD.html).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":131481,"byte_end":131572,"line_start":134,"line_end":134,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":132253,"byte_end":132279,"line_start":149,"line_end":149,"column_start":12,"column_end":38},"name":"from_base64_encoded_config","qualname":"<SecretKey>::from_base64_encoded_config","value":"pub fn from_base64_encoded_config<S>(S, base64::Config)\n-> Result<SecretKey, Error> where S: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Same as [`from_base64_encoded_str`](struct.SecretKey.html#method.from_base64_encoded_str)\n except you can pass a value that uses a non-standard base64 encoding (e.g. a\n [url-safe encoding](https://docs.rs/base64/0.9.1/base64/constant.URL_SAFE.html))\n","sig":null,"attributes":[{"value":"/ Same as [`from_base64_encoded_str`](struct.SecretKey.html#method.from_base64_encoded_str)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":131974,"byte_end":132067,"line_start":146,"line_end":146,"column_start":5,"column_end":98}},{"value":"/ except you can pass a value that uses a non-standard base64 encoding (e.g. a","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":132072,"byte_end":132152,"line_start":147,"line_end":147,"column_start":5,"column_end":85}},{"value":"/ [url-safe encoding](https://docs.rs/base64/0.9.1/base64/constant.URL_SAFE.html))","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":132157,"byte_end":132241,"line_start":148,"line_end":148,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":132749,"byte_end":132757,"line_start":164,"line_end":164,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<SecretKey>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the underlying byte buffer\n","sig":null,"attributes":[{"value":"/ Read-only access to the underlying byte buffer","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":132687,"byte_end":132737,"line_start":163,"line_end":163,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":133618,"byte_end":133628,"line_start":178,"line_end":178,"column_start":12,"column_end":22},"name":"is_mutable","qualname":"<SecretKey>::is_mutable","value":"pub fn is_mutable(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether the underlying byte buffer is mutable or not. The underlying byte\n buffer is mutable when the [`SecretKey`](struct.SecretKey.html) was constructed\n from an owned value (such as a `String` or a `Vec<u8>`) or from a mutable reference\n (such as a `&mut str` or a `&mut [u8]`). It is not mutable when the\n [`SecretKey`](struct.SecretKey.html) was constructed from an immutable reference\n (such as a `&str` or a `&[u8]`). The [`SecretKey`](struct.SecretKey.html) must be mutable\n in order to hash or verify with the `secret_key_clearing` configuration set to `true`\n","sig":null,"attributes":[{"value":"/ Indicates whether the underlying byte buffer is mutable or not. The underlying byte","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":132982,"byte_end":133069,"line_start":171,"line_end":171,"column_start":5,"column_end":92}},{"value":"/ buffer is mutable when the [`SecretKey`](struct.SecretKey.html) was constructed","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":133074,"byte_end":133157,"line_start":172,"line_end":172,"column_start":5,"column_end":88}},{"value":"/ from an owned value (such as a `String` or a `Vec<u8>`) or from a mutable reference","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":133162,"byte_end":133249,"line_start":173,"line_end":173,"column_start":5,"column_end":92}},{"value":"/ (such as a `&mut str` or a `&mut [u8]`). It is not mutable when the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":133254,"byte_end":133325,"line_start":174,"line_end":174,"column_start":5,"column_end":76}},{"value":"/ [`SecretKey`](struct.SecretKey.html) was constructed from an immutable reference","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":133330,"byte_end":133414,"line_start":175,"line_end":175,"column_start":5,"column_end":89}},{"value":"/ (such as a `&str` or a `&[u8]`). The [`SecretKey`](struct.SecretKey.html) must be mutable","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":133419,"byte_end":133512,"line_start":176,"line_end":176,"column_start":5,"column_end":98}},{"value":"/ in order to hash or verify with the `secret_key_clearing` configuration set to `true`","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":133517,"byte_end":133606,"line_start":177,"line_end":177,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":133854,"byte_end":133857,"line_start":185,"line_end":185,"column_start":12,"column_end":15},"name":"len","qualname":"<SecretKey>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Read-only acccess to the underlying byte buffer's length (in number of bytes)\n","sig":null,"attributes":[{"value":"/ Read-only acccess to the underlying byte buffer's length (in number of bytes)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":133761,"byte_end":133842,"line_start":184,"line_end":184,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":134161,"byte_end":134169,"line_start":191,"line_end":191,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<SecretKey>::to_owned","value":"pub fn to_owned(&Self) -> SecretKey","parent":null,"children":[],"decl_id":null,"docs":" Clones the underlying byte buffer and returns a new\n [`SecretKey`](struct.SecretKey.html) with a `static` lifetime. Use this method if you\n would like to move a [`SecretKey`](struct.SecretKey.html) to another thread\n","sig":null,"attributes":[{"value":"/ Clones the underlying byte buffer and returns a new","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":133916,"byte_end":133971,"line_start":188,"line_end":188,"column_start":5,"column_end":60}},{"value":"/ [`SecretKey`](struct.SecretKey.html) with a `static` lifetime. Use this method if you","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":133976,"byte_end":134065,"line_start":189,"line_end":189,"column_start":5,"column_end":94}},{"value":"/ would like to move a [`SecretKey`](struct.SecretKey.html) to another thread","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":134070,"byte_end":134149,"line_start":190,"line_end":190,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":134463,"byte_end":134480,"line_start":198,"line_end":198,"column_start":12,"column_end":29},"name":"to_base64_encoded","qualname":"<SecretKey>::to_base64_encoded","value":"pub fn to_base64_encoded(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying byte buffer as a base64-encoded `String` using\n [standard base64 encoding](https://docs.rs/base64/0.9.1/base64/constant.STANDARD.html)\n","sig":null,"attributes":[{"value":"/ Returns the underlying byte buffer as a base64-encoded `String` using","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":134283,"byte_end":134356,"line_start":196,"line_end":196,"column_start":5,"column_end":78}},{"value":"/ [standard base64 encoding](https://docs.rs/base64/0.9.1/base64/constant.STANDARD.html)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":134361,"byte_end":134451,"line_start":197,"line_end":197,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":134782,"byte_end":134806,"line_start":203,"line_end":203,"column_start":12,"column_end":36},"name":"to_base64_encoded_config","qualname":"<SecretKey>::to_base64_encoded_config","value":"pub fn to_base64_encoded_config(&Self, base64::Config) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying byte buffer as a base64-encoded `String` using\n a custom base64 encoding (e.g. a [url-safe encoding](https://docs.rs/base64/0.9.1/base64/constant.URL_SAFE.html))\n","sig":null,"attributes":[{"value":"/ Returns the underlying byte buffer as a base64-encoded `String` using","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":134575,"byte_end":134648,"line_start":201,"line_end":201,"column_start":5,"column_end":78}},{"value":"/ a custom base64 encoding (e.g. a [url-safe encoding](https://docs.rs/base64/0.9.1/base64/constant.URL_SAFE.html))","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":134653,"byte_end":134770,"line_start":202,"line_end":202,"column_start":5,"column_end":122}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":135018,"byte_end":135024,"line_start":207,"line_end":207,"column_start":12,"column_end":18},"name":"to_str","qualname":"<SecretKey>::to_str","value":"pub fn to_str(&Self) -> Result<&str, Error>","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the underlying byte buffer as a `&str` if its bytes are valid utf-8\n","sig":null,"attributes":[{"value":"/ Read-only access to the underlying byte buffer as a `&str` if its bytes are valid utf-8","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":134915,"byte_end":135006,"line_start":206,"line_end":206,"column_start":5,"column_end":96}}]},{"kind":"Mod","id":{"krate":0,"index":731},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"output","qualname":"::output","value":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/mod.rs","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":761}],"decl_id":null,"docs":" Struct representing raw hash output.\n","sig":null,"attributes":[{"value":"/ Struct representing raw hash output.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/mod.rs","byte_start":135504,"byte_end":135544,"line_start":1,"line_end":1,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1706},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":137077,"byte_end":137084,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"HashRaw","qualname":"::output::hash_raw::HashRaw","value":"HashRaw {  }","parent":null,"children":[{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1710},{"krate":0,"index":1711},{"krate":0,"index":1712},{"krate":0,"index":1713}],"decl_id":null,"docs":" Struct representing raw hash output.","sig":null,"attributes":[{"value":"/ Struct representing raw hash output.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":135958,"byte_end":135998,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":135999,"byte_end":136002,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ You typically won't need this struct if all you'd like to produce is a string-encoded hash,","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":136003,"byte_end":136098,"line_start":20,"line_end":20,"column_start":1,"column_end":96}},{"value":"/ which is what is returned from the regular [`hash`](../struct.Hasher.html#method.hash)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":136099,"byte_end":136189,"line_start":21,"line_end":21,"column_start":1,"column_end":91}},{"value":"/ method on [`Hasher`](../struct.Hasher.html) (or it's non-blocking equivalent).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":136190,"byte_end":136272,"line_start":22,"line_end":22,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":136273,"byte_end":136276,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ That said, if you want to inspect each component of a hash more directly (e.g. pull out the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":136277,"byte_end":136372,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"/ raw hash bytes or the raw salt bytes individually), you can obtain an instance of this","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":136373,"byte_end":136463,"line_start":25,"line_end":25,"column_start":1,"column_end":91}},{"value":"/ [`HashRaw`](struct.HashRaw.html) struct, which will allows you do to those things, by either:","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":136464,"byte_end":136561,"line_start":26,"line_end":26,"column_start":1,"column_end":98}},{"value":"/ * Parsing a string-encoded hash into a [`HashRaw`](struct.HashRaw.html) via","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":136562,"byte_end":136641,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   `let hash_raw = hash_str.parse::<HashRaw>()?;`, or","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":136642,"byte_end":136698,"line_start":28,"line_end":28,"column_start":1,"column_end":57}},{"value":"/ * Obtaining a `HashRaw` directly by calling [`hash_raw`](../struct.Hasher.html#method.hash_raw)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":136699,"byte_end":136798,"line_start":29,"line_end":29,"column_start":1,"column_end":100}},{"value":"/   on a [`Hasher`](../struct.Hasher.html) (or its non-blocking equivalent)","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":136799,"byte_end":136876,"line_start":30,"line_end":30,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":137433,"byte_end":137442,"line_start":46,"line_end":46,"column_start":12,"column_end":21},"name":"to_string","qualname":"<HashRaw>::to_string","value":"pub fn to_string(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Converts the [`HashRaw`](struct.HashRaw.html) to a string-encoded hash\n","sig":null,"attributes":[{"value":"/ Converts the [`HashRaw`](struct.HashRaw.html) to a string-encoded hash","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":137347,"byte_end":137421,"line_start":45,"line_end":45,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":137585,"byte_end":137595,"line_start":50,"line_end":50,"column_start":12,"column_end":22},"name":"iterations","qualname":"<HashRaw>::iterations","value":"pub fn iterations(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Obtain the iterations configuration that was used to produce this hash\n","sig":null,"attributes":[{"value":"/ Obtain the iterations configuration that was used to produce this hash","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":137499,"byte_end":137573,"line_start":49,"line_end":49,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":137727,"byte_end":137732,"line_start":54,"line_end":54,"column_start":12,"column_end":17},"name":"lanes","qualname":"<HashRaw>::lanes","value":"pub fn lanes(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Obtain the lanes configuration that was used to produce this hash\n","sig":null,"attributes":[{"value":"/ Obtain the lanes configuration that was used to produce this hash","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":137646,"byte_end":137715,"line_start":53,"line_end":53,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":137865,"byte_end":137876,"line_start":58,"line_end":58,"column_start":12,"column_end":23},"name":"memory_size","qualname":"<HashRaw>::memory_size","value":"pub fn memory_size(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Obtain the memory size configuration that was used to produce this hash\n","sig":null,"attributes":[{"value":"/ Obtain the memory size configuration that was used to produce this hash","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":137778,"byte_end":137853,"line_start":57,"line_end":57,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":137982,"byte_end":137996,"line_start":62,"line_end":62,"column_start":12,"column_end":26},"name":"raw_hash_bytes","qualname":"<HashRaw>::raw_hash_bytes","value":"pub fn raw_hash_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the raw hash bytes\n","sig":null,"attributes":[{"value":"/ Read-only access to the raw hash bytes","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":137928,"byte_end":137970,"line_start":61,"line_end":61,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":138108,"byte_end":138122,"line_start":66,"line_end":66,"column_start":12,"column_end":26},"name":"raw_salt_bytes","qualname":"<HashRaw>::raw_salt_bytes","value":"pub fn raw_salt_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Read-only access to the raw salt bytes\n","sig":null,"attributes":[{"value":"/ Read-only access to the raw salt bytes","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":138054,"byte_end":138096,"line_start":65,"line_end":65,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":138263,"byte_end":138270,"line_start":70,"line_end":70,"column_start":12,"column_end":19},"name":"variant","qualname":"<HashRaw>::variant","value":"pub fn variant(&Self) -> Variant","parent":null,"children":[],"decl_id":null,"docs":" Obtain the variant configuration that was used to produce this hash\n","sig":null,"attributes":[{"value":"/ Obtain the variant configuration that was used to produce this hash","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":138180,"byte_end":138251,"line_start":69,"line_end":69,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":138405,"byte_end":138412,"line_start":74,"line_end":74,"column_start":12,"column_end":19},"name":"version","qualname":"<HashRaw>::version","value":"pub fn version(&Self) -> Version","parent":null,"children":[],"decl_id":null,"docs":" Obtian the version configuration that was used to produce this hash\n","sig":null,"attributes":[{"value":"/ Obtian the version configuration that was used to produce this hash","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":138322,"byte_end":138393,"line_start":73,"line_end":73,"column_start":5,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":764},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::utils","value":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","parent":null,"children":[{"krate":0,"index":765},{"krate":0,"index":768},{"krate":0,"index":771},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":778},{"krate":0,"index":781},{"krate":0,"index":783},{"krate":0,"index":785}],"decl_id":null,"docs":" Utility functions for generating random bytes, which can be useful for generating\n [`SecretKey`](input/struct.SecretKey.html)s, for example.\n","sig":null,"attributes":[{"value":"/ Utility functions for generating random bytes, which can be useful for generating","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":139123,"byte_end":139208,"line_start":1,"line_end":1,"column_start":1,"column_end":86}},{"value":"/ [`SecretKey`](input/struct.SecretKey.html)s, for example.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":139209,"byte_end":139270,"line_start":2,"line_end":2,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":781},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":139544,"byte_end":139565,"line_start":11,"line_end":11,"column_start":8,"column_end":29},"name":"generate_random_bytes","qualname":"::utils::generate_random_bytes","value":"pub fn generate_random_bytes(u32) -> Result<Vec<u8>, Error>","parent":null,"children":[],"decl_id":null,"docs":" A utility function for generating cryptographically-secure random bytes. A quick glance at\n this function's source should give you a good idea of what the function is doing.\n","sig":null,"attributes":[{"value":"/ A utility function for generating cryptographically-secure random bytes. A quick glance at","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":139356,"byte_end":139450,"line_start":9,"line_end":9,"column_start":1,"column_end":95}},{"value":"/ this function's source should give you a good idea of what the function is doing.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":139451,"byte_end":139536,"line_start":10,"line_end":10,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":783},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":140142,"byte_end":140179,"line_start":24,"line_end":24,"column_start":8,"column_end":45},"name":"generate_random_base64_encoded_string","qualname":"::utils::generate_random_base64_encoded_string","value":"pub fn generate_random_base64_encoded_string(u32) -> Result<String, Error>","parent":null,"children":[],"decl_id":null,"docs":" A utility function for generating a cryptographically-secure, random, base64-encoded string\n based on\n [standard base64 encoding](https://docs.rs/base64/0.9.1/base64/constant.STANDARD.html).\n A quick glance at this function's source should give you a good idea of what the function\n is doing.\n","sig":null,"attributes":[{"value":"/ A utility function for generating a cryptographically-secure, random, base64-encoded string","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":139826,"byte_end":139921,"line_start":19,"line_end":19,"column_start":1,"column_end":96}},{"value":"/ based on","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":139922,"byte_end":139934,"line_start":20,"line_end":20,"column_start":1,"column_end":13}},{"value":"/ [standard base64 encoding](https://docs.rs/base64/0.9.1/base64/constant.STANDARD.html).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":139935,"byte_end":140026,"line_start":21,"line_end":21,"column_start":1,"column_end":92}},{"value":"/ A quick glance at this function's source should give you a good idea of what the function","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":140027,"byte_end":140120,"line_start":22,"line_end":22,"column_start":1,"column_end":94}},{"value":"/ is doing.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":140121,"byte_end":140134,"line_start":23,"line_end":23,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":785},"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":140849,"byte_end":140893,"line_start":38,"line_end":38,"column_start":8,"column_end":52},"name":"generate_random_base64_encoded_string_config","qualname":"::utils::generate_random_base64_encoded_string_config","value":"pub fn generate_random_base64_encoded_string_config(u32, base64::Config)\n-> Result<String, Error>","parent":null,"children":[],"decl_id":null,"docs":" A utility function for generating a cryptographically-secure, random, base64-encoded string\n based on a custom base64 encoding (e.g. a\n [url-safe encoding](https://docs.rs/base64/0.9.1/base64/constant.URL_SAFE.html)).\n A quick glance at this function's source should give you a good idea of what the\n function is doing.\n","sig":null,"attributes":[{"value":"/ A utility function for generating a cryptographically-secure, random, base64-encoded string","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":140506,"byte_end":140601,"line_start":33,"line_end":33,"column_start":1,"column_end":96}},{"value":"/ based on a custom base64 encoding (e.g. a","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":140602,"byte_end":140647,"line_start":34,"line_end":34,"column_start":1,"column_end":46}},{"value":"/ [url-safe encoding](https://docs.rs/base64/0.9.1/base64/constant.URL_SAFE.html)).","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":140648,"byte_end":140733,"line_start":35,"line_end":35,"column_start":1,"column_end":86}},{"value":"/ A quick glance at this function's source should give you a good idea of what the","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":140734,"byte_end":140818,"line_start":36,"line_end":36,"column_start":1,"column_end":85}},{"value":"/ function is doing.","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/utils.rs","byte_start":140819,"byte_end":140841,"line_start":37,"line_end":37,"column_start":1,"column_end":23}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/backend/c/hash_raw.rs","byte_start":21622,"byte_end":21628,"line_start":6,"line_end":6,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/backend/rust/encode.rs","byte_start":29732,"byte_end":29739,"line_start":5,"line_end":5,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":31613,"byte_end":31618,"line_start":5,"line_end":5,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":31879,"byte_end":31884,"line_start":15,"line_end":15,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":32018,"byte_end":32023,"line_start":21,"line_end":21,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":32551,"byte_end":32556,"line_start":38,"line_end":38,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":42239,"byte_end":42245,"line_start":11,"line_end":11,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":43206,"byte_end":43212,"line_start":38,"line_end":38,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":62614,"byte_end":62620,"line_start":398,"line_end":398,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":72608,"byte_end":72612,"line_start":10,"line_end":10,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":72910,"byte_end":72918,"line_start":25,"line_end":25,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":73451,"byte_end":73459,"line_start":44,"line_end":44,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":89539,"byte_end":89546,"line_start":4,"line_end":4,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":90562,"byte_end":90569,"line_start":29,"line_end":29,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95039,"byte_end":95051,"line_start":34,"line_end":34,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":96345,"byte_end":96357,"line_start":88,"line_end":88,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":102615,"byte_end":102622,"line_start":6,"line_end":6,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":102779,"byte_end":102786,"line_start":13,"line_end":13,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105636,"byte_end":105643,"line_start":70,"line_end":70,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":107567,"byte_end":107581,"line_start":25,"line_end":25,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":108203,"byte_end":108217,"line_start":51,"line_end":51,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":109385,"byte_end":109392,"line_start":6,"line_end":6,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":109543,"byte_end":109550,"line_start":13,"line_end":13,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":459},{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":110730,"byte_end":110737,"line_start":45,"line_end":45,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":113384,"byte_end":113398,"line_start":3,"line_end":3,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":113510,"byte_end":113524,"line_start":9,"line_end":9,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":113646,"byte_end":113660,"line_start":15,"line_end":15,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":113784,"byte_end":113798,"line_start":21,"line_end":21,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":113928,"byte_end":113942,"line_start":27,"line_end":27,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":114071,"byte_end":114085,"line_start":33,"line_end":33,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":114226,"byte_end":114240,"line_start":39,"line_end":39,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":114662,"byte_end":114676,"line_start":51,"line_end":51,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":115296,"byte_end":115310,"line_start":70,"line_end":70,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/container.rs","byte_start":116442,"byte_end":116451,"line_start":8,"line_end":8,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":116885,"byte_end":116893,"line_start":6,"line_end":6,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":117065,"byte_end":117073,"line_start":14,"line_end":14,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":117293,"byte_end":117301,"line_start":23,"line_end":23,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":117479,"byte_end":117487,"line_start":31,"line_end":31,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":117706,"byte_end":117714,"line_start":40,"line_end":40,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":117881,"byte_end":117889,"line_start":48,"line_end":48,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":118060,"byte_end":118068,"line_start":56,"line_end":56,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":118245,"byte_end":118253,"line_start":64,"line_end":64,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":118430,"byte_end":118438,"line_start":72,"line_end":72,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":118614,"byte_end":118622,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":118793,"byte_end":118801,"line_start":88,"line_end":88,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":119198,"byte_end":119206,"line_start":101,"line_end":101,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":119736,"byte_end":119744,"line_start":117,"line_end":117,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":120013,"byte_end":120021,"line_start":129,"line_end":129,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":121910,"byte_end":121918,"line_start":171,"line_end":171,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":122400,"byte_end":122404,"line_start":6,"line_end":6,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":122848,"byte_end":122852,"line_start":18,"line_end":18,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":122965,"byte_end":122969,"line_start":24,"line_end":24,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":123092,"byte_end":123096,"line_start":30,"line_end":30,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":123221,"byte_end":123225,"line_start":36,"line_end":36,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":123356,"byte_end":123360,"line_start":42,"line_end":42,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":123490,"byte_end":123494,"line_start":48,"line_end":48,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":123626,"byte_end":123630,"line_start":54,"line_end":54,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":124817,"byte_end":124821,"line_start":83,"line_end":83,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":126879,"byte_end":126883,"line_start":135,"line_end":135,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":128104,"byte_end":128113,"line_start":8,"line_end":8,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":128287,"byte_end":128296,"line_start":16,"line_end":16,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":128518,"byte_end":128527,"line_start":25,"line_end":25,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":128707,"byte_end":128716,"line_start":33,"line_end":33,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":128937,"byte_end":128946,"line_start":42,"line_end":42,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":129120,"byte_end":129129,"line_start":50,"line_end":50,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":129302,"byte_end":129311,"line_start":58,"line_end":58,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":129490,"byte_end":129499,"line_start":66,"line_end":66,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":129678,"byte_end":129687,"line_start":74,"line_end":74,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":129865,"byte_end":129874,"line_start":82,"line_end":82,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":130053,"byte_end":130062,"line_start":90,"line_end":90,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":130463,"byte_end":130472,"line_start":103,"line_end":103,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":693}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":131007,"byte_end":131016,"line_start":119,"line_end":119,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":131288,"byte_end":131297,"line_start":131,"line_end":131,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":702},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":135211,"byte_end":135220,"line_start":214,"line_end":214,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":135705,"byte_end":135712,"line_start":7,"line_end":7,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":137333,"byte_end":137340,"line_start":44,"line_end":44,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":18286,"byte_end":18292,"line_start":321,"line_end":321,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":292}},{"kind":"Mod","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":18379,"byte_end":18384,"line_start":325,"line_end":325,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":492}},{"kind":"Mod","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":18394,"byte_end":18400,"line_start":326,"line_end":326,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":731}},{"kind":"Mod","span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/lib.rs","byte_start":18410,"byte_end":18415,"line_start":327,"line_end":327,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":764}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/backend/c/hash_raw.rs","byte_start":21622,"byte_end":21628,"line_start":6,"line_end":6,"column_start":10,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/backend/rust/encode.rs","byte_start":29732,"byte_end":29739,"line_start":5,"line_end":5,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1706},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":31613,"byte_end":31618,"line_start":5,"line_end":5,"column_start":21,"column_end":26},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1146},"to":{"krate":2,"index":9555}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":31879,"byte_end":31884,"line_start":15,"line_end":15,"column_start":23,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1146},"to":{"krate":2,"index":9562}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":32018,"byte_end":32023,"line_start":21,"line_end":21,"column_start":26,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1146},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/error.rs","byte_start":32551,"byte_end":32556,"line_start":38,"line_end":38,"column_start":6,"column_end":11},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1146},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":42239,"byte_end":42245,"line_start":11,"line_end":11,"column_start":22,"column_end":28},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1345},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":43206,"byte_end":43212,"line_start":38,"line_end":38,"column_start":10,"column_end":16},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/hasher.rs","byte_start":62614,"byte_end":62620,"line_start":398,"line_end":398,"column_start":10,"column_end":16},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":72608,"byte_end":72612,"line_start":10,"line_end":10,"column_start":18,"column_end":22},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1355},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":72910,"byte_end":72918,"line_start":25,"line_end":25,"column_start":22,"column_end":30},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1368},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/verifier.rs","byte_start":73451,"byte_end":73459,"line_start":44,"line_end":44,"column_start":10,"column_end":18},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1368},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":89539,"byte_end":89546,"line_start":4,"line_end":4,"column_start":18,"column_end":25},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1375},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/backend.rs","byte_start":90562,"byte_end":90569,"line_start":29,"line_end":29,"column_start":6,"column_end":13},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":95039,"byte_end":95051,"line_start":34,"line_end":34,"column_start":6,"column_end":18},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/hasher_config.rs","byte_start":96345,"byte_end":96357,"line_start":88,"line_end":88,"column_start":6,"column_end":18},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":102615,"byte_end":102622,"line_start":6,"line_end":6,"column_start":18,"column_end":25},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1511},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":102779,"byte_end":102786,"line_start":13,"line_end":13,"column_start":18,"column_end":25},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1511},"to":{"krate":2,"index":12146}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/variant.rs","byte_start":105636,"byte_end":105643,"line_start":70,"line_end":70,"column_start":6,"column_end":13},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":107567,"byte_end":107581,"line_start":25,"line_end":25,"column_start":6,"column_end":20},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1539},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/verifier_config.rs","byte_start":108203,"byte_end":108217,"line_start":51,"line_end":51,"column_start":6,"column_end":20},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1539},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":109385,"byte_end":109392,"line_start":6,"line_end":6,"column_start":18,"column_end":25},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1549},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":109543,"byte_end":109550,"line_start":13,"line_end":13,"column_start":18,"column_end":25},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1549},"to":{"krate":2,"index":12146}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/config/version.rs","byte_start":110730,"byte_end":110737,"line_start":45,"line_end":45,"column_start":6,"column_end":13},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1549},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":113384,"byte_end":113398,"line_start":3,"line_end":3,"column_start":24,"column_end":38},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1574},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":113510,"byte_end":113524,"line_start":9,"line_end":9,"column_start":23,"column_end":37},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1574},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":113646,"byte_end":113660,"line_start":15,"line_end":15,"column_start":29,"column_end":43},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1574},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":113784,"byte_end":113798,"line_start":21,"line_end":21,"column_start":28,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1574},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":113928,"byte_end":113942,"line_start":27,"line_end":27,"column_start":32,"column_end":46},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1574},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":114071,"byte_end":114085,"line_start":33,"line_end":33,"column_start":31,"column_end":45},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1574},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":114226,"byte_end":114240,"line_start":39,"line_end":39,"column_start":39,"column_end":53},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1574},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":114662,"byte_end":114676,"line_start":51,"line_end":51,"column_start":6,"column_end":20},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/additional_data.rs","byte_start":115296,"byte_end":115310,"line_start":70,"line_end":70,"column_start":6,"column_end":20},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/container.rs","byte_start":116442,"byte_end":116451,"line_start":8,"line_end":8,"column_start":10,"column_end":19},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":116885,"byte_end":116893,"line_start":6,"line_end":6,"column_start":28,"column_end":36},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1624},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":117065,"byte_end":117073,"line_start":14,"line_end":14,"column_start":32,"column_end":40},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1624},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":117293,"byte_end":117301,"line_start":23,"line_end":23,"column_start":31,"column_end":39},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1624},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":117479,"byte_end":117487,"line_start":31,"line_end":31,"column_start":35,"column_end":43},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1624},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":117706,"byte_end":117714,"line_start":40,"line_end":40,"column_start":27,"column_end":35},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1624},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":117881,"byte_end":117889,"line_start":48,"line_end":48,"column_start":29,"column_end":37},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1624},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":118060,"byte_end":118068,"line_start":56,"line_end":56,"column_start":33,"column_end":41},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1624},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":118245,"byte_end":118253,"line_start":64,"line_end":64,"column_start":32,"column_end":40},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1624},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":118430,"byte_end":118438,"line_start":72,"line_end":72,"column_start":36,"column_end":44},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1624},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":118614,"byte_end":118622,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1624},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":118793,"byte_end":118801,"line_start":88,"line_end":88,"column_start":37,"column_end":45},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1624},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":119198,"byte_end":119206,"line_start":101,"line_end":101,"column_start":41,"column_end":49},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1624},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":119736,"byte_end":119744,"line_start":117,"line_end":117,"column_start":25,"column_end":33},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1624},"to":{"krate":2,"index":9555}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":120013,"byte_end":120021,"line_start":129,"line_end":129,"column_start":10,"column_end":18},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/password.rs","byte_start":121910,"byte_end":121918,"line_start":171,"line_end":171,"column_start":10,"column_end":18},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":122400,"byte_end":122404,"line_start":6,"line_end":6,"column_start":18,"column_end":22},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1642},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":122848,"byte_end":122852,"line_start":18,"line_end":18,"column_start":24,"column_end":28},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1642},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":122965,"byte_end":122969,"line_start":24,"line_end":24,"column_start":23,"column_end":27},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1642},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":123092,"byte_end":123096,"line_start":30,"line_end":30,"column_start":29,"column_end":33},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1642},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":123221,"byte_end":123225,"line_start":36,"line_end":36,"column_start":28,"column_end":32},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1642},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":123356,"byte_end":123360,"line_start":42,"line_end":42,"column_start":32,"column_end":36},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1642},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":123490,"byte_end":123494,"line_start":48,"line_end":48,"column_start":31,"column_end":35},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1642},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":123626,"byte_end":123630,"line_start":54,"line_end":54,"column_start":29,"column_end":33},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1642},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":124817,"byte_end":124821,"line_start":83,"line_end":83,"column_start":6,"column_end":10},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/salt.rs","byte_start":126879,"byte_end":126883,"line_start":135,"line_end":135,"column_start":6,"column_end":10},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":128104,"byte_end":128113,"line_start":8,"line_end":8,"column_start":28,"column_end":37},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1688},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":128287,"byte_end":128296,"line_start":16,"line_end":16,"column_start":32,"column_end":41},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1688},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":128518,"byte_end":128527,"line_start":25,"line_end":25,"column_start":31,"column_end":40},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1688},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":128707,"byte_end":128716,"line_start":33,"line_end":33,"column_start":35,"column_end":44},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1688},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":128937,"byte_end":128946,"line_start":42,"line_end":42,"column_start":27,"column_end":36},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1688},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":129120,"byte_end":129129,"line_start":50,"line_end":50,"column_start":29,"column_end":38},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1688},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":129302,"byte_end":129311,"line_start":58,"line_end":58,"column_start":33,"column_end":42},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1688},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":129490,"byte_end":129499,"line_start":66,"line_end":66,"column_start":32,"column_end":41},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1688},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":129678,"byte_end":129687,"line_start":74,"line_end":74,"column_start":36,"column_end":45},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1688},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":129865,"byte_end":129874,"line_start":82,"line_end":82,"column_start":28,"column_end":37},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1688},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":130053,"byte_end":130062,"line_start":90,"line_end":90,"column_start":38,"column_end":47},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1688},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":130463,"byte_end":130472,"line_start":103,"line_end":103,"column_start":42,"column_end":51},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1688},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":131007,"byte_end":131016,"line_start":119,"line_end":119,"column_start":25,"column_end":34},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1688},"to":{"krate":2,"index":9555}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":131288,"byte_end":131297,"line_start":131,"line_end":131,"column_start":10,"column_end":19},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/input/secret_key.rs","byte_start":135211,"byte_end":135220,"line_start":214,"line_end":214,"column_start":10,"column_end":19},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":135705,"byte_end":135712,"line_start":7,"line_end":7,"column_start":18,"column_end":25},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1706},"to":{"krate":2,"index":12146}},{"span":{"file_name":"/Users/macbookair/.cargo/registry/src/github.com-1ecc6299db9ec823/argonautica-0.2.0/src/output/hash_raw.rs","byte_start":137333,"byte_end":137340,"line_start":44,"line_end":44,"column_start":6,"column_end":13},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1706},"to":{"krate":4294967295,"index":4294967295}}]}